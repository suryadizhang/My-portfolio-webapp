{
  "chunks": [
    {
      "id": "profile-basic",
      "type": "profile",
      "title": "Basic Information",
      "content": "Suryadi Zhang is a Software Engineer (Full-Stack) | React & Python | Next.js, FastAPI, Postgres | Shipped live booking + admin | CI/CD. Located in Fremont, California, United States. I'm a Full-Stack Software Engineer with real-world experience delivering responsive web apps and robust APIs using React, Next.js, Python, FastAPI, and Postgres. I turn ambiguous requirements into production-ready systems and ship continuously with CI/CD.\n\nüöÄ How I Work\n‚Ä¢ Model data and design REST APIs with auth, pagination, and clear errors, documented with OpenAPI\n‚Ä¢ Build responsive React/Next.js UIs that perform well on mobile and are accessible by default\n‚Ä¢ Add guardrails with validation (Pydantic/Zod), rate limiting, logging/metrics, and automated tests\n‚Ä¢ Ship safely with GitHub Actions (lint, unit/integration tests, preview deploys)\n\nüí° Impact & Highlights\n‚Ä¢ Shipped a live booking platform + admin (Next.js/TypeScript + FastAPI/Postgres) deployed on Vercel + VPS ‚Üí role-based access, secure auth, rate limiting, automated deployments\n‚Ä¢ Increased deployment frequency by ~30% with GitHub Actions pipelines ‚Üí fewer regressions, faster delivery\n‚Ä¢ Reduced setup time in event operations by ~15% by designing SOPs and automation\n\nüõ†Ô∏è What I Build\n‚Ä¢ Booking/e-commerce flows that feel effortless on mobile\n‚Ä¢ Well-documented APIs with strong auth and predictable error models\n‚Ä¢ Admin dashboards with insights, bulk actions, and guardrails\n‚Ä¢ CI/CD pipelines for confident daily releases\n‚Ä¢ Systems that respect users ‚Äî secure, performant, reliable\n\nüîë Core Stack & Keywords\nTypeScript/JavaScript, Python, React, Next.js, FastAPI, Flask, Postgres, SQLAlchemy, Tailwind CSS, GitHub Actions, Vercel, OpenAPI/Swagger, MySQL, Express, Postman/Insomnia, Render/Netlify, CORS, OWASP basics\n\nOutside of coding: experimenting with hibachi recipes, hiking, cooking, basketball, and exploring new frameworks. I thrive in environments where curiosity, collaboration, and shipping real value come first.",
      "metadata": {
        "name": "Suryadi Zhang",
        "pronouns": "He/Him",
        "headline": "Software Engineer (Full-Stack) | React & Python | Next.js, FastAPI, Postgres | Shipped live booking + admin | CI/CD",
        "location": "Fremont, California, United States",
        "contact": {
          "email": "suryadizhang.swe@gmail.com",
          "website": "https://myportfolio.mysticdatanode.net",
          "github": "https://github.com/suryadizhang",
          "linkedin": "https://www.linkedin.com/in/suryadi-zhang/"
        },
        "summary": "I'm a Full-Stack Software Engineer with real-world experience delivering responsive web apps and robust APIs using React, Next.js, Python, FastAPI, and Postgres. I turn ambiguous requirements into production-ready systems and ship continuously with CI/CD.\n\nüöÄ How I Work\n‚Ä¢ Model data and design REST APIs with auth, pagination, and clear errors, documented with OpenAPI\n‚Ä¢ Build responsive React/Next.js UIs that perform well on mobile and are accessible by default\n‚Ä¢ Add guardrails with validation (Pydantic/Zod), rate limiting, logging/metrics, and automated tests\n‚Ä¢ Ship safely with GitHub Actions (lint, unit/integration tests, preview deploys)\n\nüí° Impact & Highlights\n‚Ä¢ Shipped a live booking platform + admin (Next.js/TypeScript + FastAPI/Postgres) deployed on Vercel + VPS ‚Üí role-based access, secure auth, rate limiting, automated deployments\n‚Ä¢ Increased deployment frequency by ~30% with GitHub Actions pipelines ‚Üí fewer regressions, faster delivery\n‚Ä¢ Reduced setup time in event operations by ~15% by designing SOPs and automation\n\nüõ†Ô∏è What I Build\n‚Ä¢ Booking/e-commerce flows that feel effortless on mobile\n‚Ä¢ Well-documented APIs with strong auth and predictable error models\n‚Ä¢ Admin dashboards with insights, bulk actions, and guardrails\n‚Ä¢ CI/CD pipelines for confident daily releases\n‚Ä¢ Systems that respect users ‚Äî secure, performant, reliable\n\nüîë Core Stack & Keywords\nTypeScript/JavaScript, Python, React, Next.js, FastAPI, Flask, Postgres, SQLAlchemy, Tailwind CSS, GitHub Actions, Vercel, OpenAPI/Swagger, MySQL, Express, Postman/Insomnia, Render/Netlify, CORS, OWASP basics\n\nOutside of coding: experimenting with hibachi recipes, hiking, cooking, basketball, and exploring new frameworks. I thrive in environments where curiosity, collaboration, and shipping real value come first.",
        "experience": [
          {
            "title": "Founder & Software Lead",
            "company": "My Hibachi LLC",
            "type": "Part-time",
            "dates": "Jun 2025 ‚Äì Present",
            "highlights": [
              "Shipped Next.js/Tailwind (Vercel) + FastAPI/Postgres (VPS) live booking + admin",
              "Implemented rate limiting, caching, schema validation; improved reliability",
              "Automated CI/CD with GitHub Actions; structured repos & PR checks"
            ]
          },
          {
            "title": "Full Stack Engineer (Apprenticeship)",
            "company": "Coding Temple",
            "dates": "Mar 2025 ‚Äì Present",
            "highlights": [
              "Built features in Next.js/React + FastAPI/Flask; improved responsiveness",
              "REST endpoints with validation & OpenAPI; CI with Postgres service",
              "Capstone app with auth + CRUD + responsive UI, documented setup"
            ]
          },
          {
            "title": "Additional Experience ‚Äî Hospitality & Culinary",
            "company": "Multiple Restaurants & Freelance",
            "dates": "Aug 2018 ‚Äì Jun 2025",
            "highlights": [
              "Coordinated 100+ events; SOPs/checklists cut setup errors",
              "Mentored 10+ staff; honed leadership, communication, teamwork"
            ]
          }
        ],
        "education": [
          {
            "school": "Coding Temple",
            "program": "Full-Stack Software Engineering",
            "dates": "Mar 2025 ‚Äì Sep 2025",
            "notes": "Certificate of Completion; capstone booking platform (Next.js + FastAPI/Postgres)"
          },
          {
            "school": "Universitas Surabaya",
            "program": "Economics (Some College, No Degree)",
            "notes": "Micro/Macroeconomics, Statistics; analytical and quantitative foundations"
          }
        ],
        "certifications": [
          {
            "name": "Backend Specialist",
            "issuer": "Coding Temple",
            "date": "Sep 2025",
            "id": "161097302"
          },
          {
            "name": "Software Engineering: Certificate of Completion",
            "issuer": "Coding Temple",
            "date": "Sep 2025",
            "id": "161097303"
          }
        ],
        "skills": [
          "Full-Stack Development",
          "React.js",
          "Next.js",
          "Python",
          "FastAPI",
          "Flask",
          "Postgres",
          "SQLAlchemy",
          "TypeScript",
          "Tailwind CSS",
          "CI/CD",
          "GitHub Actions",
          "OpenAPI/Swagger",
          "Testing (Pytest, Vitest)"
        ],
        "hobbies": [
          "Reading manga",
          "Cooking",
          "Playing video games"
        ],
        "availability": [
          "Software Engineer",
          "Full-Stack Engineer",
          "Back End Engineer"
        ]
      },
      "source": "profile.json",
      "tokens": [
        "suryadi",
        "zhang",
        "software",
        "engineer",
        "full",
        "stack",
        "react",
        "python",
        "next",
        "fastapi",
        "postgres",
        "shipped",
        "live",
        "booking",
        "admin",
        "located",
        "fremont",
        "california",
        "united",
        "states",
        "full",
        "stack",
        "software",
        "engineer",
        "with",
        "real",
        "world",
        "experience",
        "delivering",
        "responsive",
        "web",
        "apps",
        "robust",
        "apis",
        "using",
        "react",
        "next",
        "python",
        "fastapi",
        "postgres",
        "turn",
        "ambiguous",
        "requirements",
        "into",
        "production",
        "ready",
        "systems",
        "ship",
        "continuously",
        "with",
        "work",
        "model",
        "data",
        "design",
        "rest",
        "apis",
        "with",
        "auth",
        "pagination",
        "clear",
        "errors",
        "documented",
        "with",
        "openapi",
        "build",
        "responsive",
        "react",
        "next",
        "uis",
        "that",
        "perform",
        "well",
        "mobile",
        "accessible",
        "default",
        "add",
        "guardrails",
        "with",
        "validation",
        "pydantic",
        "zod",
        "rate",
        "limiting",
        "logging",
        "metrics",
        "automated",
        "tests",
        "ship",
        "safely",
        "with",
        "github",
        "actions",
        "lint",
        "unit",
        "integration",
        "tests",
        "preview",
        "deploys",
        "impact",
        "highlights",
        "shipped",
        "live",
        "booking",
        "platform",
        "admin",
        "next",
        "typescript",
        "fastapi",
        "postgres",
        "deployed",
        "vercel",
        "vps",
        "role",
        "based",
        "access",
        "secure",
        "auth",
        "rate",
        "limiting",
        "automated",
        "deployments",
        "increased",
        "deployment",
        "frequency",
        "with",
        "github",
        "actions",
        "pipelines",
        "fewer",
        "regressions",
        "faster",
        "delivery",
        "reduced",
        "setup",
        "time",
        "event",
        "operations",
        "designing",
        "sops",
        "automation",
        "what",
        "build",
        "booking",
        "commerce",
        "flows",
        "that",
        "feel",
        "effortless",
        "mobile",
        "well",
        "documented",
        "apis",
        "with",
        "strong",
        "auth",
        "predictable",
        "error",
        "models",
        "admin",
        "dashboards",
        "with",
        "insights",
        "bulk",
        "actions",
        "guardrails",
        "pipelines",
        "confident",
        "daily",
        "releases",
        "systems",
        "that",
        "respect",
        "users",
        "secure",
        "performant",
        "reliable",
        "core",
        "stack",
        "keywords",
        "typescript",
        "javascript",
        "python",
        "react",
        "next",
        "fastapi",
        "flask",
        "postgres",
        "sqlalchemy",
        "tailwind",
        "css",
        "github",
        "actions",
        "vercel",
        "openapi",
        "swagger",
        "mysql",
        "express",
        "postman",
        "insomnia",
        "render",
        "netlify",
        "cors",
        "owasp",
        "basics",
        "outside",
        "coding",
        "experimenting",
        "with",
        "hibachi",
        "recipes",
        "hiking",
        "cooking",
        "basketball",
        "exploring",
        "frameworks",
        "thrive",
        "environments",
        "where",
        "curiosity",
        "collaboration",
        "shipping",
        "real",
        "value",
        "come",
        "first"
      ]
    },
    {
      "id": "profile-exp-0",
      "type": "profile",
      "title": "Experience: Founder & Software Lead",
      "content": "Founder & Software Lead at My Hibachi LLC (Jun 2025 ‚Äì Present). Shipped Next.js/Tailwind (Vercel) + FastAPI/Postgres (VPS) live booking + admin. Implemented rate limiting, caching, schema validation; improved reliability. Automated CI/CD with GitHub Actions; structured repos & PR checks",
      "metadata": {
        "title": "Founder & Software Lead",
        "company": "My Hibachi LLC",
        "type": "Part-time",
        "dates": "Jun 2025 ‚Äì Present",
        "highlights": [
          "Shipped Next.js/Tailwind (Vercel) + FastAPI/Postgres (VPS) live booking + admin",
          "Implemented rate limiting, caching, schema validation; improved reliability",
          "Automated CI/CD with GitHub Actions; structured repos & PR checks"
        ]
      },
      "source": "profile.json",
      "tokens": [
        "founder",
        "software",
        "lead",
        "hibachi",
        "llc",
        "jun",
        "2025",
        "present",
        "shipped",
        "next",
        "tailwind",
        "vercel",
        "fastapi",
        "postgres",
        "vps",
        "live",
        "booking",
        "admin",
        "implemented",
        "rate",
        "limiting",
        "caching",
        "schema",
        "validation",
        "improved",
        "reliability",
        "automated",
        "with",
        "github",
        "actions",
        "structured",
        "repos",
        "checks"
      ]
    },
    {
      "id": "profile-exp-1",
      "type": "profile",
      "title": "Experience: Full Stack Engineer (Apprenticeship)",
      "content": "Full Stack Engineer (Apprenticeship) at Coding Temple (Mar 2025 ‚Äì Present). Built features in Next.js/React + FastAPI/Flask; improved responsiveness. REST endpoints with validation & OpenAPI; CI with Postgres service. Capstone app with auth + CRUD + responsive UI, documented setup",
      "metadata": {
        "title": "Full Stack Engineer (Apprenticeship)",
        "company": "Coding Temple",
        "dates": "Mar 2025 ‚Äì Present",
        "highlights": [
          "Built features in Next.js/React + FastAPI/Flask; improved responsiveness",
          "REST endpoints with validation & OpenAPI; CI with Postgres service",
          "Capstone app with auth + CRUD + responsive UI, documented setup"
        ]
      },
      "source": "profile.json",
      "tokens": [
        "full",
        "stack",
        "engineer",
        "apprenticeship",
        "coding",
        "temple",
        "mar",
        "2025",
        "present",
        "built",
        "features",
        "next",
        "react",
        "fastapi",
        "flask",
        "improved",
        "responsiveness",
        "rest",
        "endpoints",
        "with",
        "validation",
        "openapi",
        "with",
        "postgres",
        "service",
        "capstone",
        "app",
        "with",
        "auth",
        "crud",
        "responsive",
        "documented",
        "setup"
      ]
    },
    {
      "id": "profile-exp-2",
      "type": "profile",
      "title": "Experience: Additional Experience ‚Äî Hospitality & Culinary",
      "content": "Additional Experience ‚Äî Hospitality & Culinary at Multiple Restaurants & Freelance (Aug 2018 ‚Äì Jun 2025). Coordinated 100+ events; SOPs/checklists cut setup errors. Mentored 10+ staff; honed leadership, communication, teamwork",
      "metadata": {
        "title": "Additional Experience ‚Äî Hospitality & Culinary",
        "company": "Multiple Restaurants & Freelance",
        "dates": "Aug 2018 ‚Äì Jun 2025",
        "highlights": [
          "Coordinated 100+ events; SOPs/checklists cut setup errors",
          "Mentored 10+ staff; honed leadership, communication, teamwork"
        ]
      },
      "source": "profile.json",
      "tokens": [
        "additional",
        "experience",
        "hospitality",
        "culinary",
        "multiple",
        "restaurants",
        "freelance",
        "aug",
        "2018",
        "jun",
        "2025",
        "coordinated",
        "100",
        "events",
        "sops",
        "checklists",
        "cut",
        "setup",
        "errors",
        "mentored",
        "staff",
        "honed",
        "leadership",
        "communication",
        "teamwork"
      ]
    },
    {
      "id": "profile-skills",
      "type": "profile",
      "title": "Technical Skills",
      "content": "Technical skills: Full-Stack Development, React.js, Next.js, Python, FastAPI, Flask, Postgres, SQLAlchemy, TypeScript, Tailwind CSS, CI/CD, GitHub Actions, OpenAPI/Swagger, Testing (Pytest, Vitest)",
      "metadata": {
        "skills": [
          "Full-Stack Development",
          "React.js",
          "Next.js",
          "Python",
          "FastAPI",
          "Flask",
          "Postgres",
          "SQLAlchemy",
          "TypeScript",
          "Tailwind CSS",
          "CI/CD",
          "GitHub Actions",
          "OpenAPI/Swagger",
          "Testing (Pytest, Vitest)"
        ]
      },
      "source": "profile.json",
      "tokens": [
        "technical",
        "skills",
        "full",
        "stack",
        "development",
        "react",
        "next",
        "python",
        "fastapi",
        "flask",
        "postgres",
        "sqlalchemy",
        "typescript",
        "tailwind",
        "css",
        "github",
        "actions",
        "openapi",
        "swagger",
        "testing",
        "pytest",
        "vitest"
      ]
    },
    {
      "id": "profile-edu-0",
      "type": "profile",
      "title": "Education: Full-Stack Software Engineering",
      "content": "Full-Stack Software Engineering at Coding Temple (Mar 2025 ‚Äì Sep 2025). Certificate of Completion; capstone booking platform (Next.js + FastAPI/Postgres)",
      "metadata": {
        "school": "Coding Temple",
        "program": "Full-Stack Software Engineering",
        "dates": "Mar 2025 ‚Äì Sep 2025",
        "notes": "Certificate of Completion; capstone booking platform (Next.js + FastAPI/Postgres)"
      },
      "source": "profile.json",
      "tokens": [
        "full",
        "stack",
        "software",
        "engineering",
        "coding",
        "temple",
        "mar",
        "2025",
        "sep",
        "2025",
        "certificate",
        "completion",
        "capstone",
        "booking",
        "platform",
        "next",
        "fastapi",
        "postgres"
      ]
    },
    {
      "id": "profile-edu-1",
      "type": "profile",
      "title": "Education: Economics (Some College, No Degree)",
      "content": "Economics (Some College, No Degree) at Universitas Surabaya (undefined). Micro/Macroeconomics, Statistics; analytical and quantitative foundations",
      "metadata": {
        "school": "Universitas Surabaya",
        "program": "Economics (Some College, No Degree)",
        "notes": "Micro/Macroeconomics, Statistics; analytical and quantitative foundations"
      },
      "source": "profile.json",
      "tokens": [
        "economics",
        "some",
        "college",
        "degree",
        "universitas",
        "surabaya",
        "undefined",
        "micro",
        "macroeconomics",
        "statistics",
        "analytical",
        "quantitative",
        "foundations"
      ]
    },
    {
      "id": "project-ai-booking-platform-overview",
      "type": "project",
      "title": "AI-Powered Booking Platform",
      "content": "AI-Powered Booking Platform: undefined. ",
      "metadata": {
        "title": "AI-Powered Booking Platform",
        "slug": "ai-booking-platform",
        "summary": "Full-stack booking application with AI recommendations, real-time availability, and secure payment processing. Built with Next.js, Node.js, and PostgreSQL.",
        "tags": [
          "Next.js",
          "TypeScript",
          "PostgreSQL",
          "Stripe",
          "AI/ML"
        ],
        "year": 2024,
        "cover": "/images/projects/booking-platform.jpg",
        "links": {
          "repo": "https://github.com/suryadizhang/ai-booking-platform",
          "live": "https://booking-platform-demo.vercel.app"
        },
        "featured": true
      },
      "source": "ai-booking-platform.mdx",
      "slug": "ai-booking-platform",
      "tokens": [
        "powered",
        "booking",
        "platform",
        "undefined"
      ]
    },
    {
      "id": "project-ai-booking-platform-tech",
      "type": "project",
      "title": "AI-Powered Booking Platform - Technology Stack",
      "content": "AI-Powered Booking Platform is built with: Next.js, TypeScript, PostgreSQL, Stripe, AI/ML",
      "metadata": {
        "tags": [
          "Next.js",
          "TypeScript",
          "PostgreSQL",
          "Stripe",
          "AI/ML"
        ],
        "title": "AI-Powered Booking Platform"
      },
      "source": "ai-booking-platform.mdx",
      "slug": "ai-booking-platform",
      "tokens": [
        "powered",
        "booking",
        "platform",
        "built",
        "with",
        "next",
        "typescript",
        "postgresql",
        "stripe"
      ]
    },
    {
      "id": "project-ai-booking-platform-content-0",
      "type": "section",
      "title": "AI-Powered Booking Platform - Section 1",
      "content": "# AI-Powered Booking Platform\r\n\r\nA comprehensive booking platform that leverages artificial intelligence to provide personalized recommendations and streamline the booking process",
      "metadata": {
        "title": "AI-Powered Booking Platform",
        "slug": "ai-booking-platform",
        "summary": "Full-stack booking application with AI recommendations, real-time availability, and secure payment processing. Built with Next.js, Node.js, and PostgreSQL.",
        "tags": [
          "Next.js",
          "TypeScript",
          "PostgreSQL",
          "Stripe",
          "AI/ML"
        ],
        "year": 2024,
        "cover": "/images/projects/booking-platform.jpg",
        "links": {
          "repo": "https://github.com/suryadizhang/ai-booking-platform",
          "live": "https://booking-platform-demo.vercel.app"
        },
        "featured": true,
        "section": 1
      },
      "source": "ai-booking-platform.mdx",
      "slug": "ai-booking-platform",
      "tokens": [
        "powered",
        "booking",
        "platform",
        "comprehensive",
        "booking",
        "platform",
        "that",
        "leverages",
        "artificial",
        "intelligence",
        "provide",
        "personalized",
        "recommendations",
        "streamline",
        "booking",
        "process"
      ]
    },
    {
      "id": "project-ai-booking-platform-content-1",
      "type": "section",
      "title": "AI-Powered Booking Platform - Section 2",
      "content": "## Features\r\n\r\n- **Smart Recommendations**: AI-powered suggestions based on user preferences and booking history\r\n- **Real-time Availability**: Live updates of available slots and services\r\n- **Secure Payments**: Integrated with Stripe for secure payment processing\r\n- **User Dashboard**: Comprehensive dashboard for managing bookings and preferences\r\n- **Admin Panel**: Full administrative interface for service providers\r\n\r\n## Technical Implementation\r\n\r\nThis project demonstrates my ability to build complex, full-stack applications with modern technologies:\r\n\r\n### Frontend\r\n- **Next",
      "metadata": {
        "title": "AI-Powered Booking Platform",
        "slug": "ai-booking-platform",
        "summary": "Full-stack booking application with AI recommendations, real-time availability, and secure payment processing. Built with Next.js, Node.js, and PostgreSQL.",
        "tags": [
          "Next.js",
          "TypeScript",
          "PostgreSQL",
          "Stripe",
          "AI/ML"
        ],
        "year": 2024,
        "cover": "/images/projects/booking-platform.jpg",
        "links": {
          "repo": "https://github.com/suryadizhang/ai-booking-platform",
          "live": "https://booking-platform-demo.vercel.app"
        },
        "featured": true,
        "section": 2
      },
      "source": "ai-booking-platform.mdx",
      "slug": "ai-booking-platform",
      "tokens": [
        "features",
        "smart",
        "recommendations",
        "powered",
        "suggestions",
        "based",
        "user",
        "preferences",
        "booking",
        "history",
        "real",
        "time",
        "availability",
        "live",
        "updates",
        "available",
        "slots",
        "services",
        "secure",
        "payments",
        "integrated",
        "with",
        "stripe",
        "secure",
        "payment",
        "processing",
        "user",
        "dashboard",
        "comprehensive",
        "dashboard",
        "managing",
        "bookings",
        "preferences",
        "admin",
        "panel",
        "full",
        "administrative",
        "interface",
        "service",
        "providers",
        "technical",
        "implementation",
        "this",
        "project",
        "demonstrates",
        "ability",
        "build",
        "complex",
        "full",
        "stack",
        "applications",
        "with",
        "modern",
        "technologies",
        "frontend",
        "next"
      ]
    },
    {
      "id": "project-ai-booking-platform-content-2",
      "type": "section",
      "title": "AI-Powered Booking Platform - Section 3",
      "content": "js 14** with App Router for optimal performance\r\n- **TypeScript** for type safety and better developer experience\r\n- **Tailwind CSS** for responsive, modern UI design\r\n- **React Hook Form** for form handling and validation\r\n\r\n### Backend\r\n- **Node",
      "metadata": {
        "title": "AI-Powered Booking Platform",
        "slug": "ai-booking-platform",
        "summary": "Full-stack booking application with AI recommendations, real-time availability, and secure payment processing. Built with Next.js, Node.js, and PostgreSQL.",
        "tags": [
          "Next.js",
          "TypeScript",
          "PostgreSQL",
          "Stripe",
          "AI/ML"
        ],
        "year": 2024,
        "cover": "/images/projects/booking-platform.jpg",
        "links": {
          "repo": "https://github.com/suryadizhang/ai-booking-platform",
          "live": "https://booking-platform-demo.vercel.app"
        },
        "featured": true,
        "section": 3
      },
      "source": "ai-booking-platform.mdx",
      "slug": "ai-booking-platform",
      "tokens": [
        "with",
        "app",
        "router",
        "optimal",
        "performance",
        "typescript",
        "type",
        "safety",
        "better",
        "developer",
        "experience",
        "tailwind",
        "css",
        "responsive",
        "modern",
        "design",
        "react",
        "hook",
        "form",
        "form",
        "handling",
        "validation",
        "backend",
        "node"
      ]
    },
    {
      "id": "project-ai-booking-platform-content-3",
      "type": "section",
      "title": "AI-Powered Booking Platform - Section 4",
      "content": "js** with Express for API development\r\n- **PostgreSQL** for robust data management\r\n- **Prisma ORM** for database operations\r\n- **JWT** for secure authentication\r\n\r\n### DevOps & Deployment\r\n- **Docker** for containerization\r\n- **Vercel** for frontend deployment\r\n- **Railway** for database hosting\r\n- **GitHub Actions** for CI/CD\r\n\r\n## Key Achievements\r\n\r\n- Reduced booking time by **40%** through AI-powered recommendations\r\n- Implemented real-time features serving **1000+** concurrent users\r\n- Achieved **99",
      "metadata": {
        "title": "AI-Powered Booking Platform",
        "slug": "ai-booking-platform",
        "summary": "Full-stack booking application with AI recommendations, real-time availability, and secure payment processing. Built with Next.js, Node.js, and PostgreSQL.",
        "tags": [
          "Next.js",
          "TypeScript",
          "PostgreSQL",
          "Stripe",
          "AI/ML"
        ],
        "year": 2024,
        "cover": "/images/projects/booking-platform.jpg",
        "links": {
          "repo": "https://github.com/suryadizhang/ai-booking-platform",
          "live": "https://booking-platform-demo.vercel.app"
        },
        "featured": true,
        "section": 4
      },
      "source": "ai-booking-platform.mdx",
      "slug": "ai-booking-platform",
      "tokens": [
        "with",
        "express",
        "api",
        "development",
        "postgresql",
        "robust",
        "data",
        "management",
        "prisma",
        "orm",
        "database",
        "operations",
        "jwt",
        "secure",
        "authentication",
        "devops",
        "deployment",
        "docker",
        "containerization",
        "vercel",
        "frontend",
        "deployment",
        "railway",
        "database",
        "hosting",
        "github",
        "actions",
        "key",
        "achievements",
        "reduced",
        "booking",
        "time",
        "through",
        "powered",
        "recommendations",
        "implemented",
        "real",
        "time",
        "features",
        "serving",
        "1000",
        "concurrent",
        "users",
        "achieved"
      ]
    },
    {
      "id": "project-ai-booking-platform-content-4",
      "type": "section",
      "title": "AI-Powered Booking Platform - Section 5",
      "content": "9%** uptime with robust error handling\r\n- Built responsive design supporting all device types\r\n\r\n## Challenges Overcome\r\n\r\nThe biggest challenge was implementing real-time availability updates across multiple time zones while maintaining data consistency I solved this by implementing a event-driven architecture with WebSockets and optimistic locking",
      "metadata": {
        "title": "AI-Powered Booking Platform",
        "slug": "ai-booking-platform",
        "summary": "Full-stack booking application with AI recommendations, real-time availability, and secure payment processing. Built with Next.js, Node.js, and PostgreSQL.",
        "tags": [
          "Next.js",
          "TypeScript",
          "PostgreSQL",
          "Stripe",
          "AI/ML"
        ],
        "year": 2024,
        "cover": "/images/projects/booking-platform.jpg",
        "links": {
          "repo": "https://github.com/suryadizhang/ai-booking-platform",
          "live": "https://booking-platform-demo.vercel.app"
        },
        "featured": true,
        "section": 5
      },
      "source": "ai-booking-platform.mdx",
      "slug": "ai-booking-platform",
      "tokens": [
        "uptime",
        "with",
        "robust",
        "error",
        "handling",
        "built",
        "responsive",
        "design",
        "supporting",
        "device",
        "types",
        "challenges",
        "overcome",
        "biggest",
        "challenge",
        "implementing",
        "real",
        "time",
        "availability",
        "updates",
        "across",
        "multiple",
        "time",
        "zones",
        "while",
        "maintaining",
        "data",
        "consistency",
        "solved",
        "this",
        "implementing",
        "event",
        "driven",
        "architecture",
        "with",
        "websockets",
        "optimistic",
        "locking"
      ]
    },
    {
      "id": "project-ai-booking-platform-content-5",
      "type": "section",
      "title": "AI-Powered Booking Platform - Section 6",
      "content": "## What I Learned\r\n\r\nThis project deepened my understanding of:\r\n- Scalable architecture patterns\r\n- Real-time data synchronization\r\n- AI/ML integration in web applications\r\n- Performance optimization techniques",
      "metadata": {
        "title": "AI-Powered Booking Platform",
        "slug": "ai-booking-platform",
        "summary": "Full-stack booking application with AI recommendations, real-time availability, and secure payment processing. Built with Next.js, Node.js, and PostgreSQL.",
        "tags": [
          "Next.js",
          "TypeScript",
          "PostgreSQL",
          "Stripe",
          "AI/ML"
        ],
        "year": 2024,
        "cover": "/images/projects/booking-platform.jpg",
        "links": {
          "repo": "https://github.com/suryadizhang/ai-booking-platform",
          "live": "https://booking-platform-demo.vercel.app"
        },
        "featured": true,
        "section": 6
      },
      "source": "ai-booking-platform.mdx",
      "slug": "ai-booking-platform",
      "tokens": [
        "what",
        "learned",
        "this",
        "project",
        "deepened",
        "understanding",
        "scalable",
        "architecture",
        "patterns",
        "real",
        "time",
        "data",
        "synchronization",
        "integration",
        "web",
        "applications",
        "performance",
        "optimization",
        "techniques"
      ]
    },
    {
      "id": "project-ecommerce-analytics-overview",
      "type": "project",
      "title": "E-Commerce Analytics Dashboard",
      "content": "E-Commerce Analytics Dashboard: undefined. ",
      "metadata": {
        "title": "E-Commerce Analytics Dashboard",
        "slug": "ecommerce-analytics",
        "summary": "Real-time analytics dashboard for e-commerce businesses with data visualization, performance tracking, and automated reporting features.",
        "tags": [
          "React",
          "D3.js",
          "Node.js",
          "MongoDB",
          "Chart.js"
        ],
        "year": 2024,
        "cover": "/images/projects/analytics-dashboard.jpg",
        "links": {
          "repo": "https://github.com/suryadizhang/ecommerce-analytics"
        },
        "featured": true
      },
      "source": "ecommerce-analytics.mdx",
      "slug": "ecommerce-analytics",
      "tokens": [
        "commerce",
        "analytics",
        "dashboard",
        "undefined"
      ]
    },
    {
      "id": "project-ecommerce-analytics-tech",
      "type": "project",
      "title": "E-Commerce Analytics Dashboard - Technology Stack",
      "content": "E-Commerce Analytics Dashboard is built with: React, D3.js, Node.js, MongoDB, Chart.js",
      "metadata": {
        "tags": [
          "React",
          "D3.js",
          "Node.js",
          "MongoDB",
          "Chart.js"
        ],
        "title": "E-Commerce Analytics Dashboard"
      },
      "source": "ecommerce-analytics.mdx",
      "slug": "ecommerce-analytics",
      "tokens": [
        "commerce",
        "analytics",
        "dashboard",
        "built",
        "with",
        "react",
        "node",
        "mongodb",
        "chart"
      ]
    },
    {
      "id": "project-ecommerce-analytics-content-0",
      "type": "section",
      "title": "E-Commerce Analytics Dashboard - Section 1",
      "content": "# E-Commerce Analytics Dashboard\r\n\r\nA comprehensive analytics platform that provides real-time insights into e-commerce performance with interactive visualizations and automated reporting ## Overview\r\n\r\nBuilt for small to medium e-commerce businesses who need detailed insights into their sales performance, customer behavior, and inventory management without the complexity of enterprise solutions",
      "metadata": {
        "title": "E-Commerce Analytics Dashboard",
        "slug": "ecommerce-analytics",
        "summary": "Real-time analytics dashboard for e-commerce businesses with data visualization, performance tracking, and automated reporting features.",
        "tags": [
          "React",
          "D3.js",
          "Node.js",
          "MongoDB",
          "Chart.js"
        ],
        "year": 2024,
        "cover": "/images/projects/analytics-dashboard.jpg",
        "links": {
          "repo": "https://github.com/suryadizhang/ecommerce-analytics"
        },
        "featured": true,
        "section": 1
      },
      "source": "ecommerce-analytics.mdx",
      "slug": "ecommerce-analytics",
      "tokens": [
        "commerce",
        "analytics",
        "dashboard",
        "comprehensive",
        "analytics",
        "platform",
        "that",
        "provides",
        "real",
        "time",
        "insights",
        "into",
        "commerce",
        "performance",
        "with",
        "interactive",
        "visualizations",
        "automated",
        "reporting",
        "overview",
        "built",
        "small",
        "medium",
        "commerce",
        "businesses",
        "need",
        "detailed",
        "insights",
        "into",
        "their",
        "sales",
        "performance",
        "customer",
        "behavior",
        "inventory",
        "management",
        "without",
        "complexity",
        "enterprise",
        "solutions"
      ]
    },
    {
      "id": "project-ecommerce-analytics-content-1",
      "type": "section",
      "title": "E-Commerce Analytics Dashboard - Section 2",
      "content": "## Key Features\r\n\r\n### Real-time Data Visualization\r\n- Interactive charts showing sales trends, conversion rates, and customer metrics\r\n- Customizable dashboards with drag-and-drop widgets\r\n- Mobile-responsive design for on-the-go monitoring\r\n\r\n### Advanced Analytics\r\n- Customer segmentation and lifetime value calculations\r\n- Inventory turnover analysis and stock alerts\r\n- Performance comparisons across different time periods\r\n\r\n### Automated Reporting\r\n- Scheduled email reports with key metrics\r\n- Exportable data in multiple formats (PDF, CSV, Excel)\r\n- Custom alert system for significant metric changes\r\n\r\n## Technical Stack\r\n\r\n**Frontend**: React 18, TypeScript, Tailwind CSS, Chart",
      "metadata": {
        "title": "E-Commerce Analytics Dashboard",
        "slug": "ecommerce-analytics",
        "summary": "Real-time analytics dashboard for e-commerce businesses with data visualization, performance tracking, and automated reporting features.",
        "tags": [
          "React",
          "D3.js",
          "Node.js",
          "MongoDB",
          "Chart.js"
        ],
        "year": 2024,
        "cover": "/images/projects/analytics-dashboard.jpg",
        "links": {
          "repo": "https://github.com/suryadizhang/ecommerce-analytics"
        },
        "featured": true,
        "section": 2
      },
      "source": "ecommerce-analytics.mdx",
      "slug": "ecommerce-analytics",
      "tokens": [
        "key",
        "features",
        "real",
        "time",
        "data",
        "visualization",
        "interactive",
        "charts",
        "showing",
        "sales",
        "trends",
        "conversion",
        "rates",
        "customer",
        "metrics",
        "customizable",
        "dashboards",
        "with",
        "drag",
        "drop",
        "widgets",
        "mobile",
        "responsive",
        "design",
        "monitoring",
        "advanced",
        "analytics",
        "customer",
        "segmentation",
        "lifetime",
        "value",
        "calculations",
        "inventory",
        "turnover",
        "analysis",
        "stock",
        "alerts",
        "performance",
        "comparisons",
        "across",
        "different",
        "time",
        "periods",
        "automated",
        "reporting",
        "scheduled",
        "email",
        "reports",
        "with",
        "key",
        "metrics",
        "exportable",
        "data",
        "multiple",
        "formats",
        "pdf",
        "csv",
        "excel",
        "custom",
        "alert",
        "system",
        "significant",
        "metric",
        "changes",
        "technical",
        "stack",
        "frontend",
        "react",
        "typescript",
        "tailwind",
        "css",
        "chart"
      ]
    },
    {
      "id": "project-ecommerce-analytics-content-2",
      "type": "section",
      "title": "E-Commerce Analytics Dashboard - Section 3",
      "content": "js, Express, MongoDB, Redis  \r\n**Infrastructure**: Docker, AWS EC2, CloudWatch\r\n\r\n## Impact\r\n\r\n- Helped clients increase conversion rates by **25%** on average\r\n- Reduced time spent on manual reporting by **80%**\r\n- Provided actionable insights that led to **$50K+** in additional revenue for test clients\r\n\r\n## Code Quality\r\n\r\n- **95%** test coverage with Jest and React Testing Library\r\n- Comprehensive error handling and logging\r\n- Type-safe API with Zod validation\r\n- Performance optimized with lazy loading and caching",
      "metadata": {
        "title": "E-Commerce Analytics Dashboard",
        "slug": "ecommerce-analytics",
        "summary": "Real-time analytics dashboard for e-commerce businesses with data visualization, performance tracking, and automated reporting features.",
        "tags": [
          "React",
          "D3.js",
          "Node.js",
          "MongoDB",
          "Chart.js"
        ],
        "year": 2024,
        "cover": "/images/projects/analytics-dashboard.jpg",
        "links": {
          "repo": "https://github.com/suryadizhang/ecommerce-analytics"
        },
        "featured": true,
        "section": 3
      },
      "source": "ecommerce-analytics.mdx",
      "slug": "ecommerce-analytics",
      "tokens": [
        "express",
        "mongodb",
        "redis",
        "infrastructure",
        "docker",
        "aws",
        "ec2",
        "cloudwatch",
        "impact",
        "helped",
        "clients",
        "increase",
        "conversion",
        "rates",
        "average",
        "reduced",
        "time",
        "spent",
        "manual",
        "reporting",
        "provided",
        "actionable",
        "insights",
        "that",
        "led",
        "50k",
        "additional",
        "revenue",
        "test",
        "clients",
        "code",
        "quality",
        "test",
        "coverage",
        "with",
        "jest",
        "react",
        "testing",
        "library",
        "comprehensive",
        "error",
        "handling",
        "logging",
        "type",
        "safe",
        "api",
        "with",
        "zod",
        "validation",
        "performance",
        "optimized",
        "with",
        "lazy",
        "loading",
        "caching"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-overview",
      "type": "project",
      "title": "Flask E-commerce API - Multi-vendor Platform",
      "content": "Flask E-commerce API - Multi-vendor Platform: Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration. Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ]
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "flask",
        "commerce",
        "api",
        "multi",
        "vendor",
        "platform",
        "comprehensive",
        "commerce",
        "backend",
        "with",
        "flask",
        "postgresql",
        "jwt",
        "authentication",
        "payment",
        "integration",
        "full",
        "featured",
        "commerce",
        "api",
        "supporting",
        "multi",
        "vendor",
        "marketplace",
        "product",
        "catalog",
        "shopping",
        "cart",
        "order",
        "processing",
        "secure",
        "payments"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-tech",
      "type": "project",
      "title": "Flask E-commerce API - Multi-vendor Platform - Technology Stack",
      "content": "Flask E-commerce API - Multi-vendor Platform is built with: Python, Flask, PostgreSQL, JWT, Stripe, E-commerce",
      "metadata": {
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "title": "Flask E-commerce API - Multi-vendor Platform"
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "flask",
        "commerce",
        "api",
        "multi",
        "vendor",
        "platform",
        "built",
        "with",
        "python",
        "flask",
        "postgresql",
        "jwt",
        "stripe",
        "commerce"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-0",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 1",
      "content": "# Flask E-commerce API - Multi-vendor Platform\r\n\r\n**Production-ready e-commerce backend supporting multi-vendor marketplace, secure payments, and scalable order processing**\r\n\r\n## The Challenge\r\n\r\nBuilding a comprehensive e-commerce platform that could handle multiple vendors, complex product catalogs, shopping cart management, secure payment processing, and order fulfillment",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 1
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "flask",
        "commerce",
        "api",
        "multi",
        "vendor",
        "platform",
        "production",
        "ready",
        "commerce",
        "backend",
        "supporting",
        "multi",
        "vendor",
        "marketplace",
        "secure",
        "payments",
        "scalable",
        "order",
        "processing",
        "challenge",
        "building",
        "comprehensive",
        "commerce",
        "platform",
        "that",
        "could",
        "handle",
        "multiple",
        "vendors",
        "complex",
        "product",
        "catalogs",
        "shopping",
        "cart",
        "management",
        "secure",
        "payment",
        "processing",
        "order",
        "fulfillment"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-1",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 2",
      "content": "The API needed to scale efficiently while maintaining data consistency across thousands of products and concurrent user sessions ## Technical Architecture\r\n\r\n### Core Models & Relationships (Flask + SQLAlchemy)\r\n```python\r\n# User model with role-based access\r\nclass User(db Model, UserMixin):\r\n    __tablename__ = 'users'\r\n    \r\n    id = db Column(db Integer, primary_key=True)\r\n    email = db Column(db String(120), unique=True, nullable=False, index=True)\r\n    password_hash = db Column(db",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 2
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "api",
        "needed",
        "scale",
        "efficiently",
        "while",
        "maintaining",
        "data",
        "consistency",
        "across",
        "thousands",
        "products",
        "concurrent",
        "user",
        "sessions",
        "technical",
        "architecture",
        "core",
        "models",
        "relationships",
        "flask",
        "sqlalchemy",
        "python",
        "user",
        "model",
        "with",
        "role",
        "based",
        "access",
        "class",
        "user",
        "model",
        "usermixin",
        "__tablename__",
        "users",
        "column",
        "integer",
        "primary_key",
        "true",
        "email",
        "column",
        "string",
        "120",
        "unique",
        "true",
        "nullable",
        "false",
        "index",
        "true",
        "password_hash",
        "column"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-2",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 3",
      "content": "String(128))\r\n    first_name = db Column(db String(50), nullable=False)\r\n    last_name = db Column(db String(50), nullable=False)\r\n    role = db Column(db Enum('customer', 'vendor', 'admin'), default='customer')\r\n    is_active = db Column(db Boolean, default=True)\r\n    created_at = db Column(db DateTime, default=datetime utcnow)\r\n    \r\n    # Relationships\r\n    addresses = db relationship('Address', backref='user', lazy=True, cascade='all, delete-orphan')\r\n    orders = db",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 3
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "string",
        "128",
        "first_name",
        "column",
        "string",
        "nullable",
        "false",
        "last_name",
        "column",
        "string",
        "nullable",
        "false",
        "role",
        "column",
        "enum",
        "customer",
        "vendor",
        "admin",
        "default",
        "customer",
        "is_active",
        "column",
        "boolean",
        "default",
        "true",
        "created_at",
        "column",
        "datetime",
        "default",
        "datetime",
        "utcnow",
        "relationships",
        "addresses",
        "relationship",
        "address",
        "backref",
        "user",
        "lazy",
        "true",
        "cascade",
        "delete",
        "orphan",
        "orders"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-3",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 4",
      "content": "relationship('Order', backref='customer', lazy=True)\r\n    cart_items = db relationship('CartItem', backref='user', lazy=True, cascade='all, delete-orphan')\r\n    vendor_profile = db relationship('Vendor', backref='user', uselist=False, cascade='all, delete-orphan')\r\n    \r\n    def set_password(self, password):\r\n        self password_hash = generate_password_hash(password)\r\n    \r\n    def check_password(self, password):\r\n        return check_password_hash(self",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 4
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "relationship",
        "order",
        "backref",
        "customer",
        "lazy",
        "true",
        "cart_items",
        "relationship",
        "cartitem",
        "backref",
        "user",
        "lazy",
        "true",
        "cascade",
        "delete",
        "orphan",
        "vendor_profile",
        "relationship",
        "vendor",
        "backref",
        "user",
        "uselist",
        "false",
        "cascade",
        "delete",
        "orphan",
        "def",
        "set_password",
        "self",
        "password",
        "self",
        "password_hash",
        "password",
        "def",
        "check_password",
        "self",
        "password",
        "return",
        "check_password_hash",
        "self"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-4",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 5",
      "content": "password_hash, password)\r\n    \r\n    def generate_token(self, expires_in=3600):\r\n        return jwt encode(\r\n            {\r\n                'user_id': self id,\r\n                'role': self role,\r\n                'exp': datetime utcnow() + timedelta(seconds=expires_in)\r\n            },\r\n            current_app config['SECRET_KEY'],\r\n            algorithm='HS256'\r\n        )\r\n\r\n# Product model with categories and variants\r\nclass Product(db Model):\r\n    __tablename__ = 'products'\r\n    \r\n    id = db",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 5
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "password_hash",
        "password",
        "def",
        "generate_token",
        "self",
        "expires_in",
        "3600",
        "return",
        "jwt",
        "encode",
        "user_id",
        "self",
        "role",
        "self",
        "role",
        "exp",
        "datetime",
        "utcnow",
        "timedelta",
        "seconds",
        "expires_in",
        "current_app",
        "config",
        "secret_key",
        "algorithm",
        "hs256",
        "product",
        "model",
        "with",
        "categories",
        "variants",
        "class",
        "product",
        "model",
        "__tablename__",
        "products"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-5",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 6",
      "content": "Column(db Integer, primary_key=True)\r\n    vendor_id = db Column(db Integer, db ForeignKey('vendors id'), nullable=False)\r\n    category_id = db Column(db Integer, db ForeignKey('categories id'), nullable=False)\r\n    name = db Column(db String(200), nullable=False, index=True)\r\n    slug = db Column(db String(250), unique=True, nullable=False, index=True)\r\n    description = db Column(db Text)\r\n    short_description = db Column(db String(500))\r\n    base_price = db Column(db",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 6
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "column",
        "integer",
        "primary_key",
        "true",
        "vendor_id",
        "column",
        "integer",
        "foreignkey",
        "vendors",
        "nullable",
        "false",
        "category_id",
        "column",
        "integer",
        "foreignkey",
        "categories",
        "nullable",
        "false",
        "name",
        "column",
        "string",
        "200",
        "nullable",
        "false",
        "index",
        "true",
        "slug",
        "column",
        "string",
        "250",
        "unique",
        "true",
        "nullable",
        "false",
        "index",
        "true",
        "description",
        "column",
        "text",
        "short_description",
        "column",
        "string",
        "500",
        "base_price",
        "column"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-6",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 7",
      "content": "Numeric(10, 2), nullable=False)\r\n    stock_quantity = db Column(db Integer, default=0)\r\n    sku = db Column(db String(50), unique=True, nullable=False)\r\n    weight = db Column(db Numeric(8, 2))\r\n    dimensions = db Column(db JSON)\r\n    is_active = db Column(db Boolean, default=True)\r\n    is_featured = db Column(db Boolean, default=False)\r\n    created_at = db Column(db DateTime, default=datetime utcnow)\r\n    updated_at = db Column(db DateTime, default=datetime utcnow, onupdate=datetime",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 7
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "numeric",
        "nullable",
        "false",
        "stock_quantity",
        "column",
        "integer",
        "default",
        "sku",
        "column",
        "string",
        "unique",
        "true",
        "nullable",
        "false",
        "weight",
        "column",
        "numeric",
        "dimensions",
        "column",
        "json",
        "is_active",
        "column",
        "boolean",
        "default",
        "true",
        "is_featured",
        "column",
        "boolean",
        "default",
        "false",
        "created_at",
        "column",
        "datetime",
        "default",
        "datetime",
        "utcnow",
        "updated_at",
        "column",
        "datetime",
        "default",
        "datetime",
        "utcnow",
        "onupdate",
        "datetime"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-7",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 8",
      "content": "utcnow)\r\n    \r\n    # Relationships\r\n    images = db relationship('ProductImage', backref='product', lazy=True, cascade='all, delete-orphan')\r\n    variants = db relationship('ProductVariant', backref='product', lazy=True, cascade='all, delete-orphan')\r\n    reviews = db relationship('Review', backref='product', lazy=True)\r\n    cart_items = db relationship('CartItem', backref='product', lazy=True)\r\n    \r\n    # Search vector for full-text search\r\n    search_vector = db",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 8
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "utcnow",
        "relationships",
        "images",
        "relationship",
        "productimage",
        "backref",
        "product",
        "lazy",
        "true",
        "cascade",
        "delete",
        "orphan",
        "variants",
        "relationship",
        "productvariant",
        "backref",
        "product",
        "lazy",
        "true",
        "cascade",
        "delete",
        "orphan",
        "reviews",
        "relationship",
        "review",
        "backref",
        "product",
        "lazy",
        "true",
        "cart_items",
        "relationship",
        "cartitem",
        "backref",
        "product",
        "lazy",
        "true",
        "search",
        "vector",
        "full",
        "text",
        "search",
        "search_vector"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-8",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 9",
      "content": "Column(TSVectorType('name', 'description', 'short_description'))\r\n    \r\n    def to_dict(self, include_variants=True):\r\n        return {\r\n            'id': self id,\r\n            'vendor_id': self vendor_id,\r\n            'category_id': self category_id,\r\n            'name': self name,\r\n            'slug': self slug,\r\n            'description': self description,\r\n            'short_description': self short_description,\r\n            'base_price': float(self",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 9
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "column",
        "tsvectortype",
        "name",
        "description",
        "short_description",
        "def",
        "to_dict",
        "self",
        "include_variants",
        "true",
        "return",
        "self",
        "vendor_id",
        "self",
        "vendor_id",
        "category_id",
        "self",
        "category_id",
        "name",
        "self",
        "name",
        "slug",
        "self",
        "slug",
        "description",
        "self",
        "description",
        "short_description",
        "self",
        "short_description",
        "base_price",
        "float",
        "self"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-9",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 10",
      "content": "base_price),\r\n            'stock_quantity': self stock_quantity,\r\n            'sku': self sku,\r\n            'weight': float(self weight) if self weight else None,\r\n            'dimensions': self dimensions,\r\n            'is_active': self is_active,\r\n            'is_featured': self is_featured,\r\n            'average_rating': self get_average_rating(),\r\n            'review_count': len(self reviews),\r\n            'images': [img to_dict() for img in self images],\r\n            'variants': [v",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 10
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "base_price",
        "stock_quantity",
        "self",
        "stock_quantity",
        "sku",
        "self",
        "sku",
        "weight",
        "float",
        "self",
        "weight",
        "self",
        "weight",
        "else",
        "none",
        "dimensions",
        "self",
        "dimensions",
        "is_active",
        "self",
        "is_active",
        "is_featured",
        "self",
        "is_featured",
        "average_rating",
        "self",
        "get_average_rating",
        "review_count",
        "len",
        "self",
        "reviews",
        "images",
        "img",
        "to_dict",
        "img",
        "self",
        "images",
        "variants"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-10",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 11",
      "content": "to_dict() for v in self variants] if include_variants else [],\r\n            'created_at': self created_at isoformat(),\r\n            'updated_at': self updated_at isoformat()\r\n        }\r\n    \r\n    def get_average_rating(self):\r\n        if not self reviews:\r\n            return 0\r\n        return sum(review rating for review in self reviews) / len(self reviews)\r\n\r\n# Order model with comprehensive tracking\r\nclass Order(db Model):\r\n    __tablename__ = 'orders'\r\n    \r\n    id = db Column(db",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 11
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "to_dict",
        "self",
        "variants",
        "include_variants",
        "else",
        "created_at",
        "self",
        "created_at",
        "isoformat",
        "updated_at",
        "self",
        "updated_at",
        "isoformat",
        "def",
        "get_average_rating",
        "self",
        "self",
        "reviews",
        "return",
        "return",
        "sum",
        "review",
        "rating",
        "review",
        "self",
        "reviews",
        "len",
        "self",
        "reviews",
        "order",
        "model",
        "with",
        "comprehensive",
        "tracking",
        "class",
        "order",
        "model",
        "__tablename__",
        "orders",
        "column"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-11",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 12",
      "content": "Integer, primary_key=True)\r\n    order_number = db Column(db String(50), unique=True, nullable=False, index=True)\r\n    customer_id = db Column(db Integer, db ForeignKey('users id'), nullable=False)\r\n    status = db Column(db Enum('pending', 'confirmed', 'processing', 'shipped', 'delivered', 'cancelled'), default='pending')\r\n    \r\n    # Pricing\r\n    subtotal = db Column(db Numeric(10, 2), nullable=False)\r\n    tax_amount = db Column(db Numeric(10, 2), default=0)\r\n    shipping_amount = db Column(db",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 12
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "integer",
        "primary_key",
        "true",
        "order_number",
        "column",
        "string",
        "unique",
        "true",
        "nullable",
        "false",
        "index",
        "true",
        "customer_id",
        "column",
        "integer",
        "foreignkey",
        "users",
        "nullable",
        "false",
        "status",
        "column",
        "enum",
        "pending",
        "confirmed",
        "processing",
        "shipped",
        "delivered",
        "cancelled",
        "default",
        "pending",
        "pricing",
        "subtotal",
        "column",
        "numeric",
        "nullable",
        "false",
        "tax_amount",
        "column",
        "numeric",
        "default",
        "shipping_amount",
        "column"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-12",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 13",
      "content": "Numeric(10, 2), default=0)\r\n    discount_amount = db Column(db Numeric(10, 2), default=0)\r\n    total_amount = db Column(db Numeric(10, 2), nullable=False)\r\n    \r\n    # Addresses\r\n    shipping_address = db Column(db JSON, nullable=False)\r\n    billing_address = db Column(db JSON, nullable=False)\r\n    \r\n    # Payment info\r\n    payment_method = db Column(db String(50))\r\n    payment_status = db Column(db Enum('pending', 'paid', 'failed', 'refunded'), default='pending')\r\n    payment_intent_id = db",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 13
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "numeric",
        "default",
        "discount_amount",
        "column",
        "numeric",
        "default",
        "total_amount",
        "column",
        "numeric",
        "nullable",
        "false",
        "addresses",
        "shipping_address",
        "column",
        "json",
        "nullable",
        "false",
        "billing_address",
        "column",
        "json",
        "nullable",
        "false",
        "payment",
        "info",
        "payment_method",
        "column",
        "string",
        "payment_status",
        "column",
        "enum",
        "pending",
        "paid",
        "failed",
        "refunded",
        "default",
        "pending",
        "payment_intent_id"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-13",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 14",
      "content": "Column(db String(100))\r\n    \r\n    # Timestamps\r\n    created_at = db Column(db DateTime, default=datetime utcnow)\r\n    confirmed_at = db Column(db DateTime)\r\n    shipped_at = db Column(db DateTime)\r\n    delivered_at = db Column(db DateTime)\r\n    \r\n    # Relationships\r\n    items = db relationship('OrderItem', backref='order', lazy=True, cascade='all, delete-orphan')\r\n    \r\n    def generate_order_number(self):\r\n        \"\"\"Generate unique order number\"\"\"\r\n        timestamp = datetime utcnow()",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 14
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "column",
        "string",
        "100",
        "timestamps",
        "created_at",
        "column",
        "datetime",
        "default",
        "datetime",
        "utcnow",
        "confirmed_at",
        "column",
        "datetime",
        "shipped_at",
        "column",
        "datetime",
        "delivered_at",
        "column",
        "datetime",
        "relationships",
        "items",
        "relationship",
        "orderitem",
        "backref",
        "order",
        "lazy",
        "true",
        "cascade",
        "delete",
        "orphan",
        "def",
        "self",
        "generate",
        "unique",
        "order",
        "number",
        "timestamp",
        "datetime",
        "utcnow"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-14",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 15",
      "content": "strftime('%Y%m%d')\r\n        random_suffix = '' join(random choices(string digits, k=6))\r\n        return f\"ORD-{timestamp}-{random_suffix}\"\r\n```\r\n\r\n### Shopping Cart Management\r\n```python\r\n# Shopping cart with session management\r\nclass CartItem(db Model):\r\n    __tablename__ = 'cart_items'\r\n    \r\n    id = db Column(db Integer, primary_key=True)\r\n    user_id = db Column(db Integer, db ForeignKey('users id'), nullable=True)  # Null for guest carts\r\n    session_id = db Column(db",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 15
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "strftime",
        "random_suffix",
        "join",
        "random",
        "choices",
        "string",
        "digits",
        "return",
        "ord",
        "timestamp",
        "random_suffix",
        "shopping",
        "cart",
        "management",
        "python",
        "shopping",
        "cart",
        "with",
        "session",
        "management",
        "class",
        "cartitem",
        "model",
        "__tablename__",
        "cart_items",
        "column",
        "integer",
        "primary_key",
        "true",
        "user_id",
        "column",
        "integer",
        "foreignkey",
        "users",
        "nullable",
        "true",
        "null",
        "guest",
        "carts",
        "session_id",
        "column"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-15",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 16",
      "content": "String(100), nullable=True, index=True)  # For guest users\r\n    product_id = db Column(db Integer, db ForeignKey('products id'), nullable=False)\r\n    variant_id = db Column(db Integer, db ForeignKey('product_variants id'))\r\n    quantity = db Column(db Integer, nullable=False, default=1)\r\n    price_at_time = db Column(db Numeric(10, 2), nullable=False)  # Store price when added\r\n    created_at = db Column(db DateTime, default=datetime utcnow)\r\n    updated_at = db Column(db",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 16
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "string",
        "100",
        "nullable",
        "true",
        "index",
        "true",
        "guest",
        "users",
        "product_id",
        "column",
        "integer",
        "foreignkey",
        "products",
        "nullable",
        "false",
        "variant_id",
        "column",
        "integer",
        "foreignkey",
        "product_variants",
        "quantity",
        "column",
        "integer",
        "nullable",
        "false",
        "default",
        "price_at_time",
        "column",
        "numeric",
        "nullable",
        "false",
        "store",
        "price",
        "when",
        "added",
        "created_at",
        "column",
        "datetime",
        "default",
        "datetime",
        "utcnow",
        "updated_at",
        "column"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-16",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 17",
      "content": "DateTime, default=datetime utcnow, onupdate=datetime",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 17
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "datetime",
        "default",
        "datetime",
        "utcnow",
        "onupdate",
        "datetime"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-17",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 18",
      "content": "utcnow)\r\n    \r\n    # Constraints\r\n    __table_args__ = (\r\n        CheckConstraint('quantity > 0', name='check_quantity_positive'),\r\n        UniqueConstraint('user_id', 'product_id', 'variant_id', name='unique_user_product_variant'),\r\n        UniqueConstraint('session_id', 'product_id', 'variant_id', name='unique_session_product_variant')\r\n    )\r\n\r\n# Cart service for business logic\r\nclass CartService:\r\n    @staticmethod\r\n    def add_to_cart(user_id=None, session_id=None, product_id=None, variant_id=None, quantity=1):\r\n        \"\"\"Add item to cart with stock validation\"\"\"\r\n        product = Product",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 18
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "utcnow",
        "constraints",
        "__table_args__",
        "checkconstraint",
        "quantity",
        "name",
        "uniqueconstraint",
        "user_id",
        "product_id",
        "variant_id",
        "name",
        "uniqueconstraint",
        "session_id",
        "product_id",
        "variant_id",
        "name",
        "cart",
        "service",
        "business",
        "logic",
        "class",
        "cartservice",
        "staticmethod",
        "def",
        "add_to_cart",
        "user_id",
        "none",
        "session_id",
        "none",
        "product_id",
        "none",
        "variant_id",
        "none",
        "quantity",
        "add",
        "item",
        "cart",
        "with",
        "stock",
        "validation",
        "product",
        "product"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-18",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 19",
      "content": "query get(product_id)\r\n        if not product or not product is_active:\r\n            raise ValueError(\"Product not found or inactive\")\r\n        \r\n        # Check stock availability\r\n        available_stock = product stock_quantity\r\n        if variant_id:\r\n            variant = ProductVariant query get(variant_id)\r\n            if not variant:\r\n                raise ValueError(\"Product variant not found\")\r\n            available_stock = variant",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 19
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "query",
        "product_id",
        "product",
        "product",
        "is_active",
        "raise",
        "valueerror",
        "product",
        "found",
        "inactive",
        "check",
        "stock",
        "availability",
        "available_stock",
        "product",
        "stock_quantity",
        "variant_id",
        "variant",
        "productvariant",
        "query",
        "variant_id",
        "variant",
        "raise",
        "valueerror",
        "product",
        "variant",
        "found",
        "available_stock",
        "variant"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-19",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 20",
      "content": "stock_quantity\r\n        \r\n        # Check existing cart item\r\n        query = CartItem query filter_by(product_id=product_id, variant_id=variant_id)\r\n        if user_id:\r\n            query = query filter_by(user_id=user_id)\r\n        else:\r\n            query = query filter_by(session_id=session_id)\r\n        \r\n        existing_item = query first()\r\n        \r\n        if existing_item:\r\n            new_quantity = existing_item",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 20
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "stock_quantity",
        "check",
        "existing",
        "cart",
        "item",
        "query",
        "cartitem",
        "query",
        "filter_by",
        "product_id",
        "product_id",
        "variant_id",
        "variant_id",
        "user_id",
        "query",
        "query",
        "filter_by",
        "user_id",
        "user_id",
        "else",
        "query",
        "query",
        "filter_by",
        "session_id",
        "session_id",
        "existing_item",
        "query",
        "first",
        "existing_item",
        "new_quantity",
        "existing_item"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-20",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 21",
      "content": "quantity + quantity\r\n            if new_quantity > available_stock:\r\n                raise ValueError(f\"Only {available_stock} items available\")\r\n            existing_item quantity = new_quantity\r\n            existing_item updated_at = datetime",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 21
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "quantity",
        "quantity",
        "new_quantity",
        "available_stock",
        "raise",
        "valueerror",
        "only",
        "available_stock",
        "items",
        "available",
        "existing_item",
        "quantity",
        "new_quantity",
        "existing_item",
        "updated_at",
        "datetime"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-21",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 22",
      "content": "utcnow()\r\n            return existing_item\r\n        else:\r\n            if quantity > available_stock:\r\n                raise ValueError(f\"Only {available_stock} items available\")\r\n            \r\n            # Get current price\r\n            current_price = variant price if variant_id else product",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 22
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "utcnow",
        "return",
        "existing_item",
        "else",
        "quantity",
        "available_stock",
        "raise",
        "valueerror",
        "only",
        "available_stock",
        "items",
        "available",
        "current",
        "price",
        "current_price",
        "variant",
        "price",
        "variant_id",
        "else",
        "product"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-22",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 23",
      "content": "base_price\r\n            \r\n            cart_item = CartItem(\r\n                user_id=user_id,\r\n                session_id=session_id,\r\n                product_id=product_id,\r\n                variant_id=variant_id,\r\n                quantity=quantity,\r\n                price_at_time=current_price\r\n            )\r\n            db session",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 23
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "base_price",
        "cart_item",
        "cartitem",
        "user_id",
        "user_id",
        "session_id",
        "session_id",
        "product_id",
        "product_id",
        "variant_id",
        "variant_id",
        "quantity",
        "quantity",
        "price_at_time",
        "current_price",
        "session"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-23",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 24",
      "content": "add(cart_item)\r\n            return cart_item\r\n    \r\n    @staticmethod\r\n    def get_cart_total(user_id=None, session_id=None):\r\n        \"\"\"Calculate cart totals\"\"\"\r\n        query = CartItem query\r\n        if user_id:\r\n            query = query filter_by(user_id=user_id)\r\n        else:\r\n            query = query filter_by(session_id=session_id)\r\n        \r\n        cart_items = query all()\r\n        \r\n        subtotal = sum(item price_at_time * item",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 24
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "add",
        "cart_item",
        "return",
        "cart_item",
        "staticmethod",
        "def",
        "get_cart_total",
        "user_id",
        "none",
        "session_id",
        "none",
        "calculate",
        "cart",
        "totals",
        "query",
        "cartitem",
        "query",
        "user_id",
        "query",
        "query",
        "filter_by",
        "user_id",
        "user_id",
        "else",
        "query",
        "query",
        "filter_by",
        "session_id",
        "session_id",
        "cart_items",
        "query",
        "subtotal",
        "sum",
        "item",
        "price_at_time",
        "item"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-24",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 25",
      "content": "quantity for item in cart_items)\r\n        tax_rate = 0 08  # 8% tax\r\n        tax_amount = subtotal * tax_rate\r\n        total = subtotal + tax_amount\r\n        \r\n        return {\r\n            'items': [item",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 25
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "quantity",
        "item",
        "cart_items",
        "tax_rate",
        "tax",
        "tax_amount",
        "subtotal",
        "tax_rate",
        "total",
        "subtotal",
        "tax_amount",
        "return",
        "items",
        "item"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-25",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 26",
      "content": "to_dict() for item in cart_items],\r\n            'subtotal': float(subtotal),\r\n            'tax_amount': float(tax_amount),\r\n            'total': float(total),\r\n            'item_count': len(cart_items)\r\n        }\r\n```\r\n\r\n## Key API Endpoints\r\n\r\n### üîê Authentication & Users\r\n```http\r\nPOST /api/auth/register           # User registration\r\nPOST /api/auth/login              # User login\r\nPOST /api/auth/refresh            # Token refresh\r\nGET /api/auth/profile             # User profile\r\nPUT /api/auth/profile             # Update profile\r\n```\r\n\r\n### üõç Product Catalog\r\n```http\r\nGET /api/products                 # List products with filtering/search\r\nPOST /api/products                # Create product (vendors)\r\nGET /api/products/{id}            # Product details\r\nPUT /api/products/{id}            # Update product\r\nDELETE /api/products/{id}         # Delete product\r\nGET /api/products/search          # Full-text search\r\nGET /api/categories               # Product categories\r\n```\r\n\r\n### üõí Shopping Cart\r\n```http\r\nGET /api/cart                     # Get cart contents\r\nPOST /api/cart/add                # Add item to cart\r\nPUT /api/cart/items/{id}          # Update cart item\r\nDELETE /api/cart/items/{id}       # Remove from cart\r\nDELETE /api/cart                  # Clear cart\r\n```\r\n\r\n### üì¶ Order Management\r\n```http\r\nPOST /api/orders                  # Create order from cart\r\nGET /api/orders                   # List user orders\r\nGET /api/orders/{id}              # Order details\r\nPUT /api/orders/{id}/cancel       # Cancel order\r\nGET /api/orders/{id}/track        # Track order status\r\n```\r\n\r\n### üí≥ Payment Processing\r\n```http\r\nPOST /api/payments/intent         # Create payment intent\r\nPOST /api/payments/confirm        # Confirm payment\r\nPOST /api/payments/webhook        # Stripe webhooks\r\nGET /api/payments/{id}            # Payment details\r\n```\r\n\r\n## Advanced Features\r\n\r\n### Payment Integration with Stripe\r\n```python\r\n# Payment service with Stripe integration\r\nclass PaymentService:\r\n    def __init__(self):\r\n        self",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 26
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "to_dict",
        "item",
        "cart_items",
        "subtotal",
        "float",
        "subtotal",
        "tax_amount",
        "float",
        "tax_amount",
        "total",
        "float",
        "total",
        "item_count",
        "len",
        "cart_items",
        "key",
        "api",
        "endpoints",
        "authentication",
        "users",
        "http",
        "post",
        "api",
        "auth",
        "register",
        "user",
        "registration",
        "post",
        "api",
        "auth",
        "login",
        "user",
        "login",
        "post",
        "api",
        "auth",
        "refresh",
        "token",
        "refresh",
        "api",
        "auth",
        "profile",
        "user",
        "profile",
        "api",
        "auth",
        "profile",
        "update",
        "profile",
        "product",
        "catalog",
        "http",
        "api",
        "products",
        "list",
        "products",
        "with",
        "filtering",
        "search",
        "post",
        "api",
        "products",
        "create",
        "product",
        "vendors",
        "api",
        "products",
        "product",
        "details",
        "api",
        "products",
        "update",
        "product",
        "delete",
        "api",
        "products",
        "delete",
        "product",
        "api",
        "products",
        "search",
        "full",
        "text",
        "search",
        "api",
        "categories",
        "product",
        "categories",
        "shopping",
        "cart",
        "http",
        "api",
        "cart",
        "cart",
        "contents",
        "post",
        "api",
        "cart",
        "add",
        "add",
        "item",
        "cart",
        "api",
        "cart",
        "items",
        "update",
        "cart",
        "item",
        "delete",
        "api",
        "cart",
        "items",
        "remove",
        "from",
        "cart",
        "delete",
        "api",
        "cart",
        "clear",
        "cart",
        "order",
        "management",
        "http",
        "post",
        "api",
        "orders",
        "create",
        "order",
        "from",
        "cart",
        "api",
        "orders",
        "list",
        "user",
        "orders",
        "api",
        "orders",
        "order",
        "details",
        "api",
        "orders",
        "cancel",
        "cancel",
        "order",
        "api",
        "orders",
        "track",
        "track",
        "order",
        "status",
        "payment",
        "processing",
        "http",
        "post",
        "api",
        "payments",
        "intent",
        "create",
        "payment",
        "intent",
        "post",
        "api",
        "payments",
        "confirm",
        "confirm",
        "payment",
        "post",
        "api",
        "payments",
        "webhook",
        "stripe",
        "webhooks",
        "api",
        "payments",
        "payment",
        "details",
        "advanced",
        "features",
        "payment",
        "integration",
        "with",
        "stripe",
        "python",
        "payment",
        "service",
        "with",
        "stripe",
        "integration",
        "class",
        "paymentservice",
        "def",
        "__init__",
        "self",
        "self"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-26",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 27",
      "content": "stripe = stripe\r\n        self stripe api_key = current_app config['STRIPE_SECRET_KEY']\r\n    \r\n    def create_payment_intent(self, order_id, amount, currency='usd'):\r\n        \"\"\"Create Stripe payment intent\"\"\"\r\n        order = Order query get(order_id)\r\n        if not order:\r\n            raise ValueError(\"Order not found\")\r\n        \r\n        try:\r\n            intent = self stripe PaymentIntent",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 27
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "stripe",
        "stripe",
        "self",
        "stripe",
        "api_key",
        "current_app",
        "config",
        "stripe_secret_key",
        "def",
        "self",
        "order_id",
        "amount",
        "currency",
        "usd",
        "create",
        "stripe",
        "payment",
        "intent",
        "order",
        "order",
        "query",
        "order_id",
        "order",
        "raise",
        "valueerror",
        "order",
        "found",
        "try",
        "intent",
        "self",
        "stripe",
        "paymentintent"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-27",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 28",
      "content": "create(\r\n                amount=int(amount * 100),  # Convert to cents\r\n                currency=currency,\r\n                metadata={\r\n                    'order_id': order id,\r\n                    'order_number': order order_number,\r\n                    'customer_email': order customer email\r\n                },\r\n                automatic_payment_methods={'enabled': True}\r\n            )\r\n            \r\n            # Store payment intent ID\r\n            order payment_intent_id = intent",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 28
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "create",
        "amount",
        "int",
        "amount",
        "100",
        "convert",
        "cents",
        "currency",
        "currency",
        "metadata",
        "order_id",
        "order",
        "order_number",
        "order",
        "order_number",
        "customer_email",
        "order",
        "customer",
        "email",
        "enabled",
        "true",
        "store",
        "payment",
        "intent",
        "order",
        "payment_intent_id",
        "intent"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-28",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 29",
      "content": "id\r\n            order payment_status = 'pending'\r\n            db session commit()\r\n            \r\n            return {\r\n                'client_secret': intent client_secret,\r\n                'payment_intent_id': intent id,\r\n                'amount': amount\r\n            }\r\n        except stripe error StripeError as e:\r\n            current_app logger",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 29
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "order",
        "payment_status",
        "pending",
        "session",
        "commit",
        "return",
        "client_secret",
        "intent",
        "client_secret",
        "payment_intent_id",
        "intent",
        "amount",
        "amount",
        "except",
        "stripe",
        "error",
        "stripeerror",
        "current_app",
        "logger"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-29",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 30",
      "content": "error(f\"Stripe error: {str(e)}\")\r\n            raise ValueError(f\"Payment processing error: {str(e)}\")\r\n    \r\n    def handle_webhook(self, payload, sig_header):\r\n        \"\"\"Handle Stripe webhook events\"\"\"\r\n        webhook_secret = current_app config['STRIPE_WEBHOOK_SECRET']\r\n        \r\n        try:\r\n            event = self stripe Webhook construct_event(\r\n                payload, sig_header, webhook_secret\r\n            )\r\n        except ValueError as e:\r\n            current_app logger",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 30
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "error",
        "stripe",
        "error",
        "str",
        "raise",
        "valueerror",
        "payment",
        "processing",
        "error",
        "str",
        "def",
        "handle_webhook",
        "self",
        "payload",
        "sig_header",
        "handle",
        "stripe",
        "webhook",
        "events",
        "webhook_secret",
        "current_app",
        "config",
        "try",
        "event",
        "self",
        "stripe",
        "webhook",
        "construct_event",
        "payload",
        "sig_header",
        "webhook_secret",
        "except",
        "valueerror",
        "current_app",
        "logger"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-30",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 31",
      "content": "error(f\"Invalid payload: {str(e)}\")\r\n            return False\r\n        except stripe error SignatureVerificationError as e:\r\n            current_app logger error(f\"Invalid signature: {str(e)}\")\r\n            return False\r\n        \r\n        # Handle the event\r\n        if event['type'] == 'payment_intent succeeded':\r\n            payment_intent = event['data']['object']\r\n            self _handle_successful_payment(payment_intent)\r\n        elif event['type'] == 'payment_intent",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 31
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "error",
        "invalid",
        "payload",
        "str",
        "return",
        "false",
        "except",
        "stripe",
        "error",
        "current_app",
        "logger",
        "error",
        "invalid",
        "signature",
        "str",
        "return",
        "false",
        "handle",
        "event",
        "event",
        "type",
        "payment_intent",
        "succeeded",
        "payment_intent",
        "event",
        "data",
        "object",
        "self",
        "payment_intent",
        "elif",
        "event",
        "type",
        "payment_intent"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-31",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 32",
      "content": "payment_failed':\r\n            payment_intent = event['data']['object']\r\n            self _handle_failed_payment(payment_intent)\r\n        \r\n        return True\r\n    \r\n    def _handle_successful_payment(self, payment_intent):\r\n        \"\"\"Process successful payment\"\"\"\r\n        order = Order query filter_by(payment_intent_id=payment_intent['id']) first()\r\n        if order:\r\n            order payment_status = 'paid'\r\n            order status = 'confirmed'\r\n            order confirmed_at = datetime",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 32
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "payment_failed",
        "payment_intent",
        "event",
        "data",
        "object",
        "self",
        "payment_intent",
        "return",
        "true",
        "def",
        "self",
        "payment_intent",
        "process",
        "successful",
        "payment",
        "order",
        "order",
        "query",
        "filter_by",
        "payment_intent_id",
        "payment_intent",
        "first",
        "order",
        "order",
        "payment_status",
        "paid",
        "order",
        "status",
        "confirmed",
        "order",
        "confirmed_at",
        "datetime"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-32",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 33",
      "content": "utcnow()\r\n            \r\n            # Update stock quantities\r\n            for item in order items:\r\n                if item variant_id:\r\n                    variant = ProductVariant query get(item variant_id)\r\n                    variant stock_quantity -= item quantity\r\n                else:\r\n                    product = Product query get(item product_id)\r\n                    product stock_quantity -= item quantity\r\n            \r\n            db session",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 33
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "utcnow",
        "update",
        "stock",
        "quantities",
        "item",
        "order",
        "items",
        "item",
        "variant_id",
        "variant",
        "productvariant",
        "query",
        "item",
        "variant_id",
        "variant",
        "stock_quantity",
        "item",
        "quantity",
        "else",
        "product",
        "product",
        "query",
        "item",
        "product_id",
        "product",
        "stock_quantity",
        "item",
        "quantity",
        "session"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-33",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 34",
      "content": "commit()\r\n            \r\n            # Send confirmation email (async task)\r\n            send_order_confirmation delay(order id)\r\n```\r\n\r\n### Full-Text Search Implementation\r\n```python\r\n# Product search with PostgreSQL full-text search\r\n@products_bp route('/search', methods=['GET'])\r\ndef search_products():\r\n    query = request args get('q', '') strip()\r\n    category = request args get('category', type=int)\r\n    min_price = request args get('min_price', type=float)\r\n    max_price = request args",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 34
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "commit",
        "send",
        "confirmation",
        "email",
        "async",
        "task",
        "delay",
        "order",
        "full",
        "text",
        "search",
        "implementation",
        "python",
        "product",
        "search",
        "with",
        "postgresql",
        "full",
        "text",
        "search",
        "products_bp",
        "route",
        "search",
        "methods",
        "def",
        "search_products",
        "query",
        "request",
        "args",
        "strip",
        "category",
        "request",
        "args",
        "category",
        "type",
        "int",
        "min_price",
        "request",
        "args",
        "min_price",
        "type",
        "float",
        "max_price",
        "request",
        "args"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-34",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 35",
      "content": "get('max_price', type=float)\r\n    sort_by = request args get('sort', 'relevance')\r\n    page = request args get('page', 1, type=int)\r\n    per_page = min(request args get('per_page', 20, type=int), 100)\r\n    \r\n    try:\r\n        # Base query with active products only\r\n        products_query = Product query filter_by(is_active=True)\r\n        \r\n        # Full-text search\r\n        if query:\r\n            search_query = ' & ' join(query split())  # AND search\r\n            products_query = products_query",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 35
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "max_price",
        "type",
        "float",
        "sort_by",
        "request",
        "args",
        "sort",
        "relevance",
        "page",
        "request",
        "args",
        "page",
        "type",
        "int",
        "per_page",
        "min",
        "request",
        "args",
        "per_page",
        "type",
        "int",
        "100",
        "try",
        "base",
        "query",
        "with",
        "active",
        "products",
        "only",
        "products_query",
        "product",
        "query",
        "filter_by",
        "is_active",
        "true",
        "full",
        "text",
        "search",
        "query",
        "search_query",
        "join",
        "query",
        "split",
        "search",
        "products_query",
        "products_query"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-35",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 36",
      "content": "filter(\r\n                Product search_vector match(search_query)\r\n            )\r\n        \r\n        # Category filter\r\n        if category:\r\n            products_query = products_query filter_by(category_id=category)\r\n        \r\n        # Price range filter\r\n        if min_price is not None:\r\n            products_query = products_query filter(Product base_price >= min_price)\r\n        if max_price is not None:\r\n            products_query = products_query filter(Product",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 36
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "filter",
        "product",
        "search_vector",
        "match",
        "search_query",
        "category",
        "filter",
        "category",
        "products_query",
        "products_query",
        "filter_by",
        "category_id",
        "category",
        "price",
        "range",
        "filter",
        "min_price",
        "none",
        "products_query",
        "products_query",
        "filter",
        "product",
        "base_price",
        "min_price",
        "max_price",
        "none",
        "products_query",
        "products_query",
        "filter",
        "product"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-36",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 37",
      "content": "base_price <= max_price)\r\n        \r\n        # Sorting\r\n        if sort_by == 'price_asc':\r\n            products_query = products_query order_by(Product base_price asc())\r\n        elif sort_by == 'price_desc':\r\n            products_query = products_query order_by(Product base_price desc())\r\n        elif sort_by == 'newest':\r\n            products_query = products_query order_by(Product created_at",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 37
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "base_price",
        "max_price",
        "sorting",
        "sort_by",
        "price_asc",
        "products_query",
        "products_query",
        "order_by",
        "product",
        "base_price",
        "asc",
        "elif",
        "sort_by",
        "price_desc",
        "products_query",
        "products_query",
        "order_by",
        "product",
        "base_price",
        "desc",
        "elif",
        "sort_by",
        "newest",
        "products_query",
        "products_query",
        "order_by",
        "product",
        "created_at"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-37",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 38",
      "content": "desc())\r\n        elif sort_by == 'rating':\r\n            # Order by average rating (requires subquery)\r\n            avg_rating_subquery = db session query(\r\n                Review product_id,\r\n                func avg(Review rating) label('avg_rating')\r\n            ) group_by(Review product_id) subquery()\r\n            \r\n            products_query = products_query outerjoin(\r\n                avg_rating_subquery,\r\n                Product id == avg_rating_subquery c product_id\r\n            )",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 38
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "desc",
        "elif",
        "sort_by",
        "rating",
        "order",
        "average",
        "rating",
        "requires",
        "subquery",
        "avg_rating_subquery",
        "session",
        "query",
        "review",
        "product_id",
        "func",
        "avg",
        "review",
        "rating",
        "label",
        "avg_rating",
        "group_by",
        "review",
        "product_id",
        "subquery",
        "products_query",
        "products_query",
        "outerjoin",
        "avg_rating_subquery",
        "product",
        "avg_rating_subquery",
        "product_id"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-38",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 39",
      "content": "order_by(avg_rating_subquery c avg_rating desc() nullslast())\r\n        elif query:  # Relevance sorting for search\r\n            products_query = products_query order_by(\r\n                func ts_rank(Product search_vector, func plainto_tsquery(query)) desc()\r\n            )\r\n        \r\n        # Pagination\r\n        pagination = products_query paginate(\r\n            page=page, per_page=per_page, error_out=False\r\n        )\r\n        \r\n        return jsonify({\r\n            'products': [product",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 39
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "order_by",
        "avg_rating_subquery",
        "avg_rating",
        "desc",
        "nullslast",
        "elif",
        "query",
        "relevance",
        "sorting",
        "search",
        "products_query",
        "products_query",
        "order_by",
        "func",
        "ts_rank",
        "product",
        "search_vector",
        "func",
        "plainto_tsquery",
        "query",
        "desc",
        "pagination",
        "pagination",
        "products_query",
        "paginate",
        "page",
        "page",
        "per_page",
        "per_page",
        "error_out",
        "false",
        "return",
        "jsonify",
        "products",
        "product"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-39",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 40",
      "content": "to_dict(include_variants=False) for product in pagination items],\r\n            'pagination': {\r\n                'page': page,\r\n                'pages': pagination pages,\r\n                'per_page': per_page,\r\n                'total': pagination total,\r\n                'has_next': pagination has_next,\r\n                'has_prev': pagination",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 40
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "to_dict",
        "include_variants",
        "false",
        "product",
        "pagination",
        "items",
        "pagination",
        "page",
        "page",
        "pages",
        "pagination",
        "pages",
        "per_page",
        "per_page",
        "total",
        "pagination",
        "total",
        "has_next",
        "pagination",
        "has_next",
        "has_prev",
        "pagination"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-40",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 41",
      "content": "has_prev\r\n            },\r\n            'filters': {\r\n                'query': query,\r\n                'category': category,\r\n                'min_price': min_price,\r\n                'max_price': max_price,\r\n                'sort_by': sort_by\r\n            }\r\n        }), 200\r\n        \r\n    except Exception as e:\r\n        current_app logger",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 41
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "has_prev",
        "filters",
        "query",
        "query",
        "category",
        "category",
        "min_price",
        "min_price",
        "max_price",
        "max_price",
        "sort_by",
        "sort_by",
        "200",
        "except",
        "exception",
        "current_app",
        "logger"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-41",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 42",
      "content": "error(f'Product search error: {str(e)}')\r\n        return jsonify({'error': 'Search failed'}), 500\r\n```\r\n\r\n### Order Processing Workflow\r\n```python\r\n# Order creation with inventory management\r\n@orders_bp route('', methods=['POST'])\r\n@jwt_required()\r\ndef create_order():\r\n    current_user_id = get_jwt_identity()\r\n    data = request",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 42
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "error",
        "product",
        "search",
        "error",
        "str",
        "return",
        "jsonify",
        "error",
        "search",
        "failed",
        "500",
        "order",
        "processing",
        "workflow",
        "python",
        "order",
        "creation",
        "with",
        "inventory",
        "management",
        "orders_bp",
        "route",
        "methods",
        "post",
        "jwt_required",
        "def",
        "create_order",
        "current_user_id",
        "get_jwt_identity",
        "data",
        "request"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-42",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 43",
      "content": "get_json()\r\n    \r\n    try:\r\n        # Validate required fields\r\n        required_fields = ['shipping_address', 'billing_address', 'payment_method']\r\n        for field in required_fields:\r\n            if field not in data:\r\n                return jsonify({'error': f'{field} is required'}), 400\r\n        \r\n        # Get cart items\r\n        cart_items = CartItem query filter_by(user_id=current_user_id)",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 43
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "get_json",
        "try",
        "validate",
        "required",
        "fields",
        "required_fields",
        "shipping_address",
        "billing_address",
        "payment_method",
        "field",
        "required_fields",
        "field",
        "data",
        "return",
        "jsonify",
        "error",
        "field",
        "required",
        "400",
        "cart",
        "items",
        "cart_items",
        "cartitem",
        "query",
        "filter_by",
        "user_id",
        "current_user_id"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-43",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 44",
      "content": "all()\r\n        if not cart_items:\r\n            return jsonify({'error': 'Cart is empty'}), 400\r\n        \r\n        # Start transaction\r\n        db session begin()\r\n        \r\n        # Calculate totals\r\n        cart_totals = CartService get_cart_total(user_id=current_user_id)\r\n        \r\n        # Create order\r\n        order = Order(\r\n            order_number=Order()",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 44
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "cart_items",
        "return",
        "jsonify",
        "error",
        "cart",
        "empty",
        "400",
        "start",
        "transaction",
        "session",
        "begin",
        "calculate",
        "totals",
        "cart_totals",
        "cartservice",
        "get_cart_total",
        "user_id",
        "current_user_id",
        "create",
        "order",
        "order",
        "order",
        "order_number",
        "order"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-44",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 45",
      "content": "generate_order_number(),\r\n            customer_id=current_user_id,\r\n            subtotal=cart_totals['subtotal'],\r\n            tax_amount=cart_totals['tax_amount'],\r\n            shipping_amount=data get('shipping_amount', 0),\r\n            total_amount=cart_totals['total'] + data get('shipping_amount', 0),\r\n            shipping_address=data['shipping_address'],\r\n            billing_address=data['billing_address'],\r\n            payment_method=data['payment_method']\r\n        )\r\n        db session",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 45
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "customer_id",
        "current_user_id",
        "subtotal",
        "cart_totals",
        "subtotal",
        "tax_amount",
        "cart_totals",
        "tax_amount",
        "shipping_amount",
        "data",
        "shipping_amount",
        "total_amount",
        "cart_totals",
        "total",
        "data",
        "shipping_amount",
        "shipping_address",
        "data",
        "shipping_address",
        "billing_address",
        "data",
        "billing_address",
        "payment_method",
        "data",
        "payment_method",
        "session"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-45",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 46",
      "content": "add(order)\r\n        db session flush()  # Get order ID\r\n        \r\n        # Create order items and check inventory\r\n        for cart_item in cart_items:\r\n            # Verify product is still available\r\n            product = Product query get(cart_item product_id)\r\n            if not product or not product is_active:\r\n                db session rollback()\r\n                return jsonify({'error': f'Product {product",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 46
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "add",
        "order",
        "session",
        "flush",
        "order",
        "create",
        "order",
        "items",
        "check",
        "inventory",
        "cart_item",
        "cart_items",
        "verify",
        "product",
        "still",
        "available",
        "product",
        "product",
        "query",
        "cart_item",
        "product_id",
        "product",
        "product",
        "is_active",
        "session",
        "rollback",
        "return",
        "jsonify",
        "error",
        "product",
        "product"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-46",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 47",
      "content": "name if product else \"Unknown\"} is no longer available'}), 400\r\n            \r\n            # Check stock availability\r\n            available_stock = product stock_quantity\r\n            if cart_item variant_id:\r\n                variant = ProductVariant query get(cart_item variant_id)\r\n                if not variant:\r\n                    db session rollback()\r\n                    return jsonify({'error': f'Product variant is no longer available'}), 400\r\n                available_stock = variant",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 47
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "name",
        "product",
        "else",
        "unknown",
        "longer",
        "available",
        "400",
        "check",
        "stock",
        "availability",
        "available_stock",
        "product",
        "stock_quantity",
        "cart_item",
        "variant_id",
        "variant",
        "productvariant",
        "query",
        "cart_item",
        "variant_id",
        "variant",
        "session",
        "rollback",
        "return",
        "jsonify",
        "error",
        "product",
        "variant",
        "longer",
        "available",
        "400",
        "available_stock",
        "variant"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-47",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 48",
      "content": "stock_quantity\r\n            \r\n            if cart_item quantity > available_stock:\r\n                db session rollback()\r\n                return jsonify({'error': f'Only {available_stock} of {product name} available'}), 400\r\n            \r\n            # Create order item\r\n            order_item = OrderItem(\r\n                order_id=order id,\r\n                product_id=cart_item product_id,\r\n                variant_id=cart_item variant_id,\r\n                quantity=cart_item",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 48
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "stock_quantity",
        "cart_item",
        "quantity",
        "available_stock",
        "session",
        "rollback",
        "return",
        "jsonify",
        "error",
        "only",
        "available_stock",
        "product",
        "name",
        "available",
        "400",
        "create",
        "order",
        "item",
        "order_item",
        "orderitem",
        "order_id",
        "order",
        "product_id",
        "cart_item",
        "product_id",
        "variant_id",
        "cart_item",
        "variant_id",
        "quantity",
        "cart_item"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-48",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 49",
      "content": "quantity,\r\n                price=cart_item price_at_time,\r\n                total=cart_item price_at_time * cart_item quantity\r\n            )\r\n            db session add(order_item)\r\n        \r\n        # Clear cart\r\n        CartItem query filter_by(user_id=current_user_id) delete()\r\n        \r\n        db session commit()\r\n        \r\n        # Create payment intent\r\n        payment_service = PaymentService()\r\n        payment_intent = payment_service create_payment_intent(\r\n            order id, order",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 49
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "quantity",
        "price",
        "cart_item",
        "price_at_time",
        "total",
        "cart_item",
        "price_at_time",
        "cart_item",
        "quantity",
        "session",
        "add",
        "order_item",
        "clear",
        "cart",
        "cartitem",
        "query",
        "filter_by",
        "user_id",
        "current_user_id",
        "delete",
        "session",
        "commit",
        "create",
        "payment",
        "intent",
        "payment_service",
        "paymentservice",
        "payment_intent",
        "payment_service",
        "order",
        "order"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-49",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 50",
      "content": "total_amount\r\n        )\r\n        \r\n        return jsonify({\r\n            'order': order to_dict(),\r\n            'payment_intent': payment_intent\r\n        }), 201\r\n        \r\n    except Exception as e:\r\n        db session rollback()\r\n        current_app logger",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 50
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "total_amount",
        "return",
        "jsonify",
        "order",
        "order",
        "to_dict",
        "payment_intent",
        "payment_intent",
        "201",
        "except",
        "exception",
        "session",
        "rollback",
        "current_app",
        "logger"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-50",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 51",
      "content": "error(f'Order creation error: {str(e)}')\r\n        return jsonify({'error': 'Failed to create order'}), 500\r\n```\r\n\r\n## Impact & Results\r\n\r\n### üìä Performance Metrics\r\n- **Response times**: <150ms for product listings, <300ms for search\r\n- **Throughput**: 2000+ concurrent users during peak traffic\r\n- **Database efficiency**: Optimized queries with proper indexing\r\n- **Cart conversion**: 85% cart-to-order conversion rate\r\n\r\n### üîí Security & Reliability  \r\n- **JWT authentication**: Secure token-based access control\r\n- **Payment security**: PCI-compliant Stripe integration\r\n- **Data validation**: Comprehensive input sanitization\r\n- **Rate limiting**: API abuse prevention\r\n- **Inventory accuracy**: 99",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 51
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "error",
        "order",
        "creation",
        "error",
        "str",
        "return",
        "jsonify",
        "error",
        "failed",
        "create",
        "order",
        "500",
        "impact",
        "results",
        "performance",
        "metrics",
        "response",
        "times",
        "150ms",
        "product",
        "listings",
        "300ms",
        "search",
        "throughput",
        "2000",
        "concurrent",
        "users",
        "during",
        "peak",
        "traffic",
        "database",
        "efficiency",
        "optimized",
        "queries",
        "with",
        "proper",
        "indexing",
        "cart",
        "conversion",
        "cart",
        "order",
        "conversion",
        "rate",
        "security",
        "reliability",
        "jwt",
        "authentication",
        "secure",
        "token",
        "based",
        "access",
        "control",
        "payment",
        "security",
        "pci",
        "compliant",
        "stripe",
        "integration",
        "data",
        "validation",
        "comprehensive",
        "input",
        "sanitization",
        "rate",
        "limiting",
        "api",
        "abuse",
        "prevention",
        "inventory",
        "accuracy"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-51",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 52",
      "content": "9% stock level accuracy\r\n\r\n### üí∞ Business Impact\r\n- **Multi-vendor support**: 50+ vendors onboarded\r\n- **Transaction processing**: $100k+ processed securely\r\n- **Order fulfillment**: 98% successful order completion\r\n- **Search relevance**: 40% improvement in search conversion\r\n\r\n### üöÄ Scalability Features\r\n- **Redis caching**: Product and session caching\r\n- **Background tasks**: Celery for email and notifications\r\n- **Database optimization**: Query optimization and indexing\r\n- **API versioning**: Backward compatibility support\r\n\r\n## Technical Highlights\r\n\r\n### Inventory Management System\r\n```python\r\n# Real-time inventory updates with concurrency control\r\nclass InventoryService:\r\n    @staticmethod\r\n    def reserve_inventory(order_items):\r\n        \"\"\"Reserve inventory for order with row-level locking\"\"\"\r\n        try:\r\n            for item in order_items:\r\n                if item",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 52
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "stock",
        "level",
        "accuracy",
        "business",
        "impact",
        "multi",
        "vendor",
        "support",
        "vendors",
        "onboarded",
        "transaction",
        "processing",
        "100k",
        "processed",
        "securely",
        "order",
        "fulfillment",
        "successful",
        "order",
        "completion",
        "search",
        "relevance",
        "improvement",
        "search",
        "conversion",
        "scalability",
        "features",
        "redis",
        "caching",
        "product",
        "session",
        "caching",
        "background",
        "tasks",
        "celery",
        "email",
        "notifications",
        "database",
        "optimization",
        "query",
        "optimization",
        "indexing",
        "api",
        "versioning",
        "backward",
        "compatibility",
        "support",
        "technical",
        "highlights",
        "inventory",
        "management",
        "system",
        "python",
        "real",
        "time",
        "inventory",
        "updates",
        "with",
        "concurrency",
        "control",
        "class",
        "inventoryservice",
        "staticmethod",
        "def",
        "reserve_inventory",
        "order_items",
        "reserve",
        "inventory",
        "order",
        "with",
        "row",
        "level",
        "locking",
        "try",
        "item",
        "order_items",
        "item"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-52",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 53",
      "content": "variant_id:\r\n                    # Lock variant row\r\n                    variant = ProductVariant query filter_by(id=item variant_id) with_for_update() first()\r\n                    if variant stock_quantity < item quantity:\r\n                        raise InsufficientStockError(f\"Insufficient stock for variant {variant sku}\")\r\n                    variant stock_quantity -= item quantity\r\n                    variant reserved_quantity += item",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 53
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "variant_id",
        "lock",
        "variant",
        "row",
        "variant",
        "productvariant",
        "query",
        "filter_by",
        "item",
        "variant_id",
        "with_for_update",
        "first",
        "variant",
        "stock_quantity",
        "item",
        "quantity",
        "raise",
        "insufficient",
        "stock",
        "variant",
        "variant",
        "sku",
        "variant",
        "stock_quantity",
        "item",
        "quantity",
        "variant",
        "reserved_quantity",
        "item"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-53",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 54",
      "content": "quantity\r\n                else:\r\n                    # Lock product row\r\n                    product = Product query filter_by(id=item product_id) with_for_update() first()\r\n                    if product stock_quantity < item quantity:\r\n                        raise InsufficientStockError(f\"Insufficient stock for product {product sku}\")\r\n                    product stock_quantity -= item quantity\r\n            \r\n            db session",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 54
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "quantity",
        "else",
        "lock",
        "product",
        "row",
        "product",
        "product",
        "query",
        "filter_by",
        "item",
        "product_id",
        "with_for_update",
        "first",
        "product",
        "stock_quantity",
        "item",
        "quantity",
        "raise",
        "insufficient",
        "stock",
        "product",
        "product",
        "sku",
        "product",
        "stock_quantity",
        "item",
        "quantity",
        "session"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-54",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 55",
      "content": "commit()\r\n            return True\r\n            \r\n        except InsufficientStockError:\r\n            db session rollback()\r\n            raise\r\n        except Exception as e:\r\n            db session rollback()\r\n            current_app logger",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 55
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "commit",
        "return",
        "true",
        "except",
        "session",
        "rollback",
        "raise",
        "except",
        "exception",
        "session",
        "rollback",
        "current_app",
        "logger"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-55",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 56",
      "content": "error(f\"Inventory reservation error: {str(e)}\")\r\n            raise InventoryError(\"Failed to reserve inventory\")\r\n    \r\n    @staticmethod\r\n    def release_reservation(order_id):\r\n        \"\"\"Release reserved inventory if order cancelled\"\"\"\r\n        order = Order query get(order_id)\r\n        for item in order items:\r\n            if item variant_id:\r\n                variant = ProductVariant query get(item variant_id)\r\n                variant stock_quantity += item quantity\r\n                variant",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 56
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "error",
        "inventory",
        "reservation",
        "error",
        "str",
        "raise",
        "inventoryerror",
        "failed",
        "reserve",
        "inventory",
        "staticmethod",
        "def",
        "release_reservation",
        "order_id",
        "release",
        "reserved",
        "inventory",
        "order",
        "cancelled",
        "order",
        "order",
        "query",
        "order_id",
        "item",
        "order",
        "items",
        "item",
        "variant_id",
        "variant",
        "productvariant",
        "query",
        "item",
        "variant_id",
        "variant",
        "stock_quantity",
        "item",
        "quantity",
        "variant"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-56",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 57",
      "content": "reserved_quantity -= item quantity\r\n            else:\r\n                product = Product query get(item product_id)\r\n                product stock_quantity += item quantity\r\n        \r\n        db session commit()\r\n```\r\n\r\n### Advanced Caching Strategy\r\n```python\r\n# Redis caching for performance\r\nfrom flask_caching import Cache\r\nimport redis\r\n\r\ncache = Cache()\r\n\r\nclass ProductService:\r\n    @staticmethod\r\n    @cache",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 57
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "reserved_quantity",
        "item",
        "quantity",
        "else",
        "product",
        "product",
        "query",
        "item",
        "product_id",
        "product",
        "stock_quantity",
        "item",
        "quantity",
        "session",
        "commit",
        "advanced",
        "caching",
        "strategy",
        "python",
        "redis",
        "caching",
        "performance",
        "from",
        "flask_caching",
        "import",
        "cache",
        "import",
        "redis",
        "cache",
        "cache",
        "class",
        "productservice",
        "staticmethod",
        "cache"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-57",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 58",
      "content": "memoize(timeout=300)  # 5 minutes\r\n    def get_featured_products():\r\n        \"\"\"Get featured products with caching\"\"\"\r\n        return Product query filter_by(is_featured=True, is_active=True) limit(12) all()\r\n    \r\n    @staticmethod\r\n    @cache memoize(timeout=600)  # 10 minutes\r\n    def get_product_with_reviews(product_id):\r\n        \"\"\"Get product with reviews - cached\"\"\"\r\n        return Product query options(\r\n            joinedload(Product reviews) joinedload(Review",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 58
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "memoize",
        "timeout",
        "300",
        "minutes",
        "def",
        "featured",
        "products",
        "with",
        "caching",
        "return",
        "product",
        "query",
        "filter_by",
        "is_featured",
        "true",
        "is_active",
        "true",
        "limit",
        "staticmethod",
        "cache",
        "memoize",
        "timeout",
        "600",
        "minutes",
        "def",
        "product_id",
        "product",
        "with",
        "reviews",
        "cached",
        "return",
        "product",
        "query",
        "options",
        "joinedload",
        "product",
        "reviews",
        "joinedload",
        "review"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-58",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 59",
      "content": "user),\r\n            joinedload(Product images),\r\n            joinedload(Product variants)\r\n        ) get(product_id)\r\n    \r\n    @staticmethod\r\n    def invalidate_product_cache(product_id):\r\n        \"\"\"Invalidate product-related cache\"\"\"\r\n        cache delete_memoized(ProductService get_product_with_reviews, product_id)\r\n        cache delete_memoized(ProductService",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 59
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "user",
        "joinedload",
        "product",
        "images",
        "joinedload",
        "product",
        "variants",
        "product_id",
        "staticmethod",
        "def",
        "product_id",
        "invalidate",
        "product",
        "related",
        "cache",
        "cache",
        "delete_memoized",
        "productservice",
        "product_id",
        "cache",
        "delete_memoized",
        "productservice"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-59",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 60",
      "content": "get_featured_products)\r\n```\r\n\r\n### Background Task Processing\r\n```python\r\n# Celery tasks for async processing\r\nfrom celery import Celery\r\n\r\ncelery = Celery(__name__)\r\n\r\n@celery task\r\ndef send_order_confirmation(order_id):\r\n    \"\"\"Send order confirmation email\"\"\"\r\n    with app app_context():\r\n        order = Order query get(order_id)\r\n        if order:\r\n            email_service = EmailService()\r\n            email_service send_order_confirmation(order)\r\n\r\n@celery",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 60
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "background",
        "task",
        "processing",
        "python",
        "celery",
        "tasks",
        "async",
        "processing",
        "from",
        "celery",
        "import",
        "celery",
        "celery",
        "celery",
        "__name__",
        "celery",
        "task",
        "def",
        "order_id",
        "send",
        "order",
        "confirmation",
        "email",
        "with",
        "app",
        "app_context",
        "order",
        "order",
        "query",
        "order_id",
        "order",
        "email_service",
        "emailservice",
        "email_service",
        "order",
        "celery"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-60",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 61",
      "content": "task\r\ndef update_search_index(product_id):\r\n    \"\"\"Update search index for product\"\"\"\r\n    with app app_context():\r\n        product = Product query get(product_id)\r\n        if product:\r\n            # Update search vector\r\n            search_content = f\"{product name} {product description} {product category name}\"\r\n            product search_vector = func to_tsvector('english', search_content)\r\n            db session commit()\r\n\r\n@celery",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 61
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "task",
        "def",
        "update_search_index",
        "product_id",
        "update",
        "search",
        "index",
        "product",
        "with",
        "app",
        "app_context",
        "product",
        "product",
        "query",
        "product_id",
        "product",
        "update",
        "search",
        "vector",
        "search_content",
        "product",
        "name",
        "product",
        "description",
        "product",
        "category",
        "name",
        "product",
        "search_vector",
        "func",
        "to_tsvector",
        "english",
        "search_content",
        "session",
        "commit",
        "celery"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-61",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 62",
      "content": "task\r\ndef generate_sales_report(vendor_id, start_date, end_date):\r\n    \"\"\"Generate sales report for vendor\"\"\"\r\n    with app app_context():\r\n        orders = Order query join(OrderItem) join(Product) filter(\r\n            Product vendor_id == vendor_id,\r\n            Order created_at between(start_date, end_date),\r\n            Order status == 'delivered'\r\n        ) all()\r\n        \r\n        report_data = {\r\n            'total_orders': len(orders),\r\n            'total_revenue': sum(order",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 62
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "task",
        "def",
        "vendor_id",
        "start_date",
        "end_date",
        "generate",
        "sales",
        "report",
        "vendor",
        "with",
        "app",
        "app_context",
        "orders",
        "order",
        "query",
        "join",
        "orderitem",
        "join",
        "product",
        "filter",
        "product",
        "vendor_id",
        "vendor_id",
        "order",
        "created_at",
        "between",
        "start_date",
        "end_date",
        "order",
        "status",
        "delivered",
        "report_data",
        "total_orders",
        "len",
        "orders",
        "total_revenue",
        "sum",
        "order"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-62",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 63",
      "content": "total_amount for order in orders),\r\n            'top_products': get_top_products(orders)\r\n        }\r\n        \r\n        # Save report or send email\r\n        save_sales_report(vendor_id, report_data)\r\n```\r\n\r\n## Testing Strategy\r\n\r\n### Comprehensive Test Suite\r\n```python\r\n# Integration tests for complex workflows\r\ndef test_complete_purchase_workflow(client, auth_headers, sample_products):\r\n    \"\"\"Test complete purchase from cart to payment\"\"\"\r\n    \r\n    # Add items to cart\r\n    response = client",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 63
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "total_amount",
        "order",
        "orders",
        "top_products",
        "get_top_products",
        "orders",
        "save",
        "report",
        "send",
        "email",
        "save_sales_report",
        "vendor_id",
        "report_data",
        "testing",
        "strategy",
        "comprehensive",
        "test",
        "suite",
        "python",
        "integration",
        "tests",
        "complex",
        "workflows",
        "def",
        "client",
        "auth_headers",
        "sample_products",
        "test",
        "complete",
        "purchase",
        "from",
        "cart",
        "payment",
        "add",
        "items",
        "cart",
        "response",
        "client"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-63",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 64",
      "content": "post('/api/cart/add', \r\n        json={'product_id': sample_products[0] id, 'quantity': 2},\r\n        headers=auth_headers\r\n    )\r\n    assert response status_code == 200\r\n    \r\n    # Verify cart contents\r\n    response = client get('/api/cart', headers=auth_headers)\r\n    cart_data = response",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 64
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "post",
        "api",
        "cart",
        "add",
        "json",
        "product_id",
        "sample_products",
        "quantity",
        "headers",
        "auth_headers",
        "assert",
        "response",
        "status_code",
        "200",
        "verify",
        "cart",
        "contents",
        "response",
        "client",
        "api",
        "cart",
        "headers",
        "auth_headers",
        "cart_data",
        "response"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-64",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 65",
      "content": "get_json()\r\n    assert cart_data['item_count'] == 1\r\n    assert cart_data['items'][0]['quantity'] == 2\r\n    \r\n    # Create order\r\n    order_data = {\r\n        'shipping_address': {\r\n            'name': 'John Doe',\r\n            'address': '123 Main St',\r\n            'city': 'Anytown',\r\n            'state': 'CA',\r\n            'zip_code': '12345',\r\n            'country': 'US'\r\n        },\r\n        'billing_address': {\r\n            'name': 'John Doe',\r\n            'address': '123 Main St',\r\n            'city': 'Anytown',\r\n            'state': 'CA',\r\n            'zip_code': '12345',\r\n            'country': 'US'\r\n        },\r\n        'payment_method': 'card'\r\n    }\r\n    \r\n    response = client",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 65
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "get_json",
        "assert",
        "cart_data",
        "item_count",
        "assert",
        "cart_data",
        "items",
        "quantity",
        "create",
        "order",
        "order_data",
        "shipping_address",
        "name",
        "john",
        "doe",
        "address",
        "123",
        "main",
        "city",
        "anytown",
        "state",
        "zip_code",
        "12345",
        "country",
        "billing_address",
        "name",
        "john",
        "doe",
        "address",
        "123",
        "main",
        "city",
        "anytown",
        "state",
        "zip_code",
        "12345",
        "country",
        "payment_method",
        "card",
        "response",
        "client"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-65",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 66",
      "content": "post('/api/orders', json=order_data, headers=auth_headers)\r\n    assert response status_code == 201\r\n    \r\n    order_response = response get_json()\r\n    assert 'order' in order_response\r\n    assert 'payment_intent' in order_response\r\n    \r\n    # Verify stock was reduced\r\n    product = Product query get(sample_products[0] id)\r\n    assert product stock_quantity == sample_products[0] stock_quantity - 2\r\n    \r\n    # Verify cart is empty\r\n    response = client",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 66
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "post",
        "api",
        "orders",
        "json",
        "order_data",
        "headers",
        "auth_headers",
        "assert",
        "response",
        "status_code",
        "201",
        "order_response",
        "response",
        "get_json",
        "assert",
        "order",
        "order_response",
        "assert",
        "payment_intent",
        "order_response",
        "verify",
        "stock",
        "reduced",
        "product",
        "product",
        "query",
        "sample_products",
        "assert",
        "product",
        "stock_quantity",
        "sample_products",
        "stock_quantity",
        "verify",
        "cart",
        "empty",
        "response",
        "client"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-66",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 67",
      "content": "get('/api/cart', headers=auth_headers)\r\n    cart_data = response get_json()\r\n    assert cart_data['item_count'] == 0\r\n\r\ndef test_inventory_concurrency(client, auth_headers, sample_products):\r\n    \"\"\"Test inventory management under concurrent access\"\"\"\r\n    import threading\r\n    import time\r\n    \r\n    product = sample_products[0]\r\n    initial_stock = product stock_quantity\r\n    results = []\r\n    \r\n    def add_to_cart_worker():\r\n        try:\r\n            response = client",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 67
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "api",
        "cart",
        "headers",
        "auth_headers",
        "cart_data",
        "response",
        "get_json",
        "assert",
        "cart_data",
        "item_count",
        "def",
        "client",
        "auth_headers",
        "sample_products",
        "test",
        "inventory",
        "management",
        "under",
        "concurrent",
        "access",
        "import",
        "threading",
        "import",
        "time",
        "product",
        "sample_products",
        "initial_stock",
        "product",
        "stock_quantity",
        "results",
        "def",
        "add_to_cart_worker",
        "try",
        "response",
        "client"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-67",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 68",
      "content": "post('/api/cart/add',\r\n                json={'product_id': product id, 'quantity': initial_stock},\r\n                headers=auth_headers\r\n            )\r\n            results append(response status_code)\r\n        except Exception as e:\r\n            results append(str(e))\r\n    \r\n    # Create multiple threads trying to add same quantity\r\n    threads = [threading Thread(target=add_to_cart_worker) for _ in range(3)]\r\n    \r\n    for thread in threads:\r\n        thread",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 68
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "post",
        "api",
        "cart",
        "add",
        "json",
        "product_id",
        "product",
        "quantity",
        "initial_stock",
        "headers",
        "auth_headers",
        "results",
        "append",
        "response",
        "status_code",
        "except",
        "exception",
        "results",
        "append",
        "str",
        "create",
        "multiple",
        "threads",
        "trying",
        "add",
        "same",
        "quantity",
        "threads",
        "threading",
        "thread",
        "target",
        "add_to_cart_worker",
        "range",
        "thread",
        "threads",
        "thread"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-68",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 69",
      "content": "start()\r\n    \r\n    for thread in threads:\r\n        thread join()\r\n    \r\n    # Only one should succeed\r\n    success_count = results count(200)\r\n    assert success_count == 1\r\n```\r\n\r\n## Lessons Learned\r\n\r\n### üéØ E-commerce Complexity\r\n- **Inventory management**: Real-time stock tracking is crucial for user experience\r\n- **Payment processing**: Webhook handling requires robust error handling and retry logic\r\n- **Cart persistence**: Session management for guest users vs",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 69
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "start",
        "thread",
        "threads",
        "thread",
        "join",
        "only",
        "should",
        "succeed",
        "success_count",
        "results",
        "count",
        "200",
        "assert",
        "success_count",
        "lessons",
        "learned",
        "commerce",
        "complexity",
        "inventory",
        "management",
        "real",
        "time",
        "stock",
        "tracking",
        "crucial",
        "user",
        "experience",
        "payment",
        "processing",
        "webhook",
        "handling",
        "requires",
        "robust",
        "error",
        "handling",
        "retry",
        "logic",
        "cart",
        "persistence",
        "session",
        "management",
        "guest",
        "users"
      ]
    },
    {
      "id": "project-flask-ecommerce-api-content-69",
      "type": "section",
      "title": "Flask E-commerce API - Multi-vendor Platform - Section 70",
      "content": "authenticated users\r\n\r\n### üîí Security Best Practices\r\n- **Payment data**: Never store sensitive payment information\r\n- **User authentication**: Multi-layer validation for sensitive operations\r\n- **API rate limiting**: Prevent abuse during sales events\r\n\r\n### üìä Performance Optimization\r\n- **Database indexing**: Critical for product search and filtering performance\r\n- **Caching strategy**: Product catalogs benefit heavily from smart caching\r\n- **Background processing**: Order confirmation and inventory updates should be async\r\n\r\n### üõí User Experience\r\n- **Cart abandonment**: Persistent carts increase conversion rates\r\n- **Search relevance**: Full-text search dramatically improves product discovery\r\n- **Mobile optimization**: 70% of e-commerce traffic comes from mobile devices\r\n\r\n## Future Enhancements\r\n\r\n### üöÄ Advanced Features\r\n- **Recommendation engine**: ML-based product recommendations\r\n- **Multi-currency support**: International market expansion\r\n- **Subscription products**: Recurring billing for subscription items\r\n- **Advanced inventory**: Multi-warehouse support with location-based routing\r\n\r\n### üõ° Security & Compliance\r\n- **GDPR compliance**: User data privacy and right to deletion\r\n- **PCI DSS certification**: Enhanced payment security standards\r\n- **Fraud detection**: ML-based transaction risk assessment\r\n- **Two-factor authentication**: Enhanced account security\r\n\r\n### üìà Analytics & Insights\r\n- **Real-time analytics**: Live sales and inventory dashboards\r\n- **Customer behavior tracking**: Purchase patterns and preferences\r\n- **A/B testing framework**: Optimize conversion rates\r\n- **Business intelligence**: Advanced reporting and insights\r\n\r\n---\r\n\r\n**This e-commerce API demonstrates enterprise-level backend development with complex business logic, secure payment processing, scalable architecture, and comprehensive testing for production-ready deployment",
      "metadata": {
        "title": "Flask E-commerce API - Multi-vendor Platform",
        "slug": "flask-ecommerce-api",
        "description": "Comprehensive e-commerce backend with Flask, PostgreSQL, JWT authentication, and payment integration",
        "longDescription": "Full-featured e-commerce API supporting multi-vendor marketplace, product catalog, shopping cart, order processing, and secure payments",
        "tags": [
          "Python",
          "Flask",
          "PostgreSQL",
          "JWT",
          "Stripe",
          "E-commerce"
        ],
        "category": "Backend API",
        "timeline": "Oct 2025 ‚Äì Nov 2025",
        "status": "Completed",
        "featured": true,
        "priority": 3,
        "repository": "https://github.com/suryadizhang/flask-ecommerce-api",
        "liveUrl": "https://ecommerce-api-flask.herokuapp.com/docs",
        "image": "/projects/ecommerce-api-hero.jpg",
        "gallery": [
          "/projects/ecommerce-api-swagger.jpg",
          "/projects/ecommerce-api-database.jpg",
          "/projects/ecommerce-api-postman.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "PostgreSQL",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "Stripe",
            "category": "Payments"
          },
          {
            "name": "Redis",
            "category": "Caching"
          },
          {
            "name": "Celery",
            "category": "Task Queue"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 70
      },
      "source": "flask-ecommerce-api.mdx",
      "slug": "flask-ecommerce-api",
      "tokens": [
        "authenticated",
        "users",
        "security",
        "best",
        "practices",
        "payment",
        "data",
        "never",
        "store",
        "sensitive",
        "payment",
        "information",
        "user",
        "authentication",
        "multi",
        "layer",
        "validation",
        "sensitive",
        "operations",
        "api",
        "rate",
        "limiting",
        "prevent",
        "abuse",
        "during",
        "sales",
        "events",
        "performance",
        "optimization",
        "database",
        "indexing",
        "critical",
        "product",
        "search",
        "filtering",
        "performance",
        "caching",
        "strategy",
        "product",
        "catalogs",
        "benefit",
        "heavily",
        "from",
        "smart",
        "caching",
        "background",
        "processing",
        "order",
        "confirmation",
        "inventory",
        "updates",
        "should",
        "async",
        "user",
        "experience",
        "cart",
        "abandonment",
        "persistent",
        "carts",
        "increase",
        "conversion",
        "rates",
        "search",
        "relevance",
        "full",
        "text",
        "search",
        "dramatically",
        "improves",
        "product",
        "discovery",
        "mobile",
        "optimization",
        "commerce",
        "traffic",
        "comes",
        "from",
        "mobile",
        "devices",
        "future",
        "enhancements",
        "advanced",
        "features",
        "recommendation",
        "engine",
        "based",
        "product",
        "recommendations",
        "multi",
        "currency",
        "support",
        "international",
        "market",
        "expansion",
        "subscription",
        "products",
        "recurring",
        "billing",
        "subscription",
        "items",
        "advanced",
        "inventory",
        "multi",
        "warehouse",
        "support",
        "with",
        "location",
        "based",
        "routing",
        "security",
        "compliance",
        "gdpr",
        "compliance",
        "user",
        "data",
        "privacy",
        "right",
        "deletion",
        "pci",
        "dss",
        "certification",
        "enhanced",
        "payment",
        "security",
        "standards",
        "fraud",
        "detection",
        "based",
        "transaction",
        "risk",
        "assessment",
        "factor",
        "authentication",
        "enhanced",
        "account",
        "security",
        "analytics",
        "insights",
        "real",
        "time",
        "analytics",
        "live",
        "sales",
        "inventory",
        "dashboards",
        "customer",
        "behavior",
        "tracking",
        "purchase",
        "patterns",
        "preferences",
        "testing",
        "framework",
        "optimize",
        "conversion",
        "rates",
        "business",
        "intelligence",
        "advanced",
        "reporting",
        "insights",
        "this",
        "commerce",
        "api",
        "demonstrates",
        "enterprise",
        "level",
        "backend",
        "development",
        "with",
        "complex",
        "business",
        "logic",
        "secure",
        "payment",
        "processing",
        "scalable",
        "architecture",
        "comprehensive",
        "testing",
        "production",
        "ready",
        "deployment"
      ]
    },
    {
      "id": "project-mechanic-shop-api-overview",
      "type": "project",
      "title": "Mechanic Shop API - Service Management System",
      "content": "Mechanic Shop API - Service Management System: RESTful API for auto repair shop management with Python Flask, JWT authentication, and MySQL database. Comprehensive backend API for managing automotive repair services, customer records, and service appointments with secure authentication and CRUD operations",
      "metadata": {
        "title": "Mechanic Shop API - Service Management System",
        "slug": "mechanic-shop-api",
        "description": "RESTful API for auto repair shop management with Python Flask, JWT authentication, and MySQL database",
        "longDescription": "Comprehensive backend API for managing automotive repair services, customer records, and service appointments with secure authentication and CRUD operations",
        "tags": [
          "Python",
          "Flask",
          "MySQL",
          "JWT",
          "REST API",
          "OpenAPI"
        ],
        "category": "Backend API",
        "timeline": "Aug 2025 ‚Äì Sep 2025",
        "status": "Completed",
        "featured": true,
        "priority": 2,
        "repository": "https://github.com/suryadizhang/mechanic-shop-api",
        "liveUrl": "https://mechanic-api.herokuapp.com/docs",
        "image": "/projects/mechanic-api-hero.jpg",
        "gallery": [
          "/projects/mechanic-api-swagger.jpg",
          "/projects/mechanic-api-postman.jpg",
          "/projects/mechanic-api-database.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "MySQL",
            "category": "Database"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "OpenAPI",
            "category": "Documentation"
          },
          {
            "name": "Postman",
            "category": "Testing"
          },
          {
            "name": "Heroku",
            "category": "Deployment"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ]
      },
      "source": "mechanic-shop-api.mdx",
      "slug": "mechanic-shop-api",
      "tokens": [
        "mechanic",
        "shop",
        "api",
        "service",
        "management",
        "system",
        "restful",
        "api",
        "auto",
        "repair",
        "shop",
        "management",
        "with",
        "python",
        "flask",
        "jwt",
        "authentication",
        "mysql",
        "database",
        "comprehensive",
        "backend",
        "api",
        "managing",
        "automotive",
        "repair",
        "services",
        "customer",
        "records",
        "service",
        "appointments",
        "with",
        "secure",
        "authentication",
        "crud",
        "operations"
      ]
    },
    {
      "id": "project-mechanic-shop-api-tech",
      "type": "project",
      "title": "Mechanic Shop API - Service Management System - Technology Stack",
      "content": "Mechanic Shop API - Service Management System is built with: Python, Flask, MySQL, JWT, REST API, OpenAPI",
      "metadata": {
        "tags": [
          "Python",
          "Flask",
          "MySQL",
          "JWT",
          "REST API",
          "OpenAPI"
        ],
        "title": "Mechanic Shop API - Service Management System"
      },
      "source": "mechanic-shop-api.mdx",
      "slug": "mechanic-shop-api",
      "tokens": [
        "mechanic",
        "shop",
        "api",
        "service",
        "management",
        "system",
        "built",
        "with",
        "python",
        "flask",
        "mysql",
        "jwt",
        "rest",
        "api",
        "openapi"
      ]
    },
    {
      "id": "project-mechanic-shop-api-content-0",
      "type": "section",
      "title": "Mechanic Shop API - Service Management System - Section 1",
      "content": "# Mechanic Shop API - Service Management System\r\n\r\n**Professional RESTful API for auto repair shop management with comprehensive CRUD operations and secure authentication**\r\n\r\n## The Challenge\r\n\r\nAuto repair shops needed a robust backend system to manage customers, vehicles, services, and appointments The API had to handle complex relationships between entities while maintaining data integrity, providing secure access control, and offering comprehensive documentation for frontend integration",
      "metadata": {
        "title": "Mechanic Shop API - Service Management System",
        "slug": "mechanic-shop-api",
        "description": "RESTful API for auto repair shop management with Python Flask, JWT authentication, and MySQL database",
        "longDescription": "Comprehensive backend API for managing automotive repair services, customer records, and service appointments with secure authentication and CRUD operations",
        "tags": [
          "Python",
          "Flask",
          "MySQL",
          "JWT",
          "REST API",
          "OpenAPI"
        ],
        "category": "Backend API",
        "timeline": "Aug 2025 ‚Äì Sep 2025",
        "status": "Completed",
        "featured": true,
        "priority": 2,
        "repository": "https://github.com/suryadizhang/mechanic-shop-api",
        "liveUrl": "https://mechanic-api.herokuapp.com/docs",
        "image": "/projects/mechanic-api-hero.jpg",
        "gallery": [
          "/projects/mechanic-api-swagger.jpg",
          "/projects/mechanic-api-postman.jpg",
          "/projects/mechanic-api-database.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "MySQL",
            "category": "Database"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "OpenAPI",
            "category": "Documentation"
          },
          {
            "name": "Postman",
            "category": "Testing"
          },
          {
            "name": "Heroku",
            "category": "Deployment"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 1
      },
      "source": "mechanic-shop-api.mdx",
      "slug": "mechanic-shop-api",
      "tokens": [
        "mechanic",
        "shop",
        "api",
        "service",
        "management",
        "system",
        "professional",
        "restful",
        "api",
        "auto",
        "repair",
        "shop",
        "management",
        "with",
        "comprehensive",
        "crud",
        "operations",
        "secure",
        "authentication",
        "challenge",
        "auto",
        "repair",
        "shops",
        "needed",
        "robust",
        "backend",
        "system",
        "manage",
        "customers",
        "vehicles",
        "services",
        "appointments",
        "api",
        "handle",
        "complex",
        "relationships",
        "between",
        "entities",
        "while",
        "maintaining",
        "data",
        "integrity",
        "providing",
        "secure",
        "access",
        "control",
        "offering",
        "comprehensive",
        "documentation",
        "frontend",
        "integration"
      ]
    },
    {
      "id": "project-mechanic-shop-api-content-1",
      "type": "section",
      "title": "Mechanic Shop API - Service Management System - Section 2",
      "content": "## Technical Architecture\r\n\r\n### Core API Structure (Flask + SQLAlchemy)\r\n```python\r\n# Customer model with relationships\r\nclass Customer(db Model):\r\n    __tablename__ = 'customers'\r\n    \r\n    id = db Column(db Integer, primary_key=True)\r\n    first_name = db Column(db String(50), nullable=False)\r\n    last_name = db Column(db String(50), nullable=False)\r\n    email = db Column(db String(100), unique=True, nullable=False)\r\n    phone = db Column(db String(20), nullable=False)\r\n    address = db",
      "metadata": {
        "title": "Mechanic Shop API - Service Management System",
        "slug": "mechanic-shop-api",
        "description": "RESTful API for auto repair shop management with Python Flask, JWT authentication, and MySQL database",
        "longDescription": "Comprehensive backend API for managing automotive repair services, customer records, and service appointments with secure authentication and CRUD operations",
        "tags": [
          "Python",
          "Flask",
          "MySQL",
          "JWT",
          "REST API",
          "OpenAPI"
        ],
        "category": "Backend API",
        "timeline": "Aug 2025 ‚Äì Sep 2025",
        "status": "Completed",
        "featured": true,
        "priority": 2,
        "repository": "https://github.com/suryadizhang/mechanic-shop-api",
        "liveUrl": "https://mechanic-api.herokuapp.com/docs",
        "image": "/projects/mechanic-api-hero.jpg",
        "gallery": [
          "/projects/mechanic-api-swagger.jpg",
          "/projects/mechanic-api-postman.jpg",
          "/projects/mechanic-api-database.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "MySQL",
            "category": "Database"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "OpenAPI",
            "category": "Documentation"
          },
          {
            "name": "Postman",
            "category": "Testing"
          },
          {
            "name": "Heroku",
            "category": "Deployment"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 2
      },
      "source": "mechanic-shop-api.mdx",
      "slug": "mechanic-shop-api",
      "tokens": [
        "technical",
        "architecture",
        "core",
        "api",
        "structure",
        "flask",
        "sqlalchemy",
        "python",
        "customer",
        "model",
        "with",
        "relationships",
        "class",
        "customer",
        "model",
        "__tablename__",
        "customers",
        "column",
        "integer",
        "primary_key",
        "true",
        "first_name",
        "column",
        "string",
        "nullable",
        "false",
        "last_name",
        "column",
        "string",
        "nullable",
        "false",
        "email",
        "column",
        "string",
        "100",
        "unique",
        "true",
        "nullable",
        "false",
        "phone",
        "column",
        "string",
        "nullable",
        "false",
        "address"
      ]
    },
    {
      "id": "project-mechanic-shop-api-content-2",
      "type": "section",
      "title": "Mechanic Shop API - Service Management System - Section 3",
      "content": "Column(db Text)\r\n    created_at = db Column(db DateTime, default=datetime utcnow)\r\n    \r\n    # Relationships\r\n    vehicles = db relationship('Vehicle', backref='owner', lazy=True, cascade='all, delete-orphan')\r\n    appointments = db relationship('Appointment', backref='customer', lazy=True)\r\n    \r\n    def to_dict(self):\r\n        return {\r\n            'id': self id,\r\n            'first_name': self first_name,\r\n            'last_name': self last_name,\r\n            'email': self",
      "metadata": {
        "title": "Mechanic Shop API - Service Management System",
        "slug": "mechanic-shop-api",
        "description": "RESTful API for auto repair shop management with Python Flask, JWT authentication, and MySQL database",
        "longDescription": "Comprehensive backend API for managing automotive repair services, customer records, and service appointments with secure authentication and CRUD operations",
        "tags": [
          "Python",
          "Flask",
          "MySQL",
          "JWT",
          "REST API",
          "OpenAPI"
        ],
        "category": "Backend API",
        "timeline": "Aug 2025 ‚Äì Sep 2025",
        "status": "Completed",
        "featured": true,
        "priority": 2,
        "repository": "https://github.com/suryadizhang/mechanic-shop-api",
        "liveUrl": "https://mechanic-api.herokuapp.com/docs",
        "image": "/projects/mechanic-api-hero.jpg",
        "gallery": [
          "/projects/mechanic-api-swagger.jpg",
          "/projects/mechanic-api-postman.jpg",
          "/projects/mechanic-api-database.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "MySQL",
            "category": "Database"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "OpenAPI",
            "category": "Documentation"
          },
          {
            "name": "Postman",
            "category": "Testing"
          },
          {
            "name": "Heroku",
            "category": "Deployment"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 3
      },
      "source": "mechanic-shop-api.mdx",
      "slug": "mechanic-shop-api",
      "tokens": [
        "column",
        "text",
        "created_at",
        "column",
        "datetime",
        "default",
        "datetime",
        "utcnow",
        "relationships",
        "vehicles",
        "relationship",
        "vehicle",
        "backref",
        "owner",
        "lazy",
        "true",
        "cascade",
        "delete",
        "orphan",
        "appointments",
        "relationship",
        "appointment",
        "backref",
        "customer",
        "lazy",
        "true",
        "def",
        "to_dict",
        "self",
        "return",
        "self",
        "first_name",
        "self",
        "first_name",
        "last_name",
        "self",
        "last_name",
        "email",
        "self"
      ]
    },
    {
      "id": "project-mechanic-shop-api-content-3",
      "type": "section",
      "title": "Mechanic Shop API - Service Management System - Section 4",
      "content": "email,\r\n            'phone': self phone,\r\n            'address': self address,\r\n            'created_at': self created_at isoformat(),\r\n            'vehicle_count': len(self vehicles)\r\n        }\r\n\r\n# Vehicle model with validation\r\nclass Vehicle(db Model):\r\n    __tablename__ = 'vehicles'\r\n    \r\n    id = db Column(db Integer, primary_key=True)\r\n    customer_id = db Column(db Integer, db ForeignKey('customers id'), nullable=False)\r\n    make = db Column(db String(50), nullable=False)\r\n    model = db",
      "metadata": {
        "title": "Mechanic Shop API - Service Management System",
        "slug": "mechanic-shop-api",
        "description": "RESTful API for auto repair shop management with Python Flask, JWT authentication, and MySQL database",
        "longDescription": "Comprehensive backend API for managing automotive repair services, customer records, and service appointments with secure authentication and CRUD operations",
        "tags": [
          "Python",
          "Flask",
          "MySQL",
          "JWT",
          "REST API",
          "OpenAPI"
        ],
        "category": "Backend API",
        "timeline": "Aug 2025 ‚Äì Sep 2025",
        "status": "Completed",
        "featured": true,
        "priority": 2,
        "repository": "https://github.com/suryadizhang/mechanic-shop-api",
        "liveUrl": "https://mechanic-api.herokuapp.com/docs",
        "image": "/projects/mechanic-api-hero.jpg",
        "gallery": [
          "/projects/mechanic-api-swagger.jpg",
          "/projects/mechanic-api-postman.jpg",
          "/projects/mechanic-api-database.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "MySQL",
            "category": "Database"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "OpenAPI",
            "category": "Documentation"
          },
          {
            "name": "Postman",
            "category": "Testing"
          },
          {
            "name": "Heroku",
            "category": "Deployment"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 4
      },
      "source": "mechanic-shop-api.mdx",
      "slug": "mechanic-shop-api",
      "tokens": [
        "email",
        "phone",
        "self",
        "phone",
        "address",
        "self",
        "address",
        "created_at",
        "self",
        "created_at",
        "isoformat",
        "vehicle_count",
        "len",
        "self",
        "vehicles",
        "vehicle",
        "model",
        "with",
        "validation",
        "class",
        "vehicle",
        "model",
        "__tablename__",
        "vehicles",
        "column",
        "integer",
        "primary_key",
        "true",
        "customer_id",
        "column",
        "integer",
        "foreignkey",
        "customers",
        "nullable",
        "false",
        "make",
        "column",
        "string",
        "nullable",
        "false",
        "model"
      ]
    },
    {
      "id": "project-mechanic-shop-api-content-4",
      "type": "section",
      "title": "Mechanic Shop API - Service Management System - Section 5",
      "content": "Column(db String(50), nullable=False)\r\n    year = db Column(db Integer, nullable=False)\r\n    vin = db Column(db String(17), unique=True, nullable=False)\r\n    license_plate = db Column(db String(20))\r\n    color = db Column(db String(30))\r\n    mileage = db Column(db Integer)\r\n    \r\n    # Relationships\r\n    service_records = db relationship('ServiceRecord', backref='vehicle', lazy=True)\r\n    \r\n    @validates('year')\r\n    def validate_year(self, key, year):\r\n        current_year = datetime now()",
      "metadata": {
        "title": "Mechanic Shop API - Service Management System",
        "slug": "mechanic-shop-api",
        "description": "RESTful API for auto repair shop management with Python Flask, JWT authentication, and MySQL database",
        "longDescription": "Comprehensive backend API for managing automotive repair services, customer records, and service appointments with secure authentication and CRUD operations",
        "tags": [
          "Python",
          "Flask",
          "MySQL",
          "JWT",
          "REST API",
          "OpenAPI"
        ],
        "category": "Backend API",
        "timeline": "Aug 2025 ‚Äì Sep 2025",
        "status": "Completed",
        "featured": true,
        "priority": 2,
        "repository": "https://github.com/suryadizhang/mechanic-shop-api",
        "liveUrl": "https://mechanic-api.herokuapp.com/docs",
        "image": "/projects/mechanic-api-hero.jpg",
        "gallery": [
          "/projects/mechanic-api-swagger.jpg",
          "/projects/mechanic-api-postman.jpg",
          "/projects/mechanic-api-database.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "MySQL",
            "category": "Database"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "OpenAPI",
            "category": "Documentation"
          },
          {
            "name": "Postman",
            "category": "Testing"
          },
          {
            "name": "Heroku",
            "category": "Deployment"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 5
      },
      "source": "mechanic-shop-api.mdx",
      "slug": "mechanic-shop-api",
      "tokens": [
        "column",
        "string",
        "nullable",
        "false",
        "year",
        "column",
        "integer",
        "nullable",
        "false",
        "vin",
        "column",
        "string",
        "unique",
        "true",
        "nullable",
        "false",
        "license_plate",
        "column",
        "string",
        "color",
        "column",
        "string",
        "mileage",
        "column",
        "integer",
        "relationships",
        "service_records",
        "relationship",
        "servicerecord",
        "backref",
        "vehicle",
        "lazy",
        "true",
        "validates",
        "year",
        "def",
        "validate_year",
        "self",
        "key",
        "year",
        "current_year",
        "datetime"
      ]
    },
    {
      "id": "project-mechanic-shop-api-content-5",
      "type": "section",
      "title": "Mechanic Shop API - Service Management System - Section 6",
      "content": "year\r\n        if year < 1900 or year > current_year + 1:\r\n            raise ValueError(f'Year must be between 1900 and {current_year + 1}')\r\n        return year\r\n    \r\n    @validates('vin')\r\n    def validate_vin(self, key, vin):\r\n        if len(vin) = 17:\r\n            raise ValueError('VIN must be exactly 17 characters')\r\n        return vin",
      "metadata": {
        "title": "Mechanic Shop API - Service Management System",
        "slug": "mechanic-shop-api",
        "description": "RESTful API for auto repair shop management with Python Flask, JWT authentication, and MySQL database",
        "longDescription": "Comprehensive backend API for managing automotive repair services, customer records, and service appointments with secure authentication and CRUD operations",
        "tags": [
          "Python",
          "Flask",
          "MySQL",
          "JWT",
          "REST API",
          "OpenAPI"
        ],
        "category": "Backend API",
        "timeline": "Aug 2025 ‚Äì Sep 2025",
        "status": "Completed",
        "featured": true,
        "priority": 2,
        "repository": "https://github.com/suryadizhang/mechanic-shop-api",
        "liveUrl": "https://mechanic-api.herokuapp.com/docs",
        "image": "/projects/mechanic-api-hero.jpg",
        "gallery": [
          "/projects/mechanic-api-swagger.jpg",
          "/projects/mechanic-api-postman.jpg",
          "/projects/mechanic-api-database.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "MySQL",
            "category": "Database"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "OpenAPI",
            "category": "Documentation"
          },
          {
            "name": "Postman",
            "category": "Testing"
          },
          {
            "name": "Heroku",
            "category": "Deployment"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 6
      },
      "source": "mechanic-shop-api.mdx",
      "slug": "mechanic-shop-api",
      "tokens": [
        "year",
        "year",
        "1900",
        "year",
        "current_year",
        "raise",
        "valueerror",
        "year",
        "must",
        "between",
        "1900",
        "current_year",
        "return",
        "year",
        "validates",
        "vin",
        "def",
        "validate_vin",
        "self",
        "key",
        "vin",
        "len",
        "vin",
        "raise",
        "valueerror",
        "vin",
        "must",
        "exactly",
        "characters",
        "return",
        "vin"
      ]
    },
    {
      "id": "project-mechanic-shop-api-content-6",
      "type": "section",
      "title": "Mechanic Shop API - Service Management System - Section 7",
      "content": "upper()\r\n```\r\n\r\n### Authentication & Authorization\r\n```python\r\n# JWT token management\r\nclass AuthService:\r\n    @staticmethod\r\n    def generate_token(user_id, role='user'):\r\n        payload = {\r\n            'user_id': user_id,\r\n            'role': role,\r\n            'exp': datetime utcnow() + timedelta(hours=24),\r\n            'iat': datetime utcnow()\r\n        }\r\n        return jwt encode(payload, current_app",
      "metadata": {
        "title": "Mechanic Shop API - Service Management System",
        "slug": "mechanic-shop-api",
        "description": "RESTful API for auto repair shop management with Python Flask, JWT authentication, and MySQL database",
        "longDescription": "Comprehensive backend API for managing automotive repair services, customer records, and service appointments with secure authentication and CRUD operations",
        "tags": [
          "Python",
          "Flask",
          "MySQL",
          "JWT",
          "REST API",
          "OpenAPI"
        ],
        "category": "Backend API",
        "timeline": "Aug 2025 ‚Äì Sep 2025",
        "status": "Completed",
        "featured": true,
        "priority": 2,
        "repository": "https://github.com/suryadizhang/mechanic-shop-api",
        "liveUrl": "https://mechanic-api.herokuapp.com/docs",
        "image": "/projects/mechanic-api-hero.jpg",
        "gallery": [
          "/projects/mechanic-api-swagger.jpg",
          "/projects/mechanic-api-postman.jpg",
          "/projects/mechanic-api-database.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "MySQL",
            "category": "Database"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "OpenAPI",
            "category": "Documentation"
          },
          {
            "name": "Postman",
            "category": "Testing"
          },
          {
            "name": "Heroku",
            "category": "Deployment"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 7
      },
      "source": "mechanic-shop-api.mdx",
      "slug": "mechanic-shop-api",
      "tokens": [
        "upper",
        "authentication",
        "authorization",
        "python",
        "jwt",
        "token",
        "management",
        "class",
        "authservice",
        "staticmethod",
        "def",
        "generate_token",
        "user_id",
        "role",
        "user",
        "payload",
        "user_id",
        "user_id",
        "role",
        "role",
        "exp",
        "datetime",
        "utcnow",
        "timedelta",
        "hours",
        "iat",
        "datetime",
        "utcnow",
        "return",
        "jwt",
        "encode",
        "payload",
        "current_app"
      ]
    },
    {
      "id": "project-mechanic-shop-api-content-7",
      "type": "section",
      "title": "Mechanic Shop API - Service Management System - Section 8",
      "content": "config['SECRET_KEY'], algorithm='HS256')\r\n    \r\n    @staticmethod\r\n    def verify_token(token):\r\n        try:\r\n            payload = jwt decode(token, current_app config['SECRET_KEY'], algorithms=['HS256'])\r\n            return payload\r\n        except jwt ExpiredSignatureError:\r\n            raise AuthenticationError('Token has expired')\r\n        except jwt",
      "metadata": {
        "title": "Mechanic Shop API - Service Management System",
        "slug": "mechanic-shop-api",
        "description": "RESTful API for auto repair shop management with Python Flask, JWT authentication, and MySQL database",
        "longDescription": "Comprehensive backend API for managing automotive repair services, customer records, and service appointments with secure authentication and CRUD operations",
        "tags": [
          "Python",
          "Flask",
          "MySQL",
          "JWT",
          "REST API",
          "OpenAPI"
        ],
        "category": "Backend API",
        "timeline": "Aug 2025 ‚Äì Sep 2025",
        "status": "Completed",
        "featured": true,
        "priority": 2,
        "repository": "https://github.com/suryadizhang/mechanic-shop-api",
        "liveUrl": "https://mechanic-api.herokuapp.com/docs",
        "image": "/projects/mechanic-api-hero.jpg",
        "gallery": [
          "/projects/mechanic-api-swagger.jpg",
          "/projects/mechanic-api-postman.jpg",
          "/projects/mechanic-api-database.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "MySQL",
            "category": "Database"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "OpenAPI",
            "category": "Documentation"
          },
          {
            "name": "Postman",
            "category": "Testing"
          },
          {
            "name": "Heroku",
            "category": "Deployment"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 8
      },
      "source": "mechanic-shop-api.mdx",
      "slug": "mechanic-shop-api",
      "tokens": [
        "config",
        "secret_key",
        "algorithm",
        "hs256",
        "staticmethod",
        "def",
        "verify_token",
        "token",
        "try",
        "payload",
        "jwt",
        "decode",
        "token",
        "current_app",
        "config",
        "secret_key",
        "algorithms",
        "hs256",
        "return",
        "payload",
        "except",
        "jwt",
        "raise",
        "authenticationerror",
        "token",
        "expired",
        "except",
        "jwt"
      ]
    },
    {
      "id": "project-mechanic-shop-api-content-8",
      "type": "section",
      "title": "Mechanic Shop API - Service Management System - Section 9",
      "content": "InvalidTokenError:\r\n            raise AuthenticationError('Invalid token')\r\n\r\n# Authentication decorator\r\ndef token_required(f):\r\n    @wraps(f)\r\n    def decorated(*args, **kwargs):\r\n        token = None\r\n        \r\n        # Get token from header\r\n        if 'Authorization' in request headers:\r\n            auth_header = request headers['Authorization']\r\n            try:\r\n                token = auth_header",
      "metadata": {
        "title": "Mechanic Shop API - Service Management System",
        "slug": "mechanic-shop-api",
        "description": "RESTful API for auto repair shop management with Python Flask, JWT authentication, and MySQL database",
        "longDescription": "Comprehensive backend API for managing automotive repair services, customer records, and service appointments with secure authentication and CRUD operations",
        "tags": [
          "Python",
          "Flask",
          "MySQL",
          "JWT",
          "REST API",
          "OpenAPI"
        ],
        "category": "Backend API",
        "timeline": "Aug 2025 ‚Äì Sep 2025",
        "status": "Completed",
        "featured": true,
        "priority": 2,
        "repository": "https://github.com/suryadizhang/mechanic-shop-api",
        "liveUrl": "https://mechanic-api.herokuapp.com/docs",
        "image": "/projects/mechanic-api-hero.jpg",
        "gallery": [
          "/projects/mechanic-api-swagger.jpg",
          "/projects/mechanic-api-postman.jpg",
          "/projects/mechanic-api-database.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "MySQL",
            "category": "Database"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "OpenAPI",
            "category": "Documentation"
          },
          {
            "name": "Postman",
            "category": "Testing"
          },
          {
            "name": "Heroku",
            "category": "Deployment"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 9
      },
      "source": "mechanic-shop-api.mdx",
      "slug": "mechanic-shop-api",
      "tokens": [
        "invalidtokenerror",
        "raise",
        "authenticationerror",
        "invalid",
        "token",
        "authentication",
        "decorator",
        "def",
        "token_required",
        "wraps",
        "def",
        "decorated",
        "args",
        "kwargs",
        "token",
        "none",
        "token",
        "from",
        "header",
        "authorization",
        "request",
        "headers",
        "auth_header",
        "request",
        "headers",
        "authorization",
        "try",
        "token",
        "auth_header"
      ]
    },
    {
      "id": "project-mechanic-shop-api-content-9",
      "type": "section",
      "title": "Mechanic Shop API - Service Management System - Section 10",
      "content": "split(' ')[1]  # Bearer <token>\r\n            except IndexError:\r\n                return jsonify({'error': 'Invalid token format'}), 401\r\n        \r\n        if not token:\r\n            return jsonify({'error': 'Token is missing'}), 401\r\n        \r\n        try:\r\n            payload = AuthService",
      "metadata": {
        "title": "Mechanic Shop API - Service Management System",
        "slug": "mechanic-shop-api",
        "description": "RESTful API for auto repair shop management with Python Flask, JWT authentication, and MySQL database",
        "longDescription": "Comprehensive backend API for managing automotive repair services, customer records, and service appointments with secure authentication and CRUD operations",
        "tags": [
          "Python",
          "Flask",
          "MySQL",
          "JWT",
          "REST API",
          "OpenAPI"
        ],
        "category": "Backend API",
        "timeline": "Aug 2025 ‚Äì Sep 2025",
        "status": "Completed",
        "featured": true,
        "priority": 2,
        "repository": "https://github.com/suryadizhang/mechanic-shop-api",
        "liveUrl": "https://mechanic-api.herokuapp.com/docs",
        "image": "/projects/mechanic-api-hero.jpg",
        "gallery": [
          "/projects/mechanic-api-swagger.jpg",
          "/projects/mechanic-api-postman.jpg",
          "/projects/mechanic-api-database.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "MySQL",
            "category": "Database"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "OpenAPI",
            "category": "Documentation"
          },
          {
            "name": "Postman",
            "category": "Testing"
          },
          {
            "name": "Heroku",
            "category": "Deployment"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 10
      },
      "source": "mechanic-shop-api.mdx",
      "slug": "mechanic-shop-api",
      "tokens": [
        "split",
        "bearer",
        "token",
        "except",
        "indexerror",
        "return",
        "jsonify",
        "error",
        "invalid",
        "token",
        "format",
        "401",
        "token",
        "return",
        "jsonify",
        "error",
        "token",
        "missing",
        "401",
        "try",
        "payload",
        "authservice"
      ]
    },
    {
      "id": "project-mechanic-shop-api-content-10",
      "type": "section",
      "title": "Mechanic Shop API - Service Management System - Section 11",
      "content": "verify_token(token)\r\n            current_user_id = payload['user_id']\r\n            current_user_role = payload['role']\r\n        except AuthenticationError as e:\r\n            return jsonify({'error': str(e)}), 401\r\n        \r\n        return f(current_user_id, current_user_role, *args, **kwargs)\r\n    \r\n    return decorated\r\n```\r\n\r\n## Key API Endpoints\r\n\r\n### üîê Authentication\r\n```http\r\nPOST /api/auth/login                # User authentication\r\nPOST /api/auth/register            # User registration  \r\nPOST /api/auth/refresh             # Token refresh\r\n```\r\n\r\n### üë• Customer Management\r\n```http\r\nGET /api/customers                 # List customers with pagination/search\r\nPOST /api/customers                # Create new customer\r\nGET /api/customers/{id}            # Get customer details\r\nPUT /api/customers/{id}            # Update customer\r\nDELETE /api/customers/{id}         # Delete customer\r\nGET /api/customers/{id}/vehicles   # Get customer's vehicles\r\n```\r\n\r\n### üöó Vehicle Management\r\n```http\r\nGET /api/vehicles                  # List all vehicles\r\nPOST /api/vehicles                 # Add new vehicle\r\nGET /api/vehicles/{id}             # Get vehicle details\r\nPUT /api/vehicles/{id}             # Update vehicle\r\nDELETE /api/vehicles/{id}          # Delete vehicle\r\nGET /api/vehicles/{id}/history     # Get service history\r\n```\r\n\r\n### üîß Service Management\r\n```http\r\nGET /api/services                  # List available services\r\nPOST /api/services                 # Create new service type\r\nGET /api/service-records           # List service records\r\nPOST /api/service-records          # Create service record\r\nPUT /api/service-records/{id}      # Update service record\r\n```\r\n\r\n## Impact & Results\r\n\r\n### üìä API Performance\r\n- **Response time**: <200ms for CRUD operations\r\n- **Throughput**: 1000+ requests/minute with proper caching\r\n- **Database efficiency**: Optimized queries with proper indexing  \r\n- **Error rate**: <0",
      "metadata": {
        "title": "Mechanic Shop API - Service Management System",
        "slug": "mechanic-shop-api",
        "description": "RESTful API for auto repair shop management with Python Flask, JWT authentication, and MySQL database",
        "longDescription": "Comprehensive backend API for managing automotive repair services, customer records, and service appointments with secure authentication and CRUD operations",
        "tags": [
          "Python",
          "Flask",
          "MySQL",
          "JWT",
          "REST API",
          "OpenAPI"
        ],
        "category": "Backend API",
        "timeline": "Aug 2025 ‚Äì Sep 2025",
        "status": "Completed",
        "featured": true,
        "priority": 2,
        "repository": "https://github.com/suryadizhang/mechanic-shop-api",
        "liveUrl": "https://mechanic-api.herokuapp.com/docs",
        "image": "/projects/mechanic-api-hero.jpg",
        "gallery": [
          "/projects/mechanic-api-swagger.jpg",
          "/projects/mechanic-api-postman.jpg",
          "/projects/mechanic-api-database.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "MySQL",
            "category": "Database"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "OpenAPI",
            "category": "Documentation"
          },
          {
            "name": "Postman",
            "category": "Testing"
          },
          {
            "name": "Heroku",
            "category": "Deployment"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 11
      },
      "source": "mechanic-shop-api.mdx",
      "slug": "mechanic-shop-api",
      "tokens": [
        "verify_token",
        "token",
        "current_user_id",
        "payload",
        "user_id",
        "current_user_role",
        "payload",
        "role",
        "except",
        "authenticationerror",
        "return",
        "jsonify",
        "error",
        "str",
        "401",
        "return",
        "current_user_id",
        "current_user_role",
        "args",
        "kwargs",
        "return",
        "decorated",
        "key",
        "api",
        "endpoints",
        "authentication",
        "http",
        "post",
        "api",
        "auth",
        "login",
        "user",
        "authentication",
        "post",
        "api",
        "auth",
        "register",
        "user",
        "registration",
        "post",
        "api",
        "auth",
        "refresh",
        "token",
        "refresh",
        "customer",
        "management",
        "http",
        "api",
        "customers",
        "list",
        "customers",
        "with",
        "pagination",
        "search",
        "post",
        "api",
        "customers",
        "create",
        "customer",
        "api",
        "customers",
        "customer",
        "details",
        "api",
        "customers",
        "update",
        "customer",
        "delete",
        "api",
        "customers",
        "delete",
        "customer",
        "api",
        "customers",
        "vehicles",
        "customer",
        "vehicles",
        "vehicle",
        "management",
        "http",
        "api",
        "vehicles",
        "list",
        "vehicles",
        "post",
        "api",
        "vehicles",
        "add",
        "vehicle",
        "api",
        "vehicles",
        "vehicle",
        "details",
        "api",
        "vehicles",
        "update",
        "vehicle",
        "delete",
        "api",
        "vehicles",
        "delete",
        "vehicle",
        "api",
        "vehicles",
        "history",
        "service",
        "history",
        "service",
        "management",
        "http",
        "api",
        "services",
        "list",
        "available",
        "services",
        "post",
        "api",
        "services",
        "create",
        "service",
        "type",
        "api",
        "service",
        "records",
        "list",
        "service",
        "records",
        "post",
        "api",
        "service",
        "records",
        "create",
        "service",
        "record",
        "api",
        "service",
        "records",
        "update",
        "service",
        "record",
        "impact",
        "results",
        "api",
        "performance",
        "response",
        "time",
        "200ms",
        "crud",
        "operations",
        "throughput",
        "1000",
        "requests",
        "minute",
        "with",
        "proper",
        "caching",
        "database",
        "efficiency",
        "optimized",
        "queries",
        "with",
        "proper",
        "indexing",
        "error",
        "rate"
      ]
    },
    {
      "id": "project-mechanic-shop-api-content-11",
      "type": "section",
      "title": "Mechanic Shop API - Service Management System - Section 12",
      "content": "1% with comprehensive error handling\r\n\r\n### üîí Security & Reliability\r\n- **JWT authentication**: Secure token-based access control\r\n- **Input validation**: Prevents SQL injection and XSS attacks\r\n- **Role-based permissions**: Admin vs",
      "metadata": {
        "title": "Mechanic Shop API - Service Management System",
        "slug": "mechanic-shop-api",
        "description": "RESTful API for auto repair shop management with Python Flask, JWT authentication, and MySQL database",
        "longDescription": "Comprehensive backend API for managing automotive repair services, customer records, and service appointments with secure authentication and CRUD operations",
        "tags": [
          "Python",
          "Flask",
          "MySQL",
          "JWT",
          "REST API",
          "OpenAPI"
        ],
        "category": "Backend API",
        "timeline": "Aug 2025 ‚Äì Sep 2025",
        "status": "Completed",
        "featured": true,
        "priority": 2,
        "repository": "https://github.com/suryadizhang/mechanic-shop-api",
        "liveUrl": "https://mechanic-api.herokuapp.com/docs",
        "image": "/projects/mechanic-api-hero.jpg",
        "gallery": [
          "/projects/mechanic-api-swagger.jpg",
          "/projects/mechanic-api-postman.jpg",
          "/projects/mechanic-api-database.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "MySQL",
            "category": "Database"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "OpenAPI",
            "category": "Documentation"
          },
          {
            "name": "Postman",
            "category": "Testing"
          },
          {
            "name": "Heroku",
            "category": "Deployment"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 12
      },
      "source": "mechanic-shop-api.mdx",
      "slug": "mechanic-shop-api",
      "tokens": [
        "with",
        "comprehensive",
        "error",
        "handling",
        "security",
        "reliability",
        "jwt",
        "authentication",
        "secure",
        "token",
        "based",
        "access",
        "control",
        "input",
        "validation",
        "prevents",
        "sql",
        "injection",
        "xss",
        "attacks",
        "role",
        "based",
        "permissions",
        "admin"
      ]
    },
    {
      "id": "project-mechanic-shop-api-content-12",
      "type": "section",
      "title": "Mechanic Shop API - Service Management System - Section 13",
      "content": "user access levels\r\n- **Data integrity**: Foreign key constraints and transactions\r\n\r\n### üìñ Developer Experience  \r\n- **OpenAPI documentation**: Interactive Swagger UI\r\n- **Postman collection**: Complete API test suite\r\n- **Clear error messages**: Helpful validation feedback\r\n- **Consistent responses**: Standardized JSON format\r\n\r\n### üèó Architecture Benefits\r\n- **RESTful design**: Predictable endpoint patterns\r\n- **Database relationships**: Proper normalization and constraints\r\n- **Modular code**: Blueprints for organized structure\r\n- **Environment configs**: Easy deployment across environments\r\n\r\n## Advanced Features\r\n\r\n### CRUD Operations with Error Handling\r\n```python\r\n# Customer management with comprehensive validation\r\n@customers_bp",
      "metadata": {
        "title": "Mechanic Shop API - Service Management System",
        "slug": "mechanic-shop-api",
        "description": "RESTful API for auto repair shop management with Python Flask, JWT authentication, and MySQL database",
        "longDescription": "Comprehensive backend API for managing automotive repair services, customer records, and service appointments with secure authentication and CRUD operations",
        "tags": [
          "Python",
          "Flask",
          "MySQL",
          "JWT",
          "REST API",
          "OpenAPI"
        ],
        "category": "Backend API",
        "timeline": "Aug 2025 ‚Äì Sep 2025",
        "status": "Completed",
        "featured": true,
        "priority": 2,
        "repository": "https://github.com/suryadizhang/mechanic-shop-api",
        "liveUrl": "https://mechanic-api.herokuapp.com/docs",
        "image": "/projects/mechanic-api-hero.jpg",
        "gallery": [
          "/projects/mechanic-api-swagger.jpg",
          "/projects/mechanic-api-postman.jpg",
          "/projects/mechanic-api-database.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "MySQL",
            "category": "Database"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "OpenAPI",
            "category": "Documentation"
          },
          {
            "name": "Postman",
            "category": "Testing"
          },
          {
            "name": "Heroku",
            "category": "Deployment"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 13
      },
      "source": "mechanic-shop-api.mdx",
      "slug": "mechanic-shop-api",
      "tokens": [
        "user",
        "access",
        "levels",
        "data",
        "integrity",
        "foreign",
        "key",
        "constraints",
        "transactions",
        "developer",
        "experience",
        "openapi",
        "documentation",
        "interactive",
        "swagger",
        "postman",
        "collection",
        "complete",
        "api",
        "test",
        "suite",
        "clear",
        "error",
        "messages",
        "helpful",
        "validation",
        "feedback",
        "consistent",
        "responses",
        "standardized",
        "json",
        "format",
        "architecture",
        "benefits",
        "restful",
        "design",
        "predictable",
        "endpoint",
        "patterns",
        "database",
        "relationships",
        "proper",
        "normalization",
        "constraints",
        "modular",
        "code",
        "blueprints",
        "organized",
        "structure",
        "environment",
        "configs",
        "easy",
        "deployment",
        "across",
        "environments",
        "advanced",
        "features",
        "crud",
        "operations",
        "with",
        "error",
        "handling",
        "python",
        "customer",
        "management",
        "with",
        "comprehensive",
        "validation",
        "customers_bp"
      ]
    },
    {
      "id": "project-mechanic-shop-api-content-13",
      "type": "section",
      "title": "Mechanic Shop API - Service Management System - Section 14",
      "content": "route('/customers', methods=['POST'])\r\n@token_required\r\ndef create_customer(current_user_id, current_user_role):\r\n    try:\r\n        data = request get_json()\r\n        \r\n        # Validation\r\n        required_fields = ['first_name', 'last_name', 'email', 'phone']\r\n        for field in required_fields:\r\n            if field not in data or not data[field]",
      "metadata": {
        "title": "Mechanic Shop API - Service Management System",
        "slug": "mechanic-shop-api",
        "description": "RESTful API for auto repair shop management with Python Flask, JWT authentication, and MySQL database",
        "longDescription": "Comprehensive backend API for managing automotive repair services, customer records, and service appointments with secure authentication and CRUD operations",
        "tags": [
          "Python",
          "Flask",
          "MySQL",
          "JWT",
          "REST API",
          "OpenAPI"
        ],
        "category": "Backend API",
        "timeline": "Aug 2025 ‚Äì Sep 2025",
        "status": "Completed",
        "featured": true,
        "priority": 2,
        "repository": "https://github.com/suryadizhang/mechanic-shop-api",
        "liveUrl": "https://mechanic-api.herokuapp.com/docs",
        "image": "/projects/mechanic-api-hero.jpg",
        "gallery": [
          "/projects/mechanic-api-swagger.jpg",
          "/projects/mechanic-api-postman.jpg",
          "/projects/mechanic-api-database.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "MySQL",
            "category": "Database"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "OpenAPI",
            "category": "Documentation"
          },
          {
            "name": "Postman",
            "category": "Testing"
          },
          {
            "name": "Heroku",
            "category": "Deployment"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 14
      },
      "source": "mechanic-shop-api.mdx",
      "slug": "mechanic-shop-api",
      "tokens": [
        "route",
        "customers",
        "methods",
        "post",
        "token_required",
        "def",
        "create_customer",
        "current_user_id",
        "current_user_role",
        "try",
        "data",
        "request",
        "get_json",
        "validation",
        "required_fields",
        "first_name",
        "last_name",
        "email",
        "phone",
        "field",
        "required_fields",
        "field",
        "data",
        "data",
        "field"
      ]
    },
    {
      "id": "project-mechanic-shop-api-content-14",
      "type": "section",
      "title": "Mechanic Shop API - Service Management System - Section 15",
      "content": "strip():\r\n                return jsonify({'error': f'{field} is required'}), 400\r\n        \r\n        # Check for duplicate email\r\n        existing_customer = Customer query filter_by(email=data['email']) first()\r\n        if existing_customer:\r\n            return jsonify({'error': 'Email already exists'}), 409\r\n        \r\n        # Create customer\r\n        customer = Customer(\r\n            first_name=data['first_name'] strip(),\r\n            last_name=data['last_name']",
      "metadata": {
        "title": "Mechanic Shop API - Service Management System",
        "slug": "mechanic-shop-api",
        "description": "RESTful API for auto repair shop management with Python Flask, JWT authentication, and MySQL database",
        "longDescription": "Comprehensive backend API for managing automotive repair services, customer records, and service appointments with secure authentication and CRUD operations",
        "tags": [
          "Python",
          "Flask",
          "MySQL",
          "JWT",
          "REST API",
          "OpenAPI"
        ],
        "category": "Backend API",
        "timeline": "Aug 2025 ‚Äì Sep 2025",
        "status": "Completed",
        "featured": true,
        "priority": 2,
        "repository": "https://github.com/suryadizhang/mechanic-shop-api",
        "liveUrl": "https://mechanic-api.herokuapp.com/docs",
        "image": "/projects/mechanic-api-hero.jpg",
        "gallery": [
          "/projects/mechanic-api-swagger.jpg",
          "/projects/mechanic-api-postman.jpg",
          "/projects/mechanic-api-database.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "MySQL",
            "category": "Database"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "OpenAPI",
            "category": "Documentation"
          },
          {
            "name": "Postman",
            "category": "Testing"
          },
          {
            "name": "Heroku",
            "category": "Deployment"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 15
      },
      "source": "mechanic-shop-api.mdx",
      "slug": "mechanic-shop-api",
      "tokens": [
        "strip",
        "return",
        "jsonify",
        "error",
        "field",
        "required",
        "400",
        "check",
        "duplicate",
        "email",
        "existing_customer",
        "customer",
        "query",
        "filter_by",
        "email",
        "data",
        "email",
        "first",
        "existing_customer",
        "return",
        "jsonify",
        "error",
        "email",
        "already",
        "exists",
        "409",
        "create",
        "customer",
        "customer",
        "customer",
        "first_name",
        "data",
        "first_name",
        "strip",
        "last_name",
        "data",
        "last_name"
      ]
    },
    {
      "id": "project-mechanic-shop-api-content-15",
      "type": "section",
      "title": "Mechanic Shop API - Service Management System - Section 16",
      "content": "strip(),\r\n            email=data['email'] strip() lower(),\r\n            phone=data['phone'] strip(),\r\n            address=data get('address', '') strip()\r\n        )\r\n        \r\n        db session add(customer)\r\n        db session commit()\r\n        \r\n        return jsonify({\r\n            'message': 'Customer created successfully',\r\n            'customer': customer to_dict()\r\n        }), 201\r\n        \r\n    except Exception as e:\r\n        db session rollback()\r\n        current_app logger",
      "metadata": {
        "title": "Mechanic Shop API - Service Management System",
        "slug": "mechanic-shop-api",
        "description": "RESTful API for auto repair shop management with Python Flask, JWT authentication, and MySQL database",
        "longDescription": "Comprehensive backend API for managing automotive repair services, customer records, and service appointments with secure authentication and CRUD operations",
        "tags": [
          "Python",
          "Flask",
          "MySQL",
          "JWT",
          "REST API",
          "OpenAPI"
        ],
        "category": "Backend API",
        "timeline": "Aug 2025 ‚Äì Sep 2025",
        "status": "Completed",
        "featured": true,
        "priority": 2,
        "repository": "https://github.com/suryadizhang/mechanic-shop-api",
        "liveUrl": "https://mechanic-api.herokuapp.com/docs",
        "image": "/projects/mechanic-api-hero.jpg",
        "gallery": [
          "/projects/mechanic-api-swagger.jpg",
          "/projects/mechanic-api-postman.jpg",
          "/projects/mechanic-api-database.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "MySQL",
            "category": "Database"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "OpenAPI",
            "category": "Documentation"
          },
          {
            "name": "Postman",
            "category": "Testing"
          },
          {
            "name": "Heroku",
            "category": "Deployment"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 16
      },
      "source": "mechanic-shop-api.mdx",
      "slug": "mechanic-shop-api",
      "tokens": [
        "strip",
        "email",
        "data",
        "email",
        "strip",
        "lower",
        "phone",
        "data",
        "phone",
        "strip",
        "address",
        "data",
        "address",
        "strip",
        "session",
        "add",
        "customer",
        "session",
        "commit",
        "return",
        "jsonify",
        "message",
        "customer",
        "created",
        "successfully",
        "customer",
        "customer",
        "to_dict",
        "201",
        "except",
        "exception",
        "session",
        "rollback",
        "current_app",
        "logger"
      ]
    },
    {
      "id": "project-mechanic-shop-api-content-16",
      "type": "section",
      "title": "Mechanic Shop API - Service Management System - Section 17",
      "content": "error(f'Error creating customer: {str(e)}')\r\n        return jsonify({'error': 'Internal server error'}), 500\r\n```\r\n\r\n### Database Schema with Constraints\r\n```sql\r\n-- Customer table with proper constraints\r\nCREATE TABLE customers (\r\n    id INT PRIMARY KEY AUTO_INCREMENT,\r\n    first_name VARCHAR(50) NOT NULL,\r\n    last_name VARCHAR(50) NOT NULL,\r\n    email VARCHAR(100) UNIQUE NOT NULL,\r\n    phone VARCHAR(20) NOT NULL,\r\n    address TEXT,\r\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\r\n);\r\n\r\n-- Vehicle table with foreign key relationships\r\nCREATE TABLE vehicles (\r\n    id INT PRIMARY KEY AUTO_INCREMENT,\r\n    customer_id INT NOT NULL,\r\n    make VARCHAR(50) NOT NULL,\r\n    model VARCHAR(50) NOT NULL,\r\n    year INT NOT NULL CHECK (year BETWEEN 1900 AND 2025),\r\n    vin VARCHAR(17) UNIQUE NOT NULL,\r\n    license_plate VARCHAR(20),\r\n    color VARCHAR(30),\r\n    mileage INT CHECK (mileage >= 0),\r\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n    FOREIGN KEY (customer_id) REFERENCES customers(id) ON DELETE CASCADE,\r\n    INDEX idx_customer_id (customer_id),\r\n    INDEX idx_vin (vin)\r\n);\r\n\r\n-- Service records with composite relationships\r\nCREATE TABLE service_records (\r\n    id INT PRIMARY KEY AUTO_INCREMENT,\r\n    vehicle_id INT NOT NULL,\r\n    service_type_id INT NOT NULL,\r\n    description TEXT,\r\n    cost DECIMAL(10,2) NOT NULL CHECK (cost >= 0),\r\n    service_date DATE NOT NULL,\r\n    mileage_at_service INT,\r\n    technician_notes TEXT,\r\n    status ENUM('scheduled', 'in_progress', 'completed', 'cancelled') DEFAULT 'scheduled',\r\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n    FOREIGN KEY (vehicle_id) REFERENCES vehicles(id) ON DELETE CASCADE,\r\n    FOREIGN KEY (service_type_id) REFERENCES service_types(id),\r\n    INDEX idx_vehicle_service (vehicle_id, service_date),\r\n    INDEX idx_status (status)\r\n);\r\n```\r\n\r\n## Testing Strategy\r\n\r\n### Comprehensive Test Coverage\r\n```python\r\n# Unit tests with pytest\r\n@pytest",
      "metadata": {
        "title": "Mechanic Shop API - Service Management System",
        "slug": "mechanic-shop-api",
        "description": "RESTful API for auto repair shop management with Python Flask, JWT authentication, and MySQL database",
        "longDescription": "Comprehensive backend API for managing automotive repair services, customer records, and service appointments with secure authentication and CRUD operations",
        "tags": [
          "Python",
          "Flask",
          "MySQL",
          "JWT",
          "REST API",
          "OpenAPI"
        ],
        "category": "Backend API",
        "timeline": "Aug 2025 ‚Äì Sep 2025",
        "status": "Completed",
        "featured": true,
        "priority": 2,
        "repository": "https://github.com/suryadizhang/mechanic-shop-api",
        "liveUrl": "https://mechanic-api.herokuapp.com/docs",
        "image": "/projects/mechanic-api-hero.jpg",
        "gallery": [
          "/projects/mechanic-api-swagger.jpg",
          "/projects/mechanic-api-postman.jpg",
          "/projects/mechanic-api-database.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "MySQL",
            "category": "Database"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "OpenAPI",
            "category": "Documentation"
          },
          {
            "name": "Postman",
            "category": "Testing"
          },
          {
            "name": "Heroku",
            "category": "Deployment"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 17
      },
      "source": "mechanic-shop-api.mdx",
      "slug": "mechanic-shop-api",
      "tokens": [
        "error",
        "error",
        "creating",
        "customer",
        "str",
        "return",
        "jsonify",
        "error",
        "internal",
        "server",
        "error",
        "500",
        "database",
        "schema",
        "with",
        "constraints",
        "sql",
        "customer",
        "table",
        "with",
        "proper",
        "constraints",
        "create",
        "table",
        "customers",
        "int",
        "primary",
        "key",
        "auto_increment",
        "first_name",
        "varchar",
        "null",
        "last_name",
        "varchar",
        "null",
        "email",
        "varchar",
        "100",
        "unique",
        "null",
        "phone",
        "varchar",
        "null",
        "address",
        "text",
        "created_at",
        "timestamp",
        "default",
        "current_timestamp",
        "updated_at",
        "timestamp",
        "default",
        "current_timestamp",
        "update",
        "current_timestamp",
        "vehicle",
        "table",
        "with",
        "foreign",
        "key",
        "relationships",
        "create",
        "table",
        "vehicles",
        "int",
        "primary",
        "key",
        "auto_increment",
        "customer_id",
        "int",
        "null",
        "make",
        "varchar",
        "null",
        "model",
        "varchar",
        "null",
        "year",
        "int",
        "null",
        "check",
        "year",
        "between",
        "1900",
        "2025",
        "vin",
        "varchar",
        "unique",
        "null",
        "license_plate",
        "varchar",
        "color",
        "varchar",
        "mileage",
        "int",
        "check",
        "mileage",
        "created_at",
        "timestamp",
        "default",
        "current_timestamp",
        "foreign",
        "key",
        "customer_id",
        "references",
        "customers",
        "delete",
        "cascade",
        "index",
        "idx_customer_id",
        "customer_id",
        "index",
        "idx_vin",
        "vin",
        "service",
        "records",
        "with",
        "composite",
        "relationships",
        "create",
        "table",
        "service_records",
        "int",
        "primary",
        "key",
        "auto_increment",
        "vehicle_id",
        "int",
        "null",
        "service_type_id",
        "int",
        "null",
        "description",
        "text",
        "cost",
        "decimal",
        "null",
        "check",
        "cost",
        "service_date",
        "date",
        "null",
        "mileage_at_service",
        "int",
        "technician_notes",
        "text",
        "status",
        "enum",
        "scheduled",
        "in_progress",
        "completed",
        "cancelled",
        "default",
        "scheduled",
        "created_at",
        "timestamp",
        "default",
        "current_timestamp",
        "foreign",
        "key",
        "vehicle_id",
        "references",
        "vehicles",
        "delete",
        "cascade",
        "foreign",
        "key",
        "service_type_id",
        "references",
        "service_types",
        "index",
        "idx_vehicle_service",
        "vehicle_id",
        "service_date",
        "index",
        "idx_status",
        "status",
        "testing",
        "strategy",
        "comprehensive",
        "test",
        "coverage",
        "python",
        "unit",
        "tests",
        "with",
        "pytest",
        "pytest"
      ]
    },
    {
      "id": "project-mechanic-shop-api-content-17",
      "type": "section",
      "title": "Mechanic Shop API - Service Management System - Section 18",
      "content": "fixture\r\ndef client():\r\n    app config['TESTING'] = True\r\n    app config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'\r\n    \r\n    with app test_client() as client:\r\n        with app app_context():\r\n            db create_all()\r\n            yield client\r\n            db",
      "metadata": {
        "title": "Mechanic Shop API - Service Management System",
        "slug": "mechanic-shop-api",
        "description": "RESTful API for auto repair shop management with Python Flask, JWT authentication, and MySQL database",
        "longDescription": "Comprehensive backend API for managing automotive repair services, customer records, and service appointments with secure authentication and CRUD operations",
        "tags": [
          "Python",
          "Flask",
          "MySQL",
          "JWT",
          "REST API",
          "OpenAPI"
        ],
        "category": "Backend API",
        "timeline": "Aug 2025 ‚Äì Sep 2025",
        "status": "Completed",
        "featured": true,
        "priority": 2,
        "repository": "https://github.com/suryadizhang/mechanic-shop-api",
        "liveUrl": "https://mechanic-api.herokuapp.com/docs",
        "image": "/projects/mechanic-api-hero.jpg",
        "gallery": [
          "/projects/mechanic-api-swagger.jpg",
          "/projects/mechanic-api-postman.jpg",
          "/projects/mechanic-api-database.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "MySQL",
            "category": "Database"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "OpenAPI",
            "category": "Documentation"
          },
          {
            "name": "Postman",
            "category": "Testing"
          },
          {
            "name": "Heroku",
            "category": "Deployment"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 18
      },
      "source": "mechanic-shop-api.mdx",
      "slug": "mechanic-shop-api",
      "tokens": [
        "fixture",
        "def",
        "client",
        "app",
        "config",
        "testing",
        "true",
        "app",
        "config",
        "sqlite",
        "memory",
        "with",
        "app",
        "test_client",
        "client",
        "with",
        "app",
        "app_context",
        "create_all",
        "yield",
        "client"
      ]
    },
    {
      "id": "project-mechanic-shop-api-content-18",
      "type": "section",
      "title": "Mechanic Shop API - Service Management System - Section 19",
      "content": "drop_all()\r\n\r\n# API endpoint tests\r\ndef test_create_customer(client, auth_token):\r\n    \"\"\"Test customer creation with valid data\"\"\"\r\n    customer_data = {\r\n        'first_name': 'John',\r\n        'last_name': 'Doe',\r\n        'email': 'john doe@example com',\r\n        'phone': '555-123-4567',\r\n        'address': '123 Main St, Anytown USA'\r\n    }\r\n    \r\n    response = client",
      "metadata": {
        "title": "Mechanic Shop API - Service Management System",
        "slug": "mechanic-shop-api",
        "description": "RESTful API for auto repair shop management with Python Flask, JWT authentication, and MySQL database",
        "longDescription": "Comprehensive backend API for managing automotive repair services, customer records, and service appointments with secure authentication and CRUD operations",
        "tags": [
          "Python",
          "Flask",
          "MySQL",
          "JWT",
          "REST API",
          "OpenAPI"
        ],
        "category": "Backend API",
        "timeline": "Aug 2025 ‚Äì Sep 2025",
        "status": "Completed",
        "featured": true,
        "priority": 2,
        "repository": "https://github.com/suryadizhang/mechanic-shop-api",
        "liveUrl": "https://mechanic-api.herokuapp.com/docs",
        "image": "/projects/mechanic-api-hero.jpg",
        "gallery": [
          "/projects/mechanic-api-swagger.jpg",
          "/projects/mechanic-api-postman.jpg",
          "/projects/mechanic-api-database.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "MySQL",
            "category": "Database"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "OpenAPI",
            "category": "Documentation"
          },
          {
            "name": "Postman",
            "category": "Testing"
          },
          {
            "name": "Heroku",
            "category": "Deployment"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 19
      },
      "source": "mechanic-shop-api.mdx",
      "slug": "mechanic-shop-api",
      "tokens": [
        "drop_all",
        "api",
        "endpoint",
        "tests",
        "def",
        "client",
        "auth_token",
        "test",
        "customer",
        "creation",
        "with",
        "valid",
        "data",
        "customer_data",
        "first_name",
        "john",
        "last_name",
        "doe",
        "email",
        "john",
        "doe",
        "example",
        "com",
        "phone",
        "555",
        "123",
        "4567",
        "address",
        "123",
        "main",
        "anytown",
        "usa",
        "response",
        "client"
      ]
    },
    {
      "id": "project-mechanic-shop-api-content-19",
      "type": "section",
      "title": "Mechanic Shop API - Service Management System - Section 20",
      "content": "post(\r\n        '/api/customers',\r\n        json=customer_data,\r\n        headers={'Authorization': f'Bearer {auth_token}'}\r\n    )\r\n    \r\n    assert response status_code == 201\r\n    data = response",
      "metadata": {
        "title": "Mechanic Shop API - Service Management System",
        "slug": "mechanic-shop-api",
        "description": "RESTful API for auto repair shop management with Python Flask, JWT authentication, and MySQL database",
        "longDescription": "Comprehensive backend API for managing automotive repair services, customer records, and service appointments with secure authentication and CRUD operations",
        "tags": [
          "Python",
          "Flask",
          "MySQL",
          "JWT",
          "REST API",
          "OpenAPI"
        ],
        "category": "Backend API",
        "timeline": "Aug 2025 ‚Äì Sep 2025",
        "status": "Completed",
        "featured": true,
        "priority": 2,
        "repository": "https://github.com/suryadizhang/mechanic-shop-api",
        "liveUrl": "https://mechanic-api.herokuapp.com/docs",
        "image": "/projects/mechanic-api-hero.jpg",
        "gallery": [
          "/projects/mechanic-api-swagger.jpg",
          "/projects/mechanic-api-postman.jpg",
          "/projects/mechanic-api-database.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "MySQL",
            "category": "Database"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "OpenAPI",
            "category": "Documentation"
          },
          {
            "name": "Postman",
            "category": "Testing"
          },
          {
            "name": "Heroku",
            "category": "Deployment"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 20
      },
      "source": "mechanic-shop-api.mdx",
      "slug": "mechanic-shop-api",
      "tokens": [
        "post",
        "api",
        "customers",
        "json",
        "customer_data",
        "headers",
        "authorization",
        "bearer",
        "auth_token",
        "assert",
        "response",
        "status_code",
        "201",
        "data",
        "response"
      ]
    },
    {
      "id": "project-mechanic-shop-api-content-20",
      "type": "section",
      "title": "Mechanic Shop API - Service Management System - Section 21",
      "content": "get_json()\r\n    assert data['customer']['email'] == customer_data['email']\r\n    assert 'id' in data['customer']\r\n\r\ndef test_vehicle_customer_relationship(client, auth_token):\r\n    \"\"\"Test vehicle-customer relationship integrity\"\"\"\r\n    # Create customer first\r\n    customer = create_test_customer(client, auth_token)\r\n    customer_id = customer['id']\r\n    \r\n    vehicle_data = {\r\n        'customer_id': customer_id,\r\n        'make': 'Toyota',\r\n        'model': 'Camry',\r\n        'year': 2020,\r\n        'vin': '1HGBH41JXMN109186'\r\n    }\r\n    \r\n    response = client",
      "metadata": {
        "title": "Mechanic Shop API - Service Management System",
        "slug": "mechanic-shop-api",
        "description": "RESTful API for auto repair shop management with Python Flask, JWT authentication, and MySQL database",
        "longDescription": "Comprehensive backend API for managing automotive repair services, customer records, and service appointments with secure authentication and CRUD operations",
        "tags": [
          "Python",
          "Flask",
          "MySQL",
          "JWT",
          "REST API",
          "OpenAPI"
        ],
        "category": "Backend API",
        "timeline": "Aug 2025 ‚Äì Sep 2025",
        "status": "Completed",
        "featured": true,
        "priority": 2,
        "repository": "https://github.com/suryadizhang/mechanic-shop-api",
        "liveUrl": "https://mechanic-api.herokuapp.com/docs",
        "image": "/projects/mechanic-api-hero.jpg",
        "gallery": [
          "/projects/mechanic-api-swagger.jpg",
          "/projects/mechanic-api-postman.jpg",
          "/projects/mechanic-api-database.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "MySQL",
            "category": "Database"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "OpenAPI",
            "category": "Documentation"
          },
          {
            "name": "Postman",
            "category": "Testing"
          },
          {
            "name": "Heroku",
            "category": "Deployment"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 21
      },
      "source": "mechanic-shop-api.mdx",
      "slug": "mechanic-shop-api",
      "tokens": [
        "get_json",
        "assert",
        "data",
        "customer",
        "email",
        "customer_data",
        "email",
        "assert",
        "data",
        "customer",
        "def",
        "client",
        "auth_token",
        "test",
        "vehicle",
        "customer",
        "relationship",
        "integrity",
        "create",
        "customer",
        "first",
        "customer",
        "client",
        "auth_token",
        "customer_id",
        "customer",
        "vehicle_data",
        "customer_id",
        "customer_id",
        "make",
        "toyota",
        "model",
        "camry",
        "year",
        "2020",
        "vin",
        "1hgbh41jxmn109186",
        "response",
        "client"
      ]
    },
    {
      "id": "project-mechanic-shop-api-content-21",
      "type": "section",
      "title": "Mechanic Shop API - Service Management System - Section 22",
      "content": "post('/api/vehicles', json=vehicle_data,\r\n                          headers={'Authorization': f'Bearer {auth_token}'})\r\n    \r\n    assert response status_code == 201\r\n    \r\n    # Verify relationship\r\n    response = client get(f'/api/customers/{customer_id}/vehicles',\r\n                         headers={'Authorization': f'Bearer {auth_token}'})\r\n    \r\n    assert response status_code == 200\r\n    vehicles = response",
      "metadata": {
        "title": "Mechanic Shop API - Service Management System",
        "slug": "mechanic-shop-api",
        "description": "RESTful API for auto repair shop management with Python Flask, JWT authentication, and MySQL database",
        "longDescription": "Comprehensive backend API for managing automotive repair services, customer records, and service appointments with secure authentication and CRUD operations",
        "tags": [
          "Python",
          "Flask",
          "MySQL",
          "JWT",
          "REST API",
          "OpenAPI"
        ],
        "category": "Backend API",
        "timeline": "Aug 2025 ‚Äì Sep 2025",
        "status": "Completed",
        "featured": true,
        "priority": 2,
        "repository": "https://github.com/suryadizhang/mechanic-shop-api",
        "liveUrl": "https://mechanic-api.herokuapp.com/docs",
        "image": "/projects/mechanic-api-hero.jpg",
        "gallery": [
          "/projects/mechanic-api-swagger.jpg",
          "/projects/mechanic-api-postman.jpg",
          "/projects/mechanic-api-database.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "MySQL",
            "category": "Database"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "OpenAPI",
            "category": "Documentation"
          },
          {
            "name": "Postman",
            "category": "Testing"
          },
          {
            "name": "Heroku",
            "category": "Deployment"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 22
      },
      "source": "mechanic-shop-api.mdx",
      "slug": "mechanic-shop-api",
      "tokens": [
        "post",
        "api",
        "vehicles",
        "json",
        "vehicle_data",
        "headers",
        "authorization",
        "bearer",
        "auth_token",
        "assert",
        "response",
        "status_code",
        "201",
        "verify",
        "relationship",
        "response",
        "client",
        "api",
        "customers",
        "customer_id",
        "vehicles",
        "headers",
        "authorization",
        "bearer",
        "auth_token",
        "assert",
        "response",
        "status_code",
        "200",
        "vehicles",
        "response"
      ]
    },
    {
      "id": "project-mechanic-shop-api-content-22",
      "type": "section",
      "title": "Mechanic Shop API - Service Management System - Section 23",
      "content": "get_json()['vehicles']\r\n    assert len(vehicles) == 1\r\n    assert vehicles[0]['vin'] == vehicle_data['vin']\r\n```\r\n\r\n## Technical Highlights\r\n\r\n### Input Validation & Security\r\n```python\r\n# Custom validation decorators\r\ndef validate_json(f):\r\n    @wraps(f)\r\n    def decorated_function(*args, **kwargs):\r\n        if not request is_json:\r\n            return jsonify({'error': 'Content-Type must be application/json'}), 400\r\n        \r\n        data = request",
      "metadata": {
        "title": "Mechanic Shop API - Service Management System",
        "slug": "mechanic-shop-api",
        "description": "RESTful API for auto repair shop management with Python Flask, JWT authentication, and MySQL database",
        "longDescription": "Comprehensive backend API for managing automotive repair services, customer records, and service appointments with secure authentication and CRUD operations",
        "tags": [
          "Python",
          "Flask",
          "MySQL",
          "JWT",
          "REST API",
          "OpenAPI"
        ],
        "category": "Backend API",
        "timeline": "Aug 2025 ‚Äì Sep 2025",
        "status": "Completed",
        "featured": true,
        "priority": 2,
        "repository": "https://github.com/suryadizhang/mechanic-shop-api",
        "liveUrl": "https://mechanic-api.herokuapp.com/docs",
        "image": "/projects/mechanic-api-hero.jpg",
        "gallery": [
          "/projects/mechanic-api-swagger.jpg",
          "/projects/mechanic-api-postman.jpg",
          "/projects/mechanic-api-database.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "MySQL",
            "category": "Database"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "OpenAPI",
            "category": "Documentation"
          },
          {
            "name": "Postman",
            "category": "Testing"
          },
          {
            "name": "Heroku",
            "category": "Deployment"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 23
      },
      "source": "mechanic-shop-api.mdx",
      "slug": "mechanic-shop-api",
      "tokens": [
        "get_json",
        "vehicles",
        "assert",
        "len",
        "vehicles",
        "assert",
        "vehicles",
        "vin",
        "vehicle_data",
        "vin",
        "technical",
        "highlights",
        "input",
        "validation",
        "security",
        "python",
        "custom",
        "validation",
        "decorators",
        "def",
        "validate_json",
        "wraps",
        "def",
        "decorated_function",
        "args",
        "kwargs",
        "request",
        "is_json",
        "return",
        "jsonify",
        "error",
        "content",
        "type",
        "must",
        "application",
        "json",
        "400",
        "data",
        "request"
      ]
    },
    {
      "id": "project-mechanic-shop-api-content-23",
      "type": "section",
      "title": "Mechanic Shop API - Service Management System - Section 24",
      "content": "get_json()\r\n        if not data:\r\n            return jsonify({'error': 'Request body cannot be empty'}), 400\r\n        \r\n        return f(data, *args, **kwargs)\r\n    return decorated_function\r\n\r\n# Email and phone validation\r\ndef validate_email(email):\r\n    pattern = r'^[a-zA-Z0-9 _%+-]+@[a-zA-Z0-9 -]+\\ [a-zA-Z]{2,}$'\r\n    return re match(pattern, email) is not None\r\n\r\ndef validate_phone(phone):\r\n    digits_only = re",
      "metadata": {
        "title": "Mechanic Shop API - Service Management System",
        "slug": "mechanic-shop-api",
        "description": "RESTful API for auto repair shop management with Python Flask, JWT authentication, and MySQL database",
        "longDescription": "Comprehensive backend API for managing automotive repair services, customer records, and service appointments with secure authentication and CRUD operations",
        "tags": [
          "Python",
          "Flask",
          "MySQL",
          "JWT",
          "REST API",
          "OpenAPI"
        ],
        "category": "Backend API",
        "timeline": "Aug 2025 ‚Äì Sep 2025",
        "status": "Completed",
        "featured": true,
        "priority": 2,
        "repository": "https://github.com/suryadizhang/mechanic-shop-api",
        "liveUrl": "https://mechanic-api.herokuapp.com/docs",
        "image": "/projects/mechanic-api-hero.jpg",
        "gallery": [
          "/projects/mechanic-api-swagger.jpg",
          "/projects/mechanic-api-postman.jpg",
          "/projects/mechanic-api-database.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "MySQL",
            "category": "Database"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "OpenAPI",
            "category": "Documentation"
          },
          {
            "name": "Postman",
            "category": "Testing"
          },
          {
            "name": "Heroku",
            "category": "Deployment"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 24
      },
      "source": "mechanic-shop-api.mdx",
      "slug": "mechanic-shop-api",
      "tokens": [
        "get_json",
        "data",
        "return",
        "jsonify",
        "error",
        "request",
        "body",
        "cannot",
        "empty",
        "400",
        "return",
        "data",
        "args",
        "kwargs",
        "return",
        "decorated_function",
        "email",
        "phone",
        "validation",
        "def",
        "validate_email",
        "email",
        "pattern",
        "return",
        "match",
        "pattern",
        "email",
        "none",
        "def",
        "validate_phone",
        "phone",
        "digits_only"
      ]
    },
    {
      "id": "project-mechanic-shop-api-content-24",
      "type": "section",
      "title": "Mechanic Shop API - Service Management System - Section 25",
      "content": "sub(r'\\D', '', phone)\r\n    return len(digits_only) >= 10\r\n```\r\n\r\n### OpenAPI Documentation  \r\n```python\r\n# Swagger/OpenAPI integration\r\nfrom flask_restx import Api, Resource, fields\r\n\r\napi = Api(\r\n    app,\r\n    version='1 0',\r\n    title='Mechanic Shop API',\r\n    description='RESTful API for auto repair shop management',\r\n    doc='/docs'\r\n)\r\n\r\n# API models for documentation\r\ncustomer_model = api model('Customer', {\r\n    'id': fields",
      "metadata": {
        "title": "Mechanic Shop API - Service Management System",
        "slug": "mechanic-shop-api",
        "description": "RESTful API for auto repair shop management with Python Flask, JWT authentication, and MySQL database",
        "longDescription": "Comprehensive backend API for managing automotive repair services, customer records, and service appointments with secure authentication and CRUD operations",
        "tags": [
          "Python",
          "Flask",
          "MySQL",
          "JWT",
          "REST API",
          "OpenAPI"
        ],
        "category": "Backend API",
        "timeline": "Aug 2025 ‚Äì Sep 2025",
        "status": "Completed",
        "featured": true,
        "priority": 2,
        "repository": "https://github.com/suryadizhang/mechanic-shop-api",
        "liveUrl": "https://mechanic-api.herokuapp.com/docs",
        "image": "/projects/mechanic-api-hero.jpg",
        "gallery": [
          "/projects/mechanic-api-swagger.jpg",
          "/projects/mechanic-api-postman.jpg",
          "/projects/mechanic-api-database.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "MySQL",
            "category": "Database"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "OpenAPI",
            "category": "Documentation"
          },
          {
            "name": "Postman",
            "category": "Testing"
          },
          {
            "name": "Heroku",
            "category": "Deployment"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 25
      },
      "source": "mechanic-shop-api.mdx",
      "slug": "mechanic-shop-api",
      "tokens": [
        "sub",
        "phone",
        "return",
        "len",
        "digits_only",
        "openapi",
        "documentation",
        "python",
        "swagger",
        "openapi",
        "integration",
        "from",
        "flask_restx",
        "import",
        "api",
        "resource",
        "fields",
        "api",
        "api",
        "app",
        "version",
        "title",
        "mechanic",
        "shop",
        "api",
        "description",
        "restful",
        "api",
        "auto",
        "repair",
        "shop",
        "management",
        "doc",
        "docs",
        "api",
        "models",
        "documentation",
        "customer_model",
        "api",
        "model",
        "customer",
        "fields"
      ]
    },
    {
      "id": "project-mechanic-shop-api-content-25",
      "type": "section",
      "title": "Mechanic Shop API - Service Management System - Section 26",
      "content": "Integer(readOnly=True, description='Customer ID'),\r\n    'first_name': fields String(required=True, description='First name'),\r\n    'last_name': fields String(required=True, description='Last name'),\r\n    'email': fields String(required=True, description='Email address'),\r\n    'phone': fields String(required=True, description='Phone number'),\r\n    'address': fields String(description='Home address'),\r\n    'created_at': fields",
      "metadata": {
        "title": "Mechanic Shop API - Service Management System",
        "slug": "mechanic-shop-api",
        "description": "RESTful API for auto repair shop management with Python Flask, JWT authentication, and MySQL database",
        "longDescription": "Comprehensive backend API for managing automotive repair services, customer records, and service appointments with secure authentication and CRUD operations",
        "tags": [
          "Python",
          "Flask",
          "MySQL",
          "JWT",
          "REST API",
          "OpenAPI"
        ],
        "category": "Backend API",
        "timeline": "Aug 2025 ‚Äì Sep 2025",
        "status": "Completed",
        "featured": true,
        "priority": 2,
        "repository": "https://github.com/suryadizhang/mechanic-shop-api",
        "liveUrl": "https://mechanic-api.herokuapp.com/docs",
        "image": "/projects/mechanic-api-hero.jpg",
        "gallery": [
          "/projects/mechanic-api-swagger.jpg",
          "/projects/mechanic-api-postman.jpg",
          "/projects/mechanic-api-database.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "MySQL",
            "category": "Database"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "OpenAPI",
            "category": "Documentation"
          },
          {
            "name": "Postman",
            "category": "Testing"
          },
          {
            "name": "Heroku",
            "category": "Deployment"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 26
      },
      "source": "mechanic-shop-api.mdx",
      "slug": "mechanic-shop-api",
      "tokens": [
        "integer",
        "readonly",
        "true",
        "description",
        "customer",
        "first_name",
        "fields",
        "string",
        "required",
        "true",
        "description",
        "first",
        "name",
        "last_name",
        "fields",
        "string",
        "required",
        "true",
        "description",
        "last",
        "name",
        "email",
        "fields",
        "string",
        "required",
        "true",
        "description",
        "email",
        "address",
        "phone",
        "fields",
        "string",
        "required",
        "true",
        "description",
        "phone",
        "number",
        "address",
        "fields",
        "string",
        "description",
        "home",
        "address",
        "created_at",
        "fields"
      ]
    },
    {
      "id": "project-mechanic-shop-api-content-26",
      "type": "section",
      "title": "Mechanic Shop API - Service Management System - Section 27",
      "content": "DateTime(readOnly=True, description='Creation timestamp')\r\n})\r\n```\r\n\r\n## Lessons Learned\r\n\r\n### üéØ API Design\r\n- **Consistency matters**: Standard response formats reduce integration complexity\r\n- **Pagination is essential**: Large datasets need efficient handling  \r\n- **Error messages**: Clear, actionable error responses improve developer experience\r\n\r\n### üîí Security Best Practices\r\n- **Validate everything**: Never trust client input\r\n- **Rate limiting**: Prevent abuse with request throttling\r\n- **Audit logging**: Track who did what and when\r\n\r\n### üìä Database Design\r\n- **Foreign keys**: Enforce data integrity at the database level\r\n- **Indexes**: Strategic indexing dramatically improves query performance\r\n- **Constraints**: Database-level validation prevents bad data\r\n\r\n## Future Enhancements\r\n\r\n- **GraphQL integration**: More flexible query capabilities\r\n- **Real-time notifications**: WebSocket integration for live updates  \r\n- **Advanced search**: Full-text search with Elasticsearch\r\n- **File uploads**: Support for service photos and documents\r\n- **Integration APIs**: Connect with inventory and payment systems\r\n\r\n---\r\n\r\n**This API demonstrates professional backend development with comprehensive CRUD operations, secure authentication, proper error handling, and excellent documentation for seamless frontend integration",
      "metadata": {
        "title": "Mechanic Shop API - Service Management System",
        "slug": "mechanic-shop-api",
        "description": "RESTful API for auto repair shop management with Python Flask, JWT authentication, and MySQL database",
        "longDescription": "Comprehensive backend API for managing automotive repair services, customer records, and service appointments with secure authentication and CRUD operations",
        "tags": [
          "Python",
          "Flask",
          "MySQL",
          "JWT",
          "REST API",
          "OpenAPI"
        ],
        "category": "Backend API",
        "timeline": "Aug 2025 ‚Äì Sep 2025",
        "status": "Completed",
        "featured": true,
        "priority": 2,
        "repository": "https://github.com/suryadizhang/mechanic-shop-api",
        "liveUrl": "https://mechanic-api.herokuapp.com/docs",
        "image": "/projects/mechanic-api-hero.jpg",
        "gallery": [
          "/projects/mechanic-api-swagger.jpg",
          "/projects/mechanic-api-postman.jpg",
          "/projects/mechanic-api-database.jpg"
        ],
        "tech": [
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Flask",
            "category": "Framework"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "MySQL",
            "category": "Database"
          },
          {
            "name": "JWT",
            "category": "Authentication"
          },
          {
            "name": "OpenAPI",
            "category": "Documentation"
          },
          {
            "name": "Postman",
            "category": "Testing"
          },
          {
            "name": "Heroku",
            "category": "Deployment"
          },
          {
            "name": "pytest",
            "category": "Testing"
          }
        ],
        "section": 27
      },
      "source": "mechanic-shop-api.mdx",
      "slug": "mechanic-shop-api",
      "tokens": [
        "datetime",
        "readonly",
        "true",
        "description",
        "creation",
        "timestamp",
        "lessons",
        "learned",
        "api",
        "design",
        "consistency",
        "matters",
        "standard",
        "response",
        "formats",
        "reduce",
        "integration",
        "complexity",
        "pagination",
        "essential",
        "large",
        "datasets",
        "need",
        "efficient",
        "handling",
        "error",
        "messages",
        "clear",
        "actionable",
        "error",
        "responses",
        "improve",
        "developer",
        "experience",
        "security",
        "best",
        "practices",
        "validate",
        "everything",
        "never",
        "trust",
        "client",
        "input",
        "rate",
        "limiting",
        "prevent",
        "abuse",
        "with",
        "request",
        "throttling",
        "audit",
        "logging",
        "track",
        "what",
        "when",
        "database",
        "design",
        "foreign",
        "keys",
        "enforce",
        "data",
        "integrity",
        "database",
        "level",
        "indexes",
        "strategic",
        "indexing",
        "dramatically",
        "improves",
        "query",
        "performance",
        "constraints",
        "database",
        "level",
        "validation",
        "prevents",
        "bad",
        "data",
        "future",
        "enhancements",
        "graphql",
        "integration",
        "more",
        "flexible",
        "query",
        "capabilities",
        "real",
        "time",
        "notifications",
        "websocket",
        "integration",
        "live",
        "updates",
        "advanced",
        "search",
        "full",
        "text",
        "search",
        "with",
        "elasticsearch",
        "file",
        "uploads",
        "support",
        "service",
        "photos",
        "documents",
        "integration",
        "apis",
        "connect",
        "with",
        "inventory",
        "payment",
        "systems",
        "this",
        "api",
        "demonstrates",
        "professional",
        "backend",
        "development",
        "with",
        "comprehensive",
        "crud",
        "operations",
        "secure",
        "authentication",
        "proper",
        "error",
        "handling",
        "excellent",
        "documentation",
        "seamless",
        "frontend",
        "integration"
      ]
    },
    {
      "id": "project-my-hibachi-overview",
      "type": "project",
      "title": "My Hibachi LLC - Live Booking Platform",
      "content": "My Hibachi LLC - Live Booking Platform: Full-stack booking platform with Next.js frontend, FastAPI backend, and Postgres database. End-to-end hibachi catering booking platform featuring real-time availability, secure payments, admin dashboard, and automated CI/CD deployment",
      "metadata": {
        "title": "My Hibachi LLC - Live Booking Platform",
        "slug": "my-hibachi",
        "description": "Full-stack booking platform with Next.js frontend, FastAPI backend, and Postgres database",
        "longDescription": "End-to-end hibachi catering booking platform featuring real-time availability, secure payments, admin dashboard, and automated CI/CD deployment",
        "tags": [
          "Next.js",
          "TypeScript",
          "FastAPI",
          "Postgres",
          "Vercel",
          "Docker"
        ],
        "category": "Full-Stack Application",
        "timeline": "Jun 2025 ‚Äì Present",
        "status": "Live Production",
        "featured": true,
        "priority": 1,
        "repository": "https://github.com/suryadizhang/hibachi-booking-platform",
        "liveUrl": "https://myhibachi.vercel.app",
        "image": "/projects/my-hibachi-hero.jpg",
        "gallery": [
          "/projects/my-hibachi-booking.jpg",
          "/projects/my-hibachi-admin.jpg",
          "/projects/my-hibachi-mobile.jpg"
        ],
        "tech": [
          {
            "name": "Next.js",
            "category": "Frontend"
          },
          {
            "name": "TypeScript",
            "category": "Language"
          },
          {
            "name": "Tailwind CSS",
            "category": "Styling"
          },
          {
            "name": "FastAPI",
            "category": "Backend"
          },
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Postgres",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "Vercel",
            "category": "Deployment"
          },
          {
            "name": "Docker",
            "category": "Containerization"
          },
          {
            "name": "GitHub Actions",
            "category": "CI/CD"
          }
        ]
      },
      "source": "my-hibachi.mdx",
      "slug": "my-hibachi",
      "tokens": [
        "hibachi",
        "llc",
        "live",
        "booking",
        "platform",
        "full",
        "stack",
        "booking",
        "platform",
        "with",
        "next",
        "frontend",
        "fastapi",
        "backend",
        "postgres",
        "database",
        "end",
        "end",
        "hibachi",
        "catering",
        "booking",
        "platform",
        "featuring",
        "real",
        "time",
        "availability",
        "secure",
        "payments",
        "admin",
        "dashboard",
        "automated",
        "deployment"
      ]
    },
    {
      "id": "project-my-hibachi-tech",
      "type": "project",
      "title": "My Hibachi LLC - Live Booking Platform - Technology Stack",
      "content": "My Hibachi LLC - Live Booking Platform is built with: Next.js, TypeScript, FastAPI, Postgres, Vercel, Docker",
      "metadata": {
        "tags": [
          "Next.js",
          "TypeScript",
          "FastAPI",
          "Postgres",
          "Vercel",
          "Docker"
        ],
        "title": "My Hibachi LLC - Live Booking Platform"
      },
      "source": "my-hibachi.mdx",
      "slug": "my-hibachi",
      "tokens": [
        "hibachi",
        "llc",
        "live",
        "booking",
        "platform",
        "built",
        "with",
        "next",
        "typescript",
        "fastapi",
        "postgres",
        "vercel",
        "docker"
      ]
    },
    {
      "id": "project-my-hibachi-content-0",
      "type": "section",
      "title": "My Hibachi LLC - Live Booking Platform - Section 1",
      "content": "# My Hibachi LLC - Live Booking Platform\r\n\r\n**Real hibachi catering booking platform serving actual customers with 100% self-serve bookings**\r\n\r\n## The Challenge\r\n\r\nMy Hibachi LLC needed a professional booking system to replace manual phone/text coordination for hibachi catering events The challenge was building a production-ready platform that could handle real customer bookings, payments, and event management while maintaining high reliability and user experience",
      "metadata": {
        "title": "My Hibachi LLC - Live Booking Platform",
        "slug": "my-hibachi",
        "description": "Full-stack booking platform with Next.js frontend, FastAPI backend, and Postgres database",
        "longDescription": "End-to-end hibachi catering booking platform featuring real-time availability, secure payments, admin dashboard, and automated CI/CD deployment",
        "tags": [
          "Next.js",
          "TypeScript",
          "FastAPI",
          "Postgres",
          "Vercel",
          "Docker"
        ],
        "category": "Full-Stack Application",
        "timeline": "Jun 2025 ‚Äì Present",
        "status": "Live Production",
        "featured": true,
        "priority": 1,
        "repository": "https://github.com/suryadizhang/hibachi-booking-platform",
        "liveUrl": "https://myhibachi.vercel.app",
        "image": "/projects/my-hibachi-hero.jpg",
        "gallery": [
          "/projects/my-hibachi-booking.jpg",
          "/projects/my-hibachi-admin.jpg",
          "/projects/my-hibachi-mobile.jpg"
        ],
        "tech": [
          {
            "name": "Next.js",
            "category": "Frontend"
          },
          {
            "name": "TypeScript",
            "category": "Language"
          },
          {
            "name": "Tailwind CSS",
            "category": "Styling"
          },
          {
            "name": "FastAPI",
            "category": "Backend"
          },
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Postgres",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "Vercel",
            "category": "Deployment"
          },
          {
            "name": "Docker",
            "category": "Containerization"
          },
          {
            "name": "GitHub Actions",
            "category": "CI/CD"
          }
        ],
        "section": 1
      },
      "source": "my-hibachi.mdx",
      "slug": "my-hibachi",
      "tokens": [
        "hibachi",
        "llc",
        "live",
        "booking",
        "platform",
        "real",
        "hibachi",
        "catering",
        "booking",
        "platform",
        "serving",
        "actual",
        "customers",
        "with",
        "100",
        "self",
        "serve",
        "bookings",
        "challenge",
        "hibachi",
        "llc",
        "needed",
        "professional",
        "booking",
        "system",
        "replace",
        "manual",
        "phone",
        "text",
        "coordination",
        "hibachi",
        "catering",
        "events",
        "challenge",
        "building",
        "production",
        "ready",
        "platform",
        "that",
        "could",
        "handle",
        "real",
        "customer",
        "bookings",
        "payments",
        "event",
        "management",
        "while",
        "maintaining",
        "high",
        "reliability",
        "user",
        "experience"
      ]
    },
    {
      "id": "project-my-hibachi-content-1",
      "type": "section",
      "title": "My Hibachi LLC - Live Booking Platform - Section 2",
      "content": "## Technical Architecture\r\n\r\n### Frontend (Next js + TypeScript)\r\n```typescript\r\n// Real-time availability checking\r\nconst checkAvailability = async (date: Date, duration: number) => {\r\n  const response = await fetch('/api/availability', {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON stringify({ date, duration })\r\n  });\r\n  return response",
      "metadata": {
        "title": "My Hibachi LLC - Live Booking Platform",
        "slug": "my-hibachi",
        "description": "Full-stack booking platform with Next.js frontend, FastAPI backend, and Postgres database",
        "longDescription": "End-to-end hibachi catering booking platform featuring real-time availability, secure payments, admin dashboard, and automated CI/CD deployment",
        "tags": [
          "Next.js",
          "TypeScript",
          "FastAPI",
          "Postgres",
          "Vercel",
          "Docker"
        ],
        "category": "Full-Stack Application",
        "timeline": "Jun 2025 ‚Äì Present",
        "status": "Live Production",
        "featured": true,
        "priority": 1,
        "repository": "https://github.com/suryadizhang/hibachi-booking-platform",
        "liveUrl": "https://myhibachi.vercel.app",
        "image": "/projects/my-hibachi-hero.jpg",
        "gallery": [
          "/projects/my-hibachi-booking.jpg",
          "/projects/my-hibachi-admin.jpg",
          "/projects/my-hibachi-mobile.jpg"
        ],
        "tech": [
          {
            "name": "Next.js",
            "category": "Frontend"
          },
          {
            "name": "TypeScript",
            "category": "Language"
          },
          {
            "name": "Tailwind CSS",
            "category": "Styling"
          },
          {
            "name": "FastAPI",
            "category": "Backend"
          },
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Postgres",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "Vercel",
            "category": "Deployment"
          },
          {
            "name": "Docker",
            "category": "Containerization"
          },
          {
            "name": "GitHub Actions",
            "category": "CI/CD"
          }
        ],
        "section": 2
      },
      "source": "my-hibachi.mdx",
      "slug": "my-hibachi",
      "tokens": [
        "technical",
        "architecture",
        "frontend",
        "next",
        "typescript",
        "typescript",
        "real",
        "time",
        "availability",
        "checking",
        "const",
        "checkavailability",
        "async",
        "date",
        "date",
        "duration",
        "number",
        "const",
        "response",
        "await",
        "fetch",
        "api",
        "availability",
        "method",
        "post",
        "headers",
        "content",
        "type",
        "application",
        "json",
        "body",
        "json",
        "stringify",
        "date",
        "duration",
        "return",
        "response"
      ]
    },
    {
      "id": "project-my-hibachi-content-2",
      "type": "section",
      "title": "My Hibachi LLC - Live Booking Platform - Section 3",
      "content": "json();\r\n};\r\n\r\n// Booking form with validation\r\nconst BookingForm = () => {\r\n  const [availability, setAvailability] = useState<AvailabilityData | null>(null);\r\n  \r\n  return (\r\n    <form onSubmit={handleBooking} className=\"space-y-6\">\r\n      <DateTimePicker\r\n        onChange={handleDateChange}\r\n        minDate={new Date()}\r\n        className=\"w-full\"\r\n      />\r\n      <ServiceSelector\r\n        services={services}\r\n        onChange={setSelectedServices}\r\n      />\r\n      <PaymentSection\r\n        total={calculateTotal()}\r\n        onSuccess={handlePaymentSuccess}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n```\r\n\r\n### Backend (FastAPI + Postgres)\r\n```python\r\n# Booking endpoint with validation and rate limiting\r\n@app",
      "metadata": {
        "title": "My Hibachi LLC - Live Booking Platform",
        "slug": "my-hibachi",
        "description": "Full-stack booking platform with Next.js frontend, FastAPI backend, and Postgres database",
        "longDescription": "End-to-end hibachi catering booking platform featuring real-time availability, secure payments, admin dashboard, and automated CI/CD deployment",
        "tags": [
          "Next.js",
          "TypeScript",
          "FastAPI",
          "Postgres",
          "Vercel",
          "Docker"
        ],
        "category": "Full-Stack Application",
        "timeline": "Jun 2025 ‚Äì Present",
        "status": "Live Production",
        "featured": true,
        "priority": 1,
        "repository": "https://github.com/suryadizhang/hibachi-booking-platform",
        "liveUrl": "https://myhibachi.vercel.app",
        "image": "/projects/my-hibachi-hero.jpg",
        "gallery": [
          "/projects/my-hibachi-booking.jpg",
          "/projects/my-hibachi-admin.jpg",
          "/projects/my-hibachi-mobile.jpg"
        ],
        "tech": [
          {
            "name": "Next.js",
            "category": "Frontend"
          },
          {
            "name": "TypeScript",
            "category": "Language"
          },
          {
            "name": "Tailwind CSS",
            "category": "Styling"
          },
          {
            "name": "FastAPI",
            "category": "Backend"
          },
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Postgres",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "Vercel",
            "category": "Deployment"
          },
          {
            "name": "Docker",
            "category": "Containerization"
          },
          {
            "name": "GitHub Actions",
            "category": "CI/CD"
          }
        ],
        "section": 3
      },
      "source": "my-hibachi.mdx",
      "slug": "my-hibachi",
      "tokens": [
        "json",
        "booking",
        "form",
        "with",
        "validation",
        "const",
        "bookingform",
        "const",
        "availability",
        "setavailability",
        "usestate",
        "availabilitydata",
        "null",
        "null",
        "return",
        "form",
        "onsubmit",
        "handlebooking",
        "classname",
        "space",
        "datetimepicker",
        "onchange",
        "handledatechange",
        "mindate",
        "date",
        "classname",
        "full",
        "serviceselector",
        "services",
        "services",
        "onchange",
        "setselectedservices",
        "paymentsection",
        "total",
        "calculatetotal",
        "onsuccess",
        "form",
        "backend",
        "fastapi",
        "postgres",
        "python",
        "booking",
        "endpoint",
        "with",
        "validation",
        "rate",
        "limiting",
        "app"
      ]
    },
    {
      "id": "project-my-hibachi-content-3",
      "type": "section",
      "title": "My Hibachi LLC - Live Booking Platform - Section 4",
      "content": "post(\"/api/bookings\", response_model=BookingResponse)\r\n@limiter limit(\"5/minute\")\r\nasync def create_booking(\r\n    booking: BookingCreate,\r\n    session: Session = Depends(get_session),\r\n    current_user: User = Depends(get_current_user)\r\n):\r\n    # Validate availability\r\n    if not await check_availability(session, booking date, booking",
      "metadata": {
        "title": "My Hibachi LLC - Live Booking Platform",
        "slug": "my-hibachi",
        "description": "Full-stack booking platform with Next.js frontend, FastAPI backend, and Postgres database",
        "longDescription": "End-to-end hibachi catering booking platform featuring real-time availability, secure payments, admin dashboard, and automated CI/CD deployment",
        "tags": [
          "Next.js",
          "TypeScript",
          "FastAPI",
          "Postgres",
          "Vercel",
          "Docker"
        ],
        "category": "Full-Stack Application",
        "timeline": "Jun 2025 ‚Äì Present",
        "status": "Live Production",
        "featured": true,
        "priority": 1,
        "repository": "https://github.com/suryadizhang/hibachi-booking-platform",
        "liveUrl": "https://myhibachi.vercel.app",
        "image": "/projects/my-hibachi-hero.jpg",
        "gallery": [
          "/projects/my-hibachi-booking.jpg",
          "/projects/my-hibachi-admin.jpg",
          "/projects/my-hibachi-mobile.jpg"
        ],
        "tech": [
          {
            "name": "Next.js",
            "category": "Frontend"
          },
          {
            "name": "TypeScript",
            "category": "Language"
          },
          {
            "name": "Tailwind CSS",
            "category": "Styling"
          },
          {
            "name": "FastAPI",
            "category": "Backend"
          },
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Postgres",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "Vercel",
            "category": "Deployment"
          },
          {
            "name": "Docker",
            "category": "Containerization"
          },
          {
            "name": "GitHub Actions",
            "category": "CI/CD"
          }
        ],
        "section": 4
      },
      "source": "my-hibachi.mdx",
      "slug": "my-hibachi",
      "tokens": [
        "post",
        "api",
        "bookings",
        "response_model",
        "bookingresponse",
        "limiter",
        "limit",
        "minute",
        "async",
        "def",
        "create_booking",
        "booking",
        "bookingcreate",
        "session",
        "session",
        "depends",
        "get_session",
        "current_user",
        "user",
        "depends",
        "get_current_user",
        "validate",
        "availability",
        "await",
        "check_availability",
        "session",
        "booking",
        "date",
        "booking"
      ]
    },
    {
      "id": "project-my-hibachi-content-4",
      "type": "section",
      "title": "My Hibachi LLC - Live Booking Platform - Section 5",
      "content": "duration):\r\n        raise HTTPException(status_code=400, detail=\"Time slot not available\")\r\n    \r\n    # Create booking with atomic transaction\r\n    async with session begin():\r\n        db_booking = Booking(**booking dict(), user_id=current_user id)\r\n        session add(db_booking)\r\n        await session commit()\r\n        \r\n        # Send confirmation email\r\n        await send_booking_confirmation(db_booking)\r\n        \r\n    return BookingResponse",
      "metadata": {
        "title": "My Hibachi LLC - Live Booking Platform",
        "slug": "my-hibachi",
        "description": "Full-stack booking platform with Next.js frontend, FastAPI backend, and Postgres database",
        "longDescription": "End-to-end hibachi catering booking platform featuring real-time availability, secure payments, admin dashboard, and automated CI/CD deployment",
        "tags": [
          "Next.js",
          "TypeScript",
          "FastAPI",
          "Postgres",
          "Vercel",
          "Docker"
        ],
        "category": "Full-Stack Application",
        "timeline": "Jun 2025 ‚Äì Present",
        "status": "Live Production",
        "featured": true,
        "priority": 1,
        "repository": "https://github.com/suryadizhang/hibachi-booking-platform",
        "liveUrl": "https://myhibachi.vercel.app",
        "image": "/projects/my-hibachi-hero.jpg",
        "gallery": [
          "/projects/my-hibachi-booking.jpg",
          "/projects/my-hibachi-admin.jpg",
          "/projects/my-hibachi-mobile.jpg"
        ],
        "tech": [
          {
            "name": "Next.js",
            "category": "Frontend"
          },
          {
            "name": "TypeScript",
            "category": "Language"
          },
          {
            "name": "Tailwind CSS",
            "category": "Styling"
          },
          {
            "name": "FastAPI",
            "category": "Backend"
          },
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Postgres",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "Vercel",
            "category": "Deployment"
          },
          {
            "name": "Docker",
            "category": "Containerization"
          },
          {
            "name": "GitHub Actions",
            "category": "CI/CD"
          }
        ],
        "section": 5
      },
      "source": "my-hibachi.mdx",
      "slug": "my-hibachi",
      "tokens": [
        "duration",
        "raise",
        "httpexception",
        "status_code",
        "400",
        "detail",
        "time",
        "slot",
        "available",
        "create",
        "booking",
        "with",
        "atomic",
        "transaction",
        "async",
        "with",
        "session",
        "begin",
        "db_booking",
        "booking",
        "booking",
        "dict",
        "user_id",
        "current_user",
        "session",
        "add",
        "db_booking",
        "await",
        "session",
        "commit",
        "send",
        "confirmation",
        "email",
        "await",
        "db_booking",
        "return",
        "bookingresponse"
      ]
    },
    {
      "id": "project-my-hibachi-content-5",
      "type": "section",
      "title": "My Hibachi LLC - Live Booking Platform - Section 6",
      "content": "from_orm(db_booking)\r\n\r\n# Admin dashboard endpoints\r\n@app get(\"/api/admin/bookings\")\r\n@requires_role(\"admin\")\r\nasync def get_all_bookings(\r\n    page: int = 1,\r\n    limit: int = 20,\r\n    status: str = None,\r\n    session: Session = Depends(get_session)\r\n):\r\n    query = select(Booking) order_by(Booking created_at desc())\r\n    if status:\r\n        query = query where(Booking status == status)\r\n    \r\n    bookings = await session execute(\r\n        query offset((page - 1) * limit)",
      "metadata": {
        "title": "My Hibachi LLC - Live Booking Platform",
        "slug": "my-hibachi",
        "description": "Full-stack booking platform with Next.js frontend, FastAPI backend, and Postgres database",
        "longDescription": "End-to-end hibachi catering booking platform featuring real-time availability, secure payments, admin dashboard, and automated CI/CD deployment",
        "tags": [
          "Next.js",
          "TypeScript",
          "FastAPI",
          "Postgres",
          "Vercel",
          "Docker"
        ],
        "category": "Full-Stack Application",
        "timeline": "Jun 2025 ‚Äì Present",
        "status": "Live Production",
        "featured": true,
        "priority": 1,
        "repository": "https://github.com/suryadizhang/hibachi-booking-platform",
        "liveUrl": "https://myhibachi.vercel.app",
        "image": "/projects/my-hibachi-hero.jpg",
        "gallery": [
          "/projects/my-hibachi-booking.jpg",
          "/projects/my-hibachi-admin.jpg",
          "/projects/my-hibachi-mobile.jpg"
        ],
        "tech": [
          {
            "name": "Next.js",
            "category": "Frontend"
          },
          {
            "name": "TypeScript",
            "category": "Language"
          },
          {
            "name": "Tailwind CSS",
            "category": "Styling"
          },
          {
            "name": "FastAPI",
            "category": "Backend"
          },
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Postgres",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "Vercel",
            "category": "Deployment"
          },
          {
            "name": "Docker",
            "category": "Containerization"
          },
          {
            "name": "GitHub Actions",
            "category": "CI/CD"
          }
        ],
        "section": 6
      },
      "source": "my-hibachi.mdx",
      "slug": "my-hibachi",
      "tokens": [
        "from_orm",
        "db_booking",
        "admin",
        "dashboard",
        "endpoints",
        "app",
        "api",
        "admin",
        "bookings",
        "requires_role",
        "admin",
        "async",
        "def",
        "get_all_bookings",
        "page",
        "int",
        "limit",
        "int",
        "status",
        "str",
        "none",
        "session",
        "session",
        "depends",
        "get_session",
        "query",
        "select",
        "booking",
        "order_by",
        "booking",
        "created_at",
        "desc",
        "status",
        "query",
        "query",
        "where",
        "booking",
        "status",
        "status",
        "bookings",
        "await",
        "session",
        "execute",
        "query",
        "offset",
        "page",
        "limit"
      ]
    },
    {
      "id": "project-my-hibachi-content-6",
      "type": "section",
      "title": "My Hibachi LLC - Live Booking Platform - Section 7",
      "content": "limit(limit)\r\n    )\r\n    return {\"bookings\": bookings scalars() all(), \"page\": page}\r\n```\r\n\r\n## Impact & Results\r\n\r\n### üìà Business Metrics\r\n- **100% self-serve bookings**: Eliminated manual coordination\r\n- **30% faster booking process**: Reduced from 10+ texts to 3-minute form  \r\n- **25% fewer booking errors**: Validation prevents common mistakes\r\n- **$15k+ revenue processed**: Handling real customer payments\r\n\r\n### üõ† Technical Achievements\r\n- **99",
      "metadata": {
        "title": "My Hibachi LLC - Live Booking Platform",
        "slug": "my-hibachi",
        "description": "Full-stack booking platform with Next.js frontend, FastAPI backend, and Postgres database",
        "longDescription": "End-to-end hibachi catering booking platform featuring real-time availability, secure payments, admin dashboard, and automated CI/CD deployment",
        "tags": [
          "Next.js",
          "TypeScript",
          "FastAPI",
          "Postgres",
          "Vercel",
          "Docker"
        ],
        "category": "Full-Stack Application",
        "timeline": "Jun 2025 ‚Äì Present",
        "status": "Live Production",
        "featured": true,
        "priority": 1,
        "repository": "https://github.com/suryadizhang/hibachi-booking-platform",
        "liveUrl": "https://myhibachi.vercel.app",
        "image": "/projects/my-hibachi-hero.jpg",
        "gallery": [
          "/projects/my-hibachi-booking.jpg",
          "/projects/my-hibachi-admin.jpg",
          "/projects/my-hibachi-mobile.jpg"
        ],
        "tech": [
          {
            "name": "Next.js",
            "category": "Frontend"
          },
          {
            "name": "TypeScript",
            "category": "Language"
          },
          {
            "name": "Tailwind CSS",
            "category": "Styling"
          },
          {
            "name": "FastAPI",
            "category": "Backend"
          },
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Postgres",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "Vercel",
            "category": "Deployment"
          },
          {
            "name": "Docker",
            "category": "Containerization"
          },
          {
            "name": "GitHub Actions",
            "category": "CI/CD"
          }
        ],
        "section": 7
      },
      "source": "my-hibachi.mdx",
      "slug": "my-hibachi",
      "tokens": [
        "limit",
        "limit",
        "return",
        "bookings",
        "bookings",
        "scalars",
        "page",
        "page",
        "impact",
        "results",
        "business",
        "metrics",
        "100",
        "self",
        "serve",
        "bookings",
        "eliminated",
        "manual",
        "coordination",
        "faster",
        "booking",
        "process",
        "reduced",
        "from",
        "texts",
        "minute",
        "form",
        "fewer",
        "booking",
        "errors",
        "validation",
        "prevents",
        "common",
        "mistakes",
        "15k",
        "revenue",
        "processed",
        "handling",
        "real",
        "customer",
        "payments",
        "technical",
        "achievements"
      ]
    },
    {
      "id": "project-my-hibachi-content-7",
      "type": "section",
      "title": "My Hibachi LLC - Live Booking Platform - Section 8",
      "content": "9% uptime**: Robust error handling and monitoring\r\n- **Sub-2s page loads**: Optimized bundle size and caching\r\n- **Mobile-first**: 90%+ mobile traffic, perfect responsiveness\r\n- **Zero data breaches**: Secure by design with proper sanitization\r\n\r\n### üöÄ Development Velocity\r\n- **Daily deployments**: CI/CD enables rapid iteration\r\n- **40% faster releases**: Automated testing and deployment\r\n- **Clean documentation**: OpenAPI spec for easy integration\r\n- **Monitoring**: Real-time alerts for issues\r\n\r\n## Key Features Implemented\r\n\r\n### üéØ Customer Booking Flow\r\n- **Real-time availability**: Dynamic slot checking prevents double-bookings\r\n- **Service customization**: Multiple hibachi options with pricing\r\n- **Mobile-responsive**: 90% of bookings happen on mobile\r\n- **Secure payments**: Stripe integration with webhook verification\r\n\r\n### üîê Authentication & Security  \r\n- **JWT-based auth**: Secure token management with refresh rotation\r\n- **Role-based access**: Customer vs",
      "metadata": {
        "title": "My Hibachi LLC - Live Booking Platform",
        "slug": "my-hibachi",
        "description": "Full-stack booking platform with Next.js frontend, FastAPI backend, and Postgres database",
        "longDescription": "End-to-end hibachi catering booking platform featuring real-time availability, secure payments, admin dashboard, and automated CI/CD deployment",
        "tags": [
          "Next.js",
          "TypeScript",
          "FastAPI",
          "Postgres",
          "Vercel",
          "Docker"
        ],
        "category": "Full-Stack Application",
        "timeline": "Jun 2025 ‚Äì Present",
        "status": "Live Production",
        "featured": true,
        "priority": 1,
        "repository": "https://github.com/suryadizhang/hibachi-booking-platform",
        "liveUrl": "https://myhibachi.vercel.app",
        "image": "/projects/my-hibachi-hero.jpg",
        "gallery": [
          "/projects/my-hibachi-booking.jpg",
          "/projects/my-hibachi-admin.jpg",
          "/projects/my-hibachi-mobile.jpg"
        ],
        "tech": [
          {
            "name": "Next.js",
            "category": "Frontend"
          },
          {
            "name": "TypeScript",
            "category": "Language"
          },
          {
            "name": "Tailwind CSS",
            "category": "Styling"
          },
          {
            "name": "FastAPI",
            "category": "Backend"
          },
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Postgres",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "Vercel",
            "category": "Deployment"
          },
          {
            "name": "Docker",
            "category": "Containerization"
          },
          {
            "name": "GitHub Actions",
            "category": "CI/CD"
          }
        ],
        "section": 8
      },
      "source": "my-hibachi.mdx",
      "slug": "my-hibachi",
      "tokens": [
        "uptime",
        "robust",
        "error",
        "handling",
        "monitoring",
        "sub",
        "page",
        "loads",
        "optimized",
        "bundle",
        "size",
        "caching",
        "mobile",
        "first",
        "mobile",
        "traffic",
        "perfect",
        "responsiveness",
        "zero",
        "data",
        "breaches",
        "secure",
        "design",
        "with",
        "proper",
        "sanitization",
        "development",
        "velocity",
        "daily",
        "deployments",
        "enables",
        "rapid",
        "iteration",
        "faster",
        "releases",
        "automated",
        "testing",
        "deployment",
        "clean",
        "documentation",
        "openapi",
        "spec",
        "easy",
        "integration",
        "monitoring",
        "real",
        "time",
        "alerts",
        "issues",
        "key",
        "features",
        "implemented",
        "customer",
        "booking",
        "flow",
        "real",
        "time",
        "availability",
        "dynamic",
        "slot",
        "checking",
        "prevents",
        "double",
        "bookings",
        "service",
        "customization",
        "multiple",
        "hibachi",
        "options",
        "with",
        "pricing",
        "mobile",
        "responsive",
        "bookings",
        "happen",
        "mobile",
        "secure",
        "payments",
        "stripe",
        "integration",
        "with",
        "webhook",
        "verification",
        "authentication",
        "security",
        "jwt",
        "based",
        "auth",
        "secure",
        "token",
        "management",
        "with",
        "refresh",
        "rotation",
        "role",
        "based",
        "access",
        "customer"
      ]
    },
    {
      "id": "project-my-hibachi-content-8",
      "type": "section",
      "title": "My Hibachi LLC - Live Booking Platform - Section 9",
      "content": "admin permissions\r\n- **Rate limiting**: Prevents spam and abuse\r\n- **Input validation**: Pydantic models with custom validators\r\n\r\n### üìä Admin Dashboard\r\n- **Booking management**: View, edit, cancel bookings\r\n- **Calendar view**: Visual scheduling interface\r\n- **Customer database**: Contact info and booking history\r\n- **Analytics**: Revenue, popular services, peak times\r\n\r\n## Technical Deep Dive\r\n\r\n### Performance Optimizations\r\n```typescript\r\n// Optimistic UI updates for better UX\r\nconst [bookings, setBookings] = useState<Booking[]>([]);\r\n\r\nconst createBooking = async (bookingData: BookingCreate) => {\r\n  // Optimistically add to UI\r\n  const tempId = crypto",
      "metadata": {
        "title": "My Hibachi LLC - Live Booking Platform",
        "slug": "my-hibachi",
        "description": "Full-stack booking platform with Next.js frontend, FastAPI backend, and Postgres database",
        "longDescription": "End-to-end hibachi catering booking platform featuring real-time availability, secure payments, admin dashboard, and automated CI/CD deployment",
        "tags": [
          "Next.js",
          "TypeScript",
          "FastAPI",
          "Postgres",
          "Vercel",
          "Docker"
        ],
        "category": "Full-Stack Application",
        "timeline": "Jun 2025 ‚Äì Present",
        "status": "Live Production",
        "featured": true,
        "priority": 1,
        "repository": "https://github.com/suryadizhang/hibachi-booking-platform",
        "liveUrl": "https://myhibachi.vercel.app",
        "image": "/projects/my-hibachi-hero.jpg",
        "gallery": [
          "/projects/my-hibachi-booking.jpg",
          "/projects/my-hibachi-admin.jpg",
          "/projects/my-hibachi-mobile.jpg"
        ],
        "tech": [
          {
            "name": "Next.js",
            "category": "Frontend"
          },
          {
            "name": "TypeScript",
            "category": "Language"
          },
          {
            "name": "Tailwind CSS",
            "category": "Styling"
          },
          {
            "name": "FastAPI",
            "category": "Backend"
          },
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Postgres",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "Vercel",
            "category": "Deployment"
          },
          {
            "name": "Docker",
            "category": "Containerization"
          },
          {
            "name": "GitHub Actions",
            "category": "CI/CD"
          }
        ],
        "section": 9
      },
      "source": "my-hibachi.mdx",
      "slug": "my-hibachi",
      "tokens": [
        "admin",
        "permissions",
        "rate",
        "limiting",
        "prevents",
        "spam",
        "abuse",
        "input",
        "validation",
        "pydantic",
        "models",
        "with",
        "custom",
        "validators",
        "admin",
        "dashboard",
        "booking",
        "management",
        "view",
        "edit",
        "cancel",
        "bookings",
        "calendar",
        "view",
        "visual",
        "scheduling",
        "interface",
        "customer",
        "database",
        "contact",
        "info",
        "booking",
        "history",
        "analytics",
        "revenue",
        "popular",
        "services",
        "peak",
        "times",
        "technical",
        "deep",
        "dive",
        "performance",
        "optimizations",
        "typescript",
        "optimistic",
        "updates",
        "better",
        "const",
        "bookings",
        "setbookings",
        "usestate",
        "booking",
        "const",
        "createbooking",
        "async",
        "bookingdata",
        "bookingcreate",
        "optimistically",
        "add",
        "const",
        "tempid",
        "crypto"
      ]
    },
    {
      "id": "project-my-hibachi-content-9",
      "type": "section",
      "title": "My Hibachi LLC - Live Booking Platform - Section 10",
      "content": "randomUUID();\r\n  const optimisticBooking = { bookingData, id: tempId, status: 'pending' };\r\n  setBookings(prev => [optimisticBooking, prev]);\r\n\r\n  try {\r\n    const result = await api createBooking(bookingData);\r\n    // Replace temp booking with real one\r\n    setBookings(prev => \r\n      prev map(b => b id === tempId result : b)\r\n    );\r\n  } catch (error) {\r\n    // Remove optimistic update on error\r\n    setBookings(prev => prev filter(b => b id",
      "metadata": {
        "title": "My Hibachi LLC - Live Booking Platform",
        "slug": "my-hibachi",
        "description": "Full-stack booking platform with Next.js frontend, FastAPI backend, and Postgres database",
        "longDescription": "End-to-end hibachi catering booking platform featuring real-time availability, secure payments, admin dashboard, and automated CI/CD deployment",
        "tags": [
          "Next.js",
          "TypeScript",
          "FastAPI",
          "Postgres",
          "Vercel",
          "Docker"
        ],
        "category": "Full-Stack Application",
        "timeline": "Jun 2025 ‚Äì Present",
        "status": "Live Production",
        "featured": true,
        "priority": 1,
        "repository": "https://github.com/suryadizhang/hibachi-booking-platform",
        "liveUrl": "https://myhibachi.vercel.app",
        "image": "/projects/my-hibachi-hero.jpg",
        "gallery": [
          "/projects/my-hibachi-booking.jpg",
          "/projects/my-hibachi-admin.jpg",
          "/projects/my-hibachi-mobile.jpg"
        ],
        "tech": [
          {
            "name": "Next.js",
            "category": "Frontend"
          },
          {
            "name": "TypeScript",
            "category": "Language"
          },
          {
            "name": "Tailwind CSS",
            "category": "Styling"
          },
          {
            "name": "FastAPI",
            "category": "Backend"
          },
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Postgres",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "Vercel",
            "category": "Deployment"
          },
          {
            "name": "Docker",
            "category": "Containerization"
          },
          {
            "name": "GitHub Actions",
            "category": "CI/CD"
          }
        ],
        "section": 10
      },
      "source": "my-hibachi.mdx",
      "slug": "my-hibachi",
      "tokens": [
        "randomuuid",
        "const",
        "optimisticbooking",
        "bookingdata",
        "tempid",
        "status",
        "pending",
        "setbookings",
        "prev",
        "optimisticbooking",
        "prev",
        "try",
        "const",
        "result",
        "await",
        "api",
        "createbooking",
        "bookingdata",
        "replace",
        "temp",
        "booking",
        "with",
        "real",
        "setbookings",
        "prev",
        "prev",
        "map",
        "tempid",
        "result",
        "catch",
        "error",
        "remove",
        "optimistic",
        "update",
        "error",
        "setbookings",
        "prev",
        "prev",
        "filter"
      ]
    },
    {
      "id": "project-my-hibachi-content-10",
      "type": "section",
      "title": "My Hibachi LLC - Live Booking Platform - Section 11",
      "content": "== tempId));\r\n    throw error;\r\n  }\r\n};\r\n```\r\n\r\n### Database Schema\r\n```sql\r\n-- Bookings table with proper constraints\r\nCREATE TABLE bookings (\r\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\r\n    user_id UUID REFERENCES users(id),\r\n    event_date TIMESTAMP NOT NULL,\r\n    duration INTEGER NOT NULL CHECK (duration > 0),\r\n    guest_count INTEGER NOT NULL CHECK (guest_count > 0),\r\n    services JSONB NOT NULL,\r\n    total_amount DECIMAL(10,2) NOT NULL,\r\n    status booking_status DEFAULT 'pending',\r\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n);\r\n\r\n-- Indexes for performance\r\nCREATE INDEX idx_bookings_date ON bookings(event_date);\r\nCREATE INDEX idx_availability_date ON availability_slots(date, is_available);\r\n```\r\n\r\n## Lessons Learned\r\n\r\n### üéØ Product Development\r\n- **Start with MVP**: Basic booking form ‚Üí Advanced features\r\n- **User feedback**: Real customers provided invaluable insights  \r\n- **Mobile-first**: Most bookings happen on phones, design accordingly\r\n\r\n### ‚öôÔ∏è Technical Architecture\r\n- **Database constraints**: Prevent bad data at the source\r\n- **Caching strategy**: Redis for availability checking performance\r\n- **API versioning**: Plan for backwards compatibility early\r\n\r\n### üöÄ DevOps & Scaling\r\n- **Monitoring is crucial**: Set up alerts before you need them\r\n- **Backup strategy**: Automated database backups saved us once\r\n- **Documentation**: Good docs accelerate onboarding and debugging\r\n\r\n---\r\n\r\n**This project demonstrates end-to-end full-stack development with real-world impact, handling actual customer bookings and payments while maintaining high reliability and user experience",
      "metadata": {
        "title": "My Hibachi LLC - Live Booking Platform",
        "slug": "my-hibachi",
        "description": "Full-stack booking platform with Next.js frontend, FastAPI backend, and Postgres database",
        "longDescription": "End-to-end hibachi catering booking platform featuring real-time availability, secure payments, admin dashboard, and automated CI/CD deployment",
        "tags": [
          "Next.js",
          "TypeScript",
          "FastAPI",
          "Postgres",
          "Vercel",
          "Docker"
        ],
        "category": "Full-Stack Application",
        "timeline": "Jun 2025 ‚Äì Present",
        "status": "Live Production",
        "featured": true,
        "priority": 1,
        "repository": "https://github.com/suryadizhang/hibachi-booking-platform",
        "liveUrl": "https://myhibachi.vercel.app",
        "image": "/projects/my-hibachi-hero.jpg",
        "gallery": [
          "/projects/my-hibachi-booking.jpg",
          "/projects/my-hibachi-admin.jpg",
          "/projects/my-hibachi-mobile.jpg"
        ],
        "tech": [
          {
            "name": "Next.js",
            "category": "Frontend"
          },
          {
            "name": "TypeScript",
            "category": "Language"
          },
          {
            "name": "Tailwind CSS",
            "category": "Styling"
          },
          {
            "name": "FastAPI",
            "category": "Backend"
          },
          {
            "name": "Python",
            "category": "Language"
          },
          {
            "name": "Postgres",
            "category": "Database"
          },
          {
            "name": "SQLAlchemy",
            "category": "ORM"
          },
          {
            "name": "Vercel",
            "category": "Deployment"
          },
          {
            "name": "Docker",
            "category": "Containerization"
          },
          {
            "name": "GitHub Actions",
            "category": "CI/CD"
          }
        ],
        "section": 11
      },
      "source": "my-hibachi.mdx",
      "slug": "my-hibachi",
      "tokens": [
        "tempid",
        "throw",
        "error",
        "database",
        "schema",
        "sql",
        "bookings",
        "table",
        "with",
        "proper",
        "constraints",
        "create",
        "table",
        "bookings",
        "uuid",
        "primary",
        "key",
        "default",
        "gen_random_uuid",
        "user_id",
        "uuid",
        "references",
        "users",
        "event_date",
        "timestamp",
        "null",
        "duration",
        "integer",
        "null",
        "check",
        "duration",
        "guest_count",
        "integer",
        "null",
        "check",
        "guest_count",
        "services",
        "jsonb",
        "null",
        "total_amount",
        "decimal",
        "null",
        "status",
        "booking_status",
        "default",
        "pending",
        "created_at",
        "timestamp",
        "default",
        "current_timestamp",
        "updated_at",
        "timestamp",
        "default",
        "current_timestamp",
        "indexes",
        "performance",
        "create",
        "index",
        "idx_bookings_date",
        "bookings",
        "event_date",
        "create",
        "index",
        "availability_slots",
        "date",
        "is_available",
        "lessons",
        "learned",
        "product",
        "development",
        "start",
        "with",
        "mvp",
        "basic",
        "booking",
        "form",
        "advanced",
        "features",
        "user",
        "feedback",
        "real",
        "customers",
        "provided",
        "invaluable",
        "insights",
        "mobile",
        "first",
        "most",
        "bookings",
        "happen",
        "phones",
        "design",
        "accordingly",
        "technical",
        "architecture",
        "database",
        "constraints",
        "prevent",
        "bad",
        "data",
        "source",
        "caching",
        "strategy",
        "redis",
        "availability",
        "checking",
        "performance",
        "api",
        "versioning",
        "plan",
        "backwards",
        "compatibility",
        "early",
        "devops",
        "scaling",
        "monitoring",
        "crucial",
        "set",
        "alerts",
        "before",
        "need",
        "them",
        "backup",
        "strategy",
        "automated",
        "database",
        "backups",
        "saved",
        "once",
        "documentation",
        "good",
        "docs",
        "accelerate",
        "onboarding",
        "debugging",
        "this",
        "project",
        "demonstrates",
        "end",
        "end",
        "full",
        "stack",
        "development",
        "with",
        "real",
        "world",
        "impact",
        "handling",
        "actual",
        "customer",
        "bookings",
        "payments",
        "while",
        "maintaining",
        "high",
        "reliability",
        "user",
        "experience"
      ]
    },
    {
      "id": "project-task-management-pwa-overview",
      "type": "project",
      "title": "Task Management PWA",
      "content": "Task Management PWA: undefined. ",
      "metadata": {
        "title": "Task Management PWA",
        "slug": "task-management-pwa",
        "summary": "Progressive Web App for team task management with offline functionality, real-time collaboration, and advanced project tracking.",
        "tags": [
          "Vue.js",
          "PWA",
          "IndexedDB",
          "Socket.io",
          "Service Workers"
        ],
        "year": 2023,
        "cover": "/images/projects/task-management.jpg",
        "links": {
          "repo": "https://github.com/suryadizhang/task-pwa",
          "live": "https://task-management-pwa.netlify.app"
        }
      },
      "source": "task-management-pwa.mdx",
      "slug": "task-management-pwa",
      "tokens": [
        "task",
        "management",
        "pwa",
        "undefined"
      ]
    },
    {
      "id": "project-task-management-pwa-tech",
      "type": "project",
      "title": "Task Management PWA - Technology Stack",
      "content": "Task Management PWA is built with: Vue.js, PWA, IndexedDB, Socket.io, Service Workers",
      "metadata": {
        "tags": [
          "Vue.js",
          "PWA",
          "IndexedDB",
          "Socket.io",
          "Service Workers"
        ],
        "title": "Task Management PWA"
      },
      "source": "task-management-pwa.mdx",
      "slug": "task-management-pwa",
      "tokens": [
        "task",
        "management",
        "pwa",
        "built",
        "with",
        "vue",
        "pwa",
        "indexeddb",
        "socket",
        "service",
        "workers"
      ]
    },
    {
      "id": "project-task-management-pwa-content-0",
      "type": "section",
      "title": "Task Management PWA - Section 1",
      "content": "# Task Management PWA\r\n\r\nA full-featured Progressive Web App that enables teams to manage tasks and projects with seamless offline functionality and real-time collaboration ## Problem Solved\r\n\r\nMany teams struggle with task management tools that don't work offline or have poor mobile experiences This PWA addresses those issues by providing a native app-like experience that works anywhere, anytime",
      "metadata": {
        "title": "Task Management PWA",
        "slug": "task-management-pwa",
        "summary": "Progressive Web App for team task management with offline functionality, real-time collaboration, and advanced project tracking.",
        "tags": [
          "Vue.js",
          "PWA",
          "IndexedDB",
          "Socket.io",
          "Service Workers"
        ],
        "year": 2023,
        "cover": "/images/projects/task-management.jpg",
        "links": {
          "repo": "https://github.com/suryadizhang/task-pwa",
          "live": "https://task-management-pwa.netlify.app"
        },
        "section": 1
      },
      "source": "task-management-pwa.mdx",
      "slug": "task-management-pwa",
      "tokens": [
        "task",
        "management",
        "pwa",
        "full",
        "featured",
        "progressive",
        "web",
        "app",
        "that",
        "enables",
        "teams",
        "manage",
        "tasks",
        "projects",
        "with",
        "seamless",
        "offline",
        "functionality",
        "real",
        "time",
        "collaboration",
        "problem",
        "solved",
        "many",
        "teams",
        "struggle",
        "with",
        "task",
        "management",
        "tools",
        "that",
        "don",
        "work",
        "offline",
        "have",
        "poor",
        "mobile",
        "experiences",
        "this",
        "pwa",
        "addresses",
        "those",
        "issues",
        "providing",
        "native",
        "app",
        "like",
        "experience",
        "that",
        "works",
        "anywhere",
        "anytime"
      ]
    },
    {
      "id": "project-task-management-pwa-content-1",
      "type": "section",
      "title": "Task Management PWA - Section 2",
      "content": "## Key Features\r\n\r\n- **Offline First**: Full functionality without internet connection\r\n- **Real-time Sync**: Instant updates when team members make changes  \r\n- **Cross-Platform**: Works on desktop, mobile, and tablet\r\n- **Push Notifications**: Reminders and task updates\r\n- **Drag & Drop**: Intuitive Kanban-style task organization\r\n\r\n## Technical Highlights\r\n\r\n- **Service Workers** for offline caching and background sync\r\n- **IndexedDB** for local data storage\r\n- **WebRTC** for peer-to-peer real-time features\r\n- **Web Push API** for cross-platform notifications\r\n- **Responsive Design** with CSS Grid and Flexbox\r\n\r\n## Performance\r\n\r\n- **< 3 second** load time on 3G networks\r\n- **Lighthouse Score**: 95+ on all metrics\r\n- **Bundle Size**: < 200KB gzipped\r\n- Works on devices as old as iPhone 6\r\n\r\nThis project showcased my expertise in modern web technologies and progressive enhancement principles",
      "metadata": {
        "title": "Task Management PWA",
        "slug": "task-management-pwa",
        "summary": "Progressive Web App for team task management with offline functionality, real-time collaboration, and advanced project tracking.",
        "tags": [
          "Vue.js",
          "PWA",
          "IndexedDB",
          "Socket.io",
          "Service Workers"
        ],
        "year": 2023,
        "cover": "/images/projects/task-management.jpg",
        "links": {
          "repo": "https://github.com/suryadizhang/task-pwa",
          "live": "https://task-management-pwa.netlify.app"
        },
        "section": 2
      },
      "source": "task-management-pwa.mdx",
      "slug": "task-management-pwa",
      "tokens": [
        "key",
        "features",
        "offline",
        "first",
        "full",
        "functionality",
        "without",
        "internet",
        "connection",
        "real",
        "time",
        "sync",
        "instant",
        "updates",
        "when",
        "team",
        "members",
        "make",
        "changes",
        "cross",
        "platform",
        "works",
        "desktop",
        "mobile",
        "tablet",
        "push",
        "notifications",
        "reminders",
        "task",
        "updates",
        "drag",
        "drop",
        "intuitive",
        "kanban",
        "style",
        "task",
        "organization",
        "technical",
        "highlights",
        "service",
        "workers",
        "offline",
        "caching",
        "background",
        "sync",
        "indexeddb",
        "local",
        "data",
        "storage",
        "webrtc",
        "peer",
        "peer",
        "real",
        "time",
        "features",
        "web",
        "push",
        "api",
        "cross",
        "platform",
        "notifications",
        "responsive",
        "design",
        "with",
        "css",
        "grid",
        "flexbox",
        "performance",
        "second",
        "load",
        "time",
        "networks",
        "lighthouse",
        "score",
        "metrics",
        "bundle",
        "size",
        "200kb",
        "gzipped",
        "works",
        "devices",
        "iphone",
        "this",
        "project",
        "showcased",
        "expertise",
        "modern",
        "web",
        "technologies",
        "progressive",
        "enhancement",
        "principles"
      ]
    }
  ],
  "vocabulary": [
    "suryadi",
    "zhang",
    "software",
    "engineer",
    "full",
    "stack",
    "react",
    "python",
    "next",
    "fastapi",
    "postgres",
    "shipped",
    "live",
    "booking",
    "admin",
    "located",
    "fremont",
    "california",
    "united",
    "states",
    "with",
    "real",
    "world",
    "experience",
    "delivering",
    "responsive",
    "web",
    "apps",
    "robust",
    "apis",
    "using",
    "turn",
    "ambiguous",
    "requirements",
    "into",
    "production",
    "ready",
    "systems",
    "ship",
    "continuously",
    "work",
    "model",
    "data",
    "design",
    "rest",
    "auth",
    "pagination",
    "clear",
    "errors",
    "documented",
    "openapi",
    "build",
    "uis",
    "that",
    "perform",
    "well",
    "mobile",
    "accessible",
    "default",
    "add",
    "guardrails",
    "validation",
    "pydantic",
    "zod",
    "rate",
    "limiting",
    "logging",
    "metrics",
    "automated",
    "tests",
    "safely",
    "github",
    "actions",
    "lint",
    "unit",
    "integration",
    "preview",
    "deploys",
    "impact",
    "highlights",
    "platform",
    "typescript",
    "deployed",
    "vercel",
    "vps",
    "role",
    "based",
    "access",
    "secure",
    "deployments",
    "increased",
    "deployment",
    "frequency",
    "pipelines",
    "fewer",
    "regressions",
    "faster",
    "delivery",
    "reduced",
    "setup",
    "time",
    "event",
    "operations",
    "designing",
    "sops",
    "automation",
    "what",
    "commerce",
    "flows",
    "feel",
    "effortless",
    "strong",
    "predictable",
    "error",
    "models",
    "dashboards",
    "insights",
    "bulk",
    "confident",
    "daily",
    "releases",
    "respect",
    "users",
    "performant",
    "reliable",
    "core",
    "keywords",
    "javascript",
    "flask",
    "sqlalchemy",
    "tailwind",
    "css",
    "swagger",
    "mysql",
    "express",
    "postman",
    "insomnia",
    "render",
    "netlify",
    "cors",
    "owasp",
    "basics",
    "outside",
    "coding",
    "experimenting",
    "hibachi",
    "recipes",
    "hiking",
    "cooking",
    "basketball",
    "exploring",
    "frameworks",
    "thrive",
    "environments",
    "where",
    "curiosity",
    "collaboration",
    "shipping",
    "value",
    "come",
    "first",
    "founder",
    "lead",
    "llc",
    "jun",
    "2025",
    "present",
    "implemented",
    "caching",
    "schema",
    "improved",
    "reliability",
    "structured",
    "repos",
    "checks",
    "apprenticeship",
    "temple",
    "mar",
    "built",
    "features",
    "responsiveness",
    "endpoints",
    "service",
    "capstone",
    "app",
    "crud",
    "additional",
    "hospitality",
    "culinary",
    "multiple",
    "restaurants",
    "freelance",
    "aug",
    "2018",
    "coordinated",
    "100",
    "events",
    "checklists",
    "cut",
    "mentored",
    "staff",
    "honed",
    "leadership",
    "communication",
    "teamwork",
    "technical",
    "skills",
    "development",
    "testing",
    "pytest",
    "vitest",
    "engineering",
    "sep",
    "certificate",
    "completion",
    "economics",
    "some",
    "college",
    "degree",
    "universitas",
    "surabaya",
    "undefined",
    "micro",
    "macroeconomics",
    "statistics",
    "analytical",
    "quantitative",
    "foundations",
    "powered",
    "postgresql",
    "stripe",
    "comprehensive",
    "leverages",
    "artificial",
    "intelligence",
    "provide",
    "personalized",
    "recommendations",
    "streamline",
    "process",
    "smart",
    "suggestions",
    "user",
    "preferences",
    "history",
    "availability",
    "updates",
    "available",
    "slots",
    "services",
    "payments",
    "integrated",
    "payment",
    "processing",
    "dashboard",
    "managing",
    "bookings",
    "panel",
    "administrative",
    "interface",
    "providers",
    "implementation",
    "this",
    "project",
    "demonstrates",
    "ability",
    "complex",
    "applications",
    "modern",
    "technologies",
    "frontend",
    "router",
    "optimal",
    "performance",
    "type",
    "safety",
    "better",
    "developer",
    "hook",
    "form",
    "handling",
    "backend",
    "node",
    "api",
    "management",
    "prisma",
    "orm",
    "database",
    "jwt",
    "authentication",
    "devops",
    "docker",
    "containerization",
    "railway",
    "hosting",
    "key",
    "achievements",
    "through",
    "serving",
    "1000",
    "concurrent",
    "achieved",
    "uptime",
    "supporting",
    "device",
    "types",
    "challenges",
    "overcome",
    "biggest",
    "challenge",
    "implementing",
    "across",
    "zones",
    "while",
    "maintaining",
    "consistency",
    "solved",
    "driven",
    "architecture",
    "websockets",
    "optimistic",
    "locking",
    "learned",
    "deepened",
    "understanding",
    "scalable",
    "patterns",
    "synchronization",
    "optimization",
    "techniques",
    "analytics",
    "mongodb",
    "chart",
    "provides",
    "interactive",
    "visualizations",
    "reporting",
    "overview",
    "small",
    "medium",
    "businesses",
    "need",
    "detailed",
    "their",
    "sales",
    "customer",
    "behavior",
    "inventory",
    "without",
    "complexity",
    "enterprise",
    "solutions",
    "visualization",
    "charts",
    "showing",
    "trends",
    "conversion",
    "rates",
    "customizable",
    "drag",
    "drop",
    "widgets",
    "monitoring",
    "advanced",
    "segmentation",
    "lifetime",
    "calculations",
    "turnover",
    "analysis",
    "stock",
    "alerts",
    "comparisons",
    "different",
    "periods",
    "scheduled",
    "email",
    "reports",
    "exportable",
    "formats",
    "pdf",
    "csv",
    "excel",
    "custom",
    "alert",
    "system",
    "significant",
    "metric",
    "changes",
    "redis",
    "infrastructure",
    "aws",
    "ec2",
    "cloudwatch",
    "helped",
    "clients",
    "increase",
    "average",
    "spent",
    "manual",
    "provided",
    "actionable",
    "led",
    "50k",
    "revenue",
    "test",
    "code",
    "quality",
    "coverage",
    "jest",
    "library",
    "safe",
    "optimized",
    "lazy",
    "loading",
    "multi",
    "vendor",
    "featured",
    "marketplace",
    "product",
    "catalog",
    "shopping",
    "cart",
    "order",
    "building",
    "could",
    "handle",
    "vendors",
    "catalogs",
    "fulfillment",
    "needed",
    "scale",
    "efficiently",
    "thousands",
    "products",
    "sessions",
    "relationships",
    "class",
    "usermixin",
    "__tablename__",
    "column",
    "integer",
    "primary_key",
    "true",
    "string",
    "120",
    "unique",
    "nullable",
    "false",
    "index",
    "password_hash",
    "128",
    "first_name",
    "last_name",
    "enum",
    "is_active",
    "boolean",
    "created_at",
    "datetime",
    "utcnow",
    "addresses",
    "relationship",
    "address",
    "backref",
    "cascade",
    "delete",
    "orphan",
    "orders",
    "cart_items",
    "cartitem",
    "vendor_profile",
    "uselist",
    "def",
    "set_password",
    "self",
    "password",
    "check_password",
    "return",
    "check_password_hash",
    "generate_token",
    "expires_in",
    "3600",
    "encode",
    "user_id",
    "exp",
    "timedelta",
    "seconds",
    "current_app",
    "config",
    "secret_key",
    "algorithm",
    "hs256",
    "categories",
    "variants",
    "vendor_id",
    "foreignkey",
    "category_id",
    "name",
    "200",
    "slug",
    "250",
    "description",
    "text",
    "short_description",
    "500",
    "base_price",
    "numeric",
    "stock_quantity",
    "sku",
    "weight",
    "dimensions",
    "json",
    "is_featured",
    "updated_at",
    "onupdate",
    "images",
    "productimage",
    "productvariant",
    "reviews",
    "review",
    "search",
    "vector",
    "search_vector",
    "tsvectortype",
    "to_dict",
    "include_variants",
    "float",
    "else",
    "none",
    "average_rating",
    "get_average_rating",
    "review_count",
    "len",
    "img",
    "isoformat",
    "sum",
    "rating",
    "tracking",
    "order_number",
    "customer_id",
    "status",
    "pending",
    "confirmed",
    "delivered",
    "cancelled",
    "pricing",
    "subtotal",
    "tax_amount",
    "shipping_amount",
    "discount_amount",
    "total_amount",
    "shipping_address",
    "billing_address",
    "info",
    "payment_method",
    "payment_status",
    "paid",
    "failed",
    "refunded",
    "payment_intent_id",
    "timestamps",
    "confirmed_at",
    "shipped_at",
    "delivered_at",
    "items",
    "orderitem",
    "generate",
    "number",
    "timestamp",
    "strftime",
    "random_suffix",
    "join",
    "random",
    "choices",
    "digits",
    "ord",
    "session",
    "null",
    "guest",
    "carts",
    "session_id",
    "product_id",
    "variant_id",
    "product_variants",
    "quantity",
    "price_at_time",
    "store",
    "price",
    "when",
    "added",
    "constraints",
    "__table_args__",
    "checkconstraint",
    "uniqueconstraint",
    "business",
    "logic",
    "cartservice",
    "staticmethod",
    "add_to_cart",
    "item",
    "query",
    "raise",
    "valueerror",
    "found",
    "inactive",
    "check",
    "available_stock",
    "variant",
    "existing",
    "filter_by",
    "existing_item",
    "new_quantity",
    "only",
    "current",
    "current_price",
    "cart_item",
    "get_cart_total",
    "calculate",
    "totals",
    "tax_rate",
    "tax",
    "total",
    "item_count",
    "http",
    "post",
    "register",
    "registration",
    "login",
    "refresh",
    "token",
    "profile",
    "update",
    "list",
    "filtering",
    "create",
    "details",
    "contents",
    "remove",
    "from",
    "cancel",
    "track",
    "intent",
    "confirm",
    "webhook",
    "webhooks",
    "paymentservice",
    "__init__",
    "api_key",
    "stripe_secret_key",
    "order_id",
    "amount",
    "currency",
    "usd",
    "try",
    "paymentintent",
    "int",
    "convert",
    "cents",
    "metadata",
    "customer_email",
    "enabled",
    "commit",
    "client_secret",
    "except",
    "stripeerror",
    "logger",
    "str",
    "handle_webhook",
    "payload",
    "sig_header",
    "webhook_secret",
    "construct_event",
    "invalid",
    "signature",
    "payment_intent",
    "succeeded",
    "object",
    "elif",
    "payment_failed",
    "successful",
    "quantities",
    "send",
    "confirmation",
    "async",
    "task",
    "delay",
    "products_bp",
    "route",
    "methods",
    "search_products",
    "request",
    "args",
    "strip",
    "category",
    "min_price",
    "max_price",
    "sort_by",
    "sort",
    "relevance",
    "page",
    "per_page",
    "min",
    "base",
    "active",
    "products_query",
    "search_query",
    "split",
    "filter",
    "match",
    "range",
    "sorting",
    "price_asc",
    "order_by",
    "asc",
    "price_desc",
    "desc",
    "newest",
    "requires",
    "subquery",
    "avg_rating_subquery",
    "func",
    "avg",
    "label",
    "avg_rating",
    "group_by",
    "outerjoin",
    "nullslast",
    "ts_rank",
    "plainto_tsquery",
    "paginate",
    "error_out",
    "jsonify",
    "pages",
    "has_next",
    "has_prev",
    "filters",
    "exception",
    "workflow",
    "creation",
    "orders_bp",
    "jwt_required",
    "create_order",
    "current_user_id",
    "get_jwt_identity",
    "get_json",
    "validate",
    "required",
    "fields",
    "required_fields",
    "field",
    "400",
    "empty",
    "start",
    "transaction",
    "begin",
    "cart_totals",
    "flush",
    "verify",
    "still",
    "rollback",
    "unknown",
    "longer",
    "order_item",
    "payment_service",
    "201",
    "results",
    "response",
    "times",
    "150ms",
    "listings",
    "300ms",
    "throughput",
    "2000",
    "during",
    "peak",
    "traffic",
    "efficiency",
    "queries",
    "proper",
    "indexing",
    "security",
    "control",
    "pci",
    "compliant",
    "input",
    "sanitization",
    "abuse",
    "prevention",
    "accuracy",
    "level",
    "support",
    "onboarded",
    "100k",
    "processed",
    "securely",
    "improvement",
    "scalability",
    "background",
    "tasks",
    "celery",
    "notifications",
    "versioning",
    "backward",
    "compatibility",
    "concurrency",
    "inventoryservice",
    "reserve_inventory",
    "order_items",
    "reserve",
    "row",
    "lock",
    "with_for_update",
    "insufficient",
    "reserved_quantity",
    "reservation",
    "inventoryerror",
    "release_reservation",
    "release",
    "reserved",
    "strategy",
    "flask_caching",
    "import",
    "cache",
    "productservice",
    "memoize",
    "timeout",
    "300",
    "minutes",
    "limit",
    "600",
    "cached",
    "options",
    "joinedload",
    "invalidate",
    "related",
    "delete_memoized",
    "__name__",
    "app_context",
    "email_service",
    "emailservice",
    "update_search_index",
    "search_content",
    "to_tsvector",
    "english",
    "start_date",
    "end_date",
    "report",
    "between",
    "report_data",
    "total_orders",
    "total_revenue",
    "top_products",
    "get_top_products",
    "save",
    "save_sales_report",
    "suite",
    "workflows",
    "client",
    "auth_headers",
    "sample_products",
    "complete",
    "purchase",
    "headers",
    "assert",
    "status_code",
    "cart_data",
    "order_data",
    "john",
    "doe",
    "123",
    "main",
    "city",
    "anytown",
    "state",
    "zip_code",
    "12345",
    "country",
    "card",
    "order_response",
    "under",
    "threading",
    "initial_stock",
    "add_to_cart_worker",
    "append",
    "threads",
    "trying",
    "same",
    "thread",
    "target",
    "should",
    "succeed",
    "success_count",
    "count",
    "lessons",
    "crucial",
    "retry",
    "persistence",
    "authenticated",
    "best",
    "practices",
    "never",
    "sensitive",
    "information",
    "layer",
    "prevent",
    "critical",
    "benefit",
    "heavily",
    "abandonment",
    "persistent",
    "dramatically",
    "improves",
    "discovery",
    "comes",
    "devices",
    "future",
    "enhancements",
    "recommendation",
    "engine",
    "international",
    "market",
    "expansion",
    "subscription",
    "recurring",
    "billing",
    "warehouse",
    "location",
    "routing",
    "compliance",
    "gdpr",
    "privacy",
    "right",
    "deletion",
    "dss",
    "certification",
    "enhanced",
    "standards",
    "fraud",
    "detection",
    "risk",
    "assessment",
    "factor",
    "account",
    "framework",
    "optimize",
    "mechanic",
    "shop",
    "restful",
    "auto",
    "repair",
    "automotive",
    "records",
    "appointments",
    "professional",
    "shops",
    "manage",
    "customers",
    "vehicles",
    "entities",
    "integrity",
    "providing",
    "offering",
    "documentation",
    "structure",
    "phone",
    "vehicle",
    "owner",
    "appointment",
    "vehicle_count",
    "make",
    "year",
    "vin",
    "license_plate",
    "color",
    "mileage",
    "service_records",
    "servicerecord",
    "validates",
    "validate_year",
    "current_year",
    "1900",
    "must",
    "validate_vin",
    "exactly",
    "characters",
    "upper",
    "authorization",
    "authservice",
    "hours",
    "iat",
    "verify_token",
    "decode",
    "algorithms",
    "authenticationerror",
    "expired",
    "invalidtokenerror",
    "decorator",
    "token_required",
    "wraps",
    "decorated",
    "kwargs",
    "header",
    "auth_header",
    "bearer",
    "indexerror",
    "format",
    "401",
    "missing",
    "current_user_role",
    "record",
    "200ms",
    "requests",
    "minute",
    "prevents",
    "sql",
    "injection",
    "xss",
    "attacks",
    "permissions",
    "levels",
    "foreign",
    "transactions",
    "collection",
    "messages",
    "helpful",
    "feedback",
    "consistent",
    "responses",
    "standardized",
    "benefits",
    "endpoint",
    "normalization",
    "modular",
    "blueprints",
    "organized",
    "environment",
    "configs",
    "easy",
    "customers_bp",
    "create_customer",
    "duplicate",
    "existing_customer",
    "already",
    "exists",
    "409",
    "lower",
    "message",
    "created",
    "successfully",
    "creating",
    "internal",
    "server",
    "table",
    "primary",
    "auto_increment",
    "varchar",
    "current_timestamp",
    "references",
    "idx_customer_id",
    "idx_vin",
    "composite",
    "vehicle_id",
    "service_type_id",
    "cost",
    "decimal",
    "service_date",
    "date",
    "mileage_at_service",
    "technician_notes",
    "in_progress",
    "completed",
    "service_types",
    "idx_vehicle_service",
    "idx_status",
    "fixture",
    "sqlite",
    "memory",
    "test_client",
    "create_all",
    "yield",
    "drop_all",
    "auth_token",
    "valid",
    "customer_data",
    "example",
    "com",
    "555",
    "4567",
    "usa",
    "vehicle_data",
    "toyota",
    "camry",
    "2020",
    "1hgbh41jxmn109186",
    "decorators",
    "validate_json",
    "decorated_function",
    "is_json",
    "content",
    "application",
    "body",
    "cannot",
    "validate_email",
    "pattern",
    "validate_phone",
    "digits_only",
    "sub",
    "flask_restx",
    "resource",
    "version",
    "title",
    "doc",
    "docs",
    "customer_model",
    "readonly",
    "last",
    "home",
    "matters",
    "standard",
    "reduce",
    "essential",
    "large",
    "datasets",
    "efficient",
    "improve",
    "everything",
    "trust",
    "throttling",
    "audit",
    "keys",
    "enforce",
    "indexes",
    "strategic",
    "bad",
    "graphql",
    "more",
    "flexible",
    "capabilities",
    "websocket",
    "elasticsearch",
    "file",
    "uploads",
    "photos",
    "documents",
    "connect",
    "excellent",
    "seamless",
    "end",
    "catering",
    "featuring",
    "actual",
    "serve",
    "replace",
    "coordination",
    "high",
    "checking",
    "const",
    "checkavailability",
    "duration",
    "await",
    "fetch",
    "method",
    "stringify",
    "bookingform",
    "setavailability",
    "usestate",
    "availabilitydata",
    "onsubmit",
    "handlebooking",
    "classname",
    "space",
    "datetimepicker",
    "onchange",
    "handledatechange",
    "mindate",
    "serviceselector",
    "setselectedservices",
    "paymentsection",
    "calculatetotal",
    "onsuccess",
    "response_model",
    "bookingresponse",
    "limiter",
    "create_booking",
    "bookingcreate",
    "depends",
    "get_session",
    "current_user",
    "get_current_user",
    "check_availability",
    "httpexception",
    "detail",
    "slot",
    "atomic",
    "db_booking",
    "dict",
    "from_orm",
    "requires_role",
    "get_all_bookings",
    "select",
    "execute",
    "offset",
    "scalars",
    "eliminated",
    "texts",
    "common",
    "mistakes",
    "15k",
    "loads",
    "bundle",
    "size",
    "perfect",
    "zero",
    "breaches",
    "velocity",
    "enables",
    "rapid",
    "iteration",
    "clean",
    "spec",
    "issues",
    "flow",
    "dynamic",
    "double",
    "customization",
    "happen",
    "verification",
    "rotation",
    "spam",
    "validators",
    "view",
    "edit",
    "calendar",
    "visual",
    "scheduling",
    "contact",
    "popular",
    "deep",
    "dive",
    "optimizations",
    "setbookings",
    "createbooking",
    "bookingdata",
    "optimistically",
    "tempid",
    "crypto",
    "randomuuid",
    "optimisticbooking",
    "prev",
    "result",
    "temp",
    "map",
    "catch",
    "throw",
    "uuid",
    "gen_random_uuid",
    "event_date",
    "guest_count",
    "jsonb",
    "booking_status",
    "idx_bookings_date",
    "availability_slots",
    "is_available",
    "mvp",
    "basic",
    "invaluable",
    "most",
    "phones",
    "accordingly",
    "source",
    "plan",
    "backwards",
    "early",
    "scaling",
    "set",
    "before",
    "them",
    "backup",
    "backups",
    "saved",
    "once",
    "good",
    "accelerate",
    "onboarding",
    "debugging",
    "pwa",
    "vue",
    "indexeddb",
    "socket",
    "workers",
    "progressive",
    "teams",
    "projects",
    "offline",
    "functionality",
    "problem",
    "many",
    "struggle",
    "tools",
    "don",
    "have",
    "poor",
    "experiences",
    "those",
    "native",
    "like",
    "works",
    "anywhere",
    "anytime",
    "internet",
    "connection",
    "sync",
    "instant",
    "team",
    "members",
    "cross",
    "desktop",
    "tablet",
    "push",
    "reminders",
    "intuitive",
    "kanban",
    "style",
    "organization",
    "local",
    "storage",
    "webrtc",
    "peer",
    "grid",
    "flexbox",
    "second",
    "load",
    "networks",
    "lighthouse",
    "score",
    "200kb",
    "gzipped",
    "iphone",
    "showcased",
    "expertise",
    "enhancement",
    "principles"
  ],
  "idf": {
    "100": 2.7300291078209855,
    "120": 4.927253685157205,
    "123": 4.23410650459726,
    "128": 4.927253685157205,
    "200": 3.3178157727231046,
    "201": 3.3178157727231046,
    "250": 4.927253685157205,
    "300": 4.927253685157205,
    "400": 2.847812143477369,
    "401": 4.23410650459726,
    "409": 4.927253685157205,
    "500": 3.5409593240373143,
    "555": 4.927253685157205,
    "600": 4.927253685157205,
    "1000": 4.23410650459726,
    "1900": 4.23410650459726,
    "2000": 4.927253685157205,
    "2018": 4.927253685157205,
    "2020": 4.927253685157205,
    "2025": 3.3178157727231046,
    "3600": 4.927253685157205,
    "4567": 4.927253685157205,
    "12345": 4.927253685157205,
    "suryadi": 4.927253685157205,
    "zhang": 4.927253685157205,
    "software": 3.828641396489095,
    "engineer": 4.23410650459726,
    "full": 2.0940403411009885,
    "stack": 2.847812143477369,
    "react": 2.9813435361018916,
    "python": 1.8827312474337816,
    "next": 2.624668592163159,
    "fastapi": 2.847812143477369,
    "postgres": 2.847812143477369,
    "shipped": 3.828641396489095,
    "live": 2.847812143477369,
    "booking": 1.9315214116032138,
    "admin": 2.847812143477369,
    "located": 4.927253685157205,
    "fremont": 4.927253685157205,
    "california": 4.927253685157205,
    "united": 4.927253685157205,
    "states": 4.927253685157205,
    "with": 0.9382696385929302,
    "real": 1.9315214116032138,
    "world": 4.23410650459726,
    "experience": 2.624668592163159,
    "delivering": 4.927253685157205,
    "responsive": 2.9813435361018916,
    "web": 3.5409593240373143,
    "apps": 4.927253685157205,
    "robust": 3.1354942159291497,
    "apis": 4.23410650459726,
    "using": 4.927253685157205,
    "turn": 4.927253685157205,
    "ambiguous": 4.927253685157205,
    "requirements": 4.927253685157205,
    "into": 4.23410650459726,
    "production": 3.5409593240373143,
    "ready": 3.5409593240373143,
    "systems": 4.23410650459726,
    "ship": 4.927253685157205,
    "continuously": 4.927253685157205,
    "work": 4.23410650459726,
    "model": 2.624668592163159,
    "data": 1.6314168191528755,
    "design": 2.7300291078209855,
    "rest": 3.828641396489095,
    "auth": 3.3178157727231046,
    "pagination": 3.3178157727231046,
    "clear": 3.3178157727231046,
    "errors": 3.828641396489095,
    "documented": 4.23410650459726,
    "openapi": 2.9813435361018916,
    "build": 4.23410650459726,
    "uis": 4.927253685157205,
    "that": 2.9813435361018916,
    "perform": 4.927253685157205,
    "well": 4.927253685157205,
    "mobile": 2.9813435361018916,
    "accessible": 4.927253685157205,
    "default": 2.529358412358834,
    "add": 2.362304327695668,
    "guardrails": 4.927253685157205,
    "validation": 2.03688192726104,
    "pydantic": 4.23410650459726,
    "zod": 4.23410650459726,
    "rate": 2.847812143477369,
    "limiting": 2.9813435361018916,
    "logging": 3.828641396489095,
    "metrics": 3.3178157727231046,
    "automated": 2.9813435361018916,
    "tests": 3.5409593240373143,
    "safely": 4.927253685157205,
    "github": 3.5409593240373143,
    "actions": 3.5409593240373143,
    "lint": 4.927253685157205,
    "unit": 4.23410650459726,
    "integration": 2.624668592163159,
    "preview": 4.927253685157205,
    "deploys": 4.927253685157205,
    "impact": 2.9813435361018916,
    "highlights": 3.5409593240373143,
    "platform": 2.362304327695668,
    "typescript": 2.847812143477369,
    "deployed": 4.927253685157205,
    "vercel": 3.5409593240373143,
    "vps": 4.23410650459726,
    "role": 2.847812143477369,
    "based": 2.9813435361018916,
    "access": 2.847812143477369,
    "secure": 2.362304327695668,
    "deployments": 4.23410650459726,
    "increased": 4.927253685157205,
    "deployment": 3.1354942159291497,
    "frequency": 4.927253685157205,
    "pipelines": 4.927253685157205,
    "fewer": 4.23410650459726,
    "regressions": 4.927253685157205,
    "faster": 3.828641396489095,
    "delivery": 4.927253685157205,
    "reduced": 3.3178157727231046,
    "setup": 3.828641396489095,
    "time": 1.9315214116032138,
    "event": 3.1354942159291497,
    "operations": 2.847812143477369,
    "designing": 4.927253685157205,
    "sops": 4.23410650459726,
    "automation": 4.927253685157205,
    "what": 3.828641396489095,
    "commerce": 2.7300291078209855,
    "flows": 4.927253685157205,
    "feel": 4.927253685157205,
    "effortless": 4.927253685157205,
    "strong": 4.927253685157205,
    "predictable": 4.23410650459726,
    "error": 1.6314168191528755,
    "models": 3.5409593240373143,
    "dashboards": 3.828641396489095,
    "insights": 3.3178157727231046,
    "bulk": 4.927253685157205,
    "confident": 4.927253685157205,
    "daily": 4.23410650459726,
    "releases": 4.23410650459726,
    "respect": 4.927253685157205,
    "users": 2.529358412358834,
    "performant": 4.927253685157205,
    "reliable": 4.927253685157205,
    "core": 3.828641396489095,
    "keywords": 4.927253685157205,
    "javascript": 4.927253685157205,
    "flask": 2.624668592163159,
    "sqlalchemy": 3.5409593240373143,
    "tailwind": 3.3178157727231046,
    "css": 3.3178157727231046,
    "swagger": 3.5409593240373143,
    "mysql": 3.828641396489095,
    "express": 3.828641396489095,
    "postman": 4.23410650459726,
    "insomnia": 4.927253685157205,
    "render": 4.927253685157205,
    "netlify": 4.927253685157205,
    "cors": 4.927253685157205,
    "owasp": 4.927253685157205,
    "basics": 4.927253685157205,
    "outside": 4.927253685157205,
    "coding": 3.828641396489095,
    "experimenting": 4.927253685157205,
    "hibachi": 3.1354942159291497,
    "recipes": 4.927253685157205,
    "hiking": 4.927253685157205,
    "cooking": 4.927253685157205,
    "basketball": 4.927253685157205,
    "exploring": 4.927253685157205,
    "frameworks": 4.927253685157205,
    "thrive": 4.927253685157205,
    "environments": 4.23410650459726,
    "where": 4.23410650459726,
    "curiosity": 4.927253685157205,
    "collaboration": 4.23410650459726,
    "shipping": 4.927253685157205,
    "value": 4.23410650459726,
    "come": 4.927253685157205,
    "first": 2.529358412358834,
    "founder": 4.927253685157205,
    "lead": 4.927253685157205,
    "llc": 3.5409593240373143,
    "jun": 4.23410650459726,
    "present": 4.23410650459726,
    "implemented": 3.828641396489095,
    "caching": 2.624668592163159,
    "schema": 3.828641396489095,
    "improved": 4.23410650459726,
    "reliability": 3.3178157727231046,
    "structured": 4.927253685157205,
    "repos": 4.927253685157205,
    "checks": 4.927253685157205,
    "apprenticeship": 4.927253685157205,
    "temple": 4.23410650459726,
    "mar": 4.23410650459726,
    "built": 2.7300291078209855,
    "features": 2.529358412358834,
    "responsiveness": 4.23410650459726,
    "endpoints": 3.5409593240373143,
    "service": 2.362304327695668,
    "capstone": 4.23410650459726,
    "app": 2.624668592163159,
    "crud": 3.1354942159291497,
    "additional": 4.23410650459726,
    "hospitality": 4.927253685157205,
    "culinary": 4.927253685157205,
    "multiple": 3.1354942159291497,
    "restaurants": 4.927253685157205,
    "freelance": 4.927253685157205,
    "aug": 4.927253685157205,
    "coordinated": 4.927253685157205,
    "events": 3.5409593240373143,
    "checklists": 4.927253685157205,
    "cut": 4.927253685157205,
    "mentored": 4.927253685157205,
    "staff": 4.927253685157205,
    "honed": 4.927253685157205,
    "leadership": 4.927253685157205,
    "communication": 4.927253685157205,
    "teamwork": 4.927253685157205,
    "technical": 2.4423470353692043,
    "skills": 4.927253685157205,
    "development": 3.1354942159291497,
    "testing": 2.9813435361018916,
    "pytest": 4.23410650459726,
    "vitest": 4.927253685157205,
    "engineering": 4.927253685157205,
    "sep": 4.927253685157205,
    "certificate": 4.927253685157205,
    "completion": 4.23410650459726,
    "economics": 4.927253685157205,
    "some": 4.927253685157205,
    "college": 4.927253685157205,
    "degree": 4.927253685157205,
    "universitas": 4.927253685157205,
    "surabaya": 4.927253685157205,
    "undefined": 3.5409593240373143,
    "micro": 4.927253685157205,
    "macroeconomics": 4.927253685157205,
    "statistics": 4.927253685157205,
    "analytical": 4.927253685157205,
    "quantitative": 4.927253685157205,
    "foundations": 4.927253685157205,
    "powered": 3.3178157727231046,
    "postgresql": 3.3178157727231046,
    "stripe": 2.624668592163159,
    "comprehensive": 2.1546649629174235,
    "leverages": 4.927253685157205,
    "artificial": 4.927253685157205,
    "intelligence": 4.23410650459726,
    "provide": 4.927253685157205,
    "personalized": 4.927253685157205,
    "recommendations": 3.5409593240373143,
    "streamline": 4.927253685157205,
    "process": 3.828641396489095,
    "smart": 4.23410650459726,
    "suggestions": 4.927253685157205,
    "user": 2.2881963555419462,
    "preferences": 4.23410650459726,
    "history": 3.828641396489095,
    "availability": 2.624668592163159,
    "updates": 2.9813435361018916,
    "available": 2.847812143477369,
    "slots": 4.927253685157205,
    "services": 2.9813435361018916,
    "payments": 2.7300291078209855,
    "integrated": 4.927253685157205,
    "payment": 2.2192034840549946,
    "processing": 2.529358412358834,
    "dashboard": 2.9813435361018916,
    "managing": 4.23410650459726,
    "bookings": 2.847812143477369,
    "panel": 4.927253685157205,
    "administrative": 4.927253685157205,
    "interface": 4.23410650459726,
    "providers": 4.927253685157205,
    "implementation": 4.23410650459726,
    "this": 2.847812143477369,
    "project": 3.5409593240373143,
    "demonstrates": 3.5409593240373143,
    "ability": 4.927253685157205,
    "complex": 3.3178157727231046,
    "applications": 4.23410650459726,
    "modern": 3.828641396489095,
    "technologies": 4.23410650459726,
    "frontend": 2.9813435361018916,
    "router": 4.927253685157205,
    "optimal": 4.927253685157205,
    "performance": 2.362304327695668,
    "type": 2.847812143477369,
    "safety": 4.927253685157205,
    "better": 4.23410650459726,
    "developer": 3.828641396489095,
    "hook": 4.927253685157205,
    "form": 3.5409593240373143,
    "handling": 2.624668592163159,
    "backend": 2.7300291078209855,
    "node": 4.23410650459726,
    "api": 1.4932664806720584,
    "management": 1.8362112317988888,
    "prisma": 4.927253685157205,
    "orm": 4.927253685157205,
    "database": 2.4423470353692043,
    "jwt": 2.529358412358834,
    "authentication": 2.362304327695668,
    "devops": 4.23410650459726,
    "docker": 3.828641396489095,
    "containerization": 4.927253685157205,
    "railway": 4.927253685157205,
    "hosting": 4.927253685157205,
    "key": 2.529358412358834,
    "achievements": 4.23410650459726,
    "through": 4.927253685157205,
    "serving": 4.23410650459726,
    "concurrent": 3.5409593240373143,
    "achieved": 4.927253685157205,
    "uptime": 4.23410650459726,
    "supporting": 3.828641396489095,
    "device": 4.927253685157205,
    "types": 4.927253685157205,
    "challenges": 4.927253685157205,
    "overcome": 4.927253685157205,
    "biggest": 4.927253685157205,
    "challenge": 3.5409593240373143,
    "implementing": 4.927253685157205,
    "across": 3.5409593240373143,
    "zones": 4.927253685157205,
    "while": 3.3178157727231046,
    "maintaining": 3.3178157727231046,
    "consistency": 3.828641396489095,
    "solved": 4.23410650459726,
    "driven": 4.927253685157205,
    "architecture": 2.847812143477369,
    "websockets": 4.927253685157205,
    "optimistic": 3.828641396489095,
    "locking": 4.23410650459726,
    "learned": 3.5409593240373143,
    "deepened": 4.927253685157205,
    "understanding": 4.927253685157205,
    "scalable": 3.828641396489095,
    "patterns": 3.828641396489095,
    "synchronization": 4.927253685157205,
    "optimization": 3.828641396489095,
    "techniques": 4.927253685157205,
    "analytics": 3.1354942159291497,
    "mongodb": 4.23410650459726,
    "chart": 4.23410650459726,
    "provides": 4.927253685157205,
    "interactive": 3.828641396489095,
    "visualizations": 4.927253685157205,
    "reporting": 3.5409593240373143,
    "overview": 4.927253685157205,
    "small": 4.927253685157205,
    "medium": 4.927253685157205,
    "businesses": 4.927253685157205,
    "need": 3.828641396489095,
    "detailed": 4.927253685157205,
    "their": 4.927253685157205,
    "sales": 3.5409593240373143,
    "customer": 1.791759469228055,
    "behavior": 4.23410650459726,
    "inventory": 2.529358412358834,
    "without": 4.23410650459726,
    "complexity": 3.828641396489095,
    "enterprise": 4.23410650459726,
    "solutions": 4.927253685157205,
    "visualization": 4.927253685157205,
    "charts": 4.927253685157205,
    "showing": 4.927253685157205,
    "trends": 4.927253685157205,
    "conversion": 3.3178157727231046,
    "rates": 3.828641396489095,
    "customizable": 4.927253685157205,
    "drag": 4.23410650459726,
    "drop": 4.23410650459726,
    "widgets": 4.927253685157205,
    "monitoring": 3.828641396489095,
    "advanced": 2.9813435361018916,
    "segmentation": 4.927253685157205,
    "lifetime": 4.927253685157205,
    "calculations": 4.927253685157205,
    "turnover": 4.927253685157205,
    "analysis": 4.927253685157205,
    "stock": 2.624668592163159,
    "alerts": 3.828641396489095,
    "comparisons": 4.927253685157205,
    "different": 4.927253685157205,
    "periods": 4.927253685157205,
    "scheduled": 4.23410650459726,
    "email": 1.9828147059907644,
    "reports": 4.927253685157205,
    "exportable": 4.927253685157205,
    "formats": 4.23410650459726,
    "pdf": 4.927253685157205,
    "csv": 4.927253685157205,
    "excel": 4.927253685157205,
    "custom": 3.828641396489095,
    "alert": 4.927253685157205,
    "system": 3.1354942159291497,
    "significant": 4.927253685157205,
    "metric": 4.927253685157205,
    "changes": 4.23410650459726,
    "redis": 3.5409593240373143,
    "infrastructure": 4.927253685157205,
    "aws": 4.927253685157205,
    "ec2": 4.927253685157205,
    "cloudwatch": 4.927253685157205,
    "helped": 4.927253685157205,
    "clients": 4.927253685157205,
    "increase": 4.23410650459726,
    "average": 4.23410650459726,
    "spent": 4.927253685157205,
    "manual": 3.828641396489095,
    "provided": 4.23410650459726,
    "actionable": 4.23410650459726,
    "led": 4.927253685157205,
    "50k": 4.927253685157205,
    "revenue": 3.828641396489095,
    "test": 2.9813435361018916,
    "code": 4.23410650459726,
    "quality": 4.927253685157205,
    "coverage": 4.23410650459726,
    "jest": 4.927253685157205,
    "library": 4.927253685157205,
    "safe": 4.927253685157205,
    "optimized": 3.5409593240373143,
    "lazy": 2.9813435361018916,
    "loading": 4.927253685157205,
    "multi": 3.3178157727231046,
    "vendor": 2.9813435361018916,
    "featured": 3.828641396489095,
    "marketplace": 4.23410650459726,
    "product": 1.4307461236907244,
    "catalog": 4.23410650459726,
    "shopping": 3.5409593240373143,
    "cart": 2.03688192726104,
    "order": 1.5950491749820008,
    "building": 4.23410650459726,
    "could": 4.23410650459726,
    "handle": 3.3178157727231046,
    "vendors": 3.5409593240373143,
    "catalogs": 4.23410650459726,
    "fulfillment": 4.23410650459726,
    "needed": 3.828641396489095,
    "scale": 4.927253685157205,
    "efficiently": 4.927253685157205,
    "thousands": 4.927253685157205,
    "products": 2.847812143477369,
    "sessions": 4.927253685157205,
    "relationships": 2.624668592163159,
    "class": 2.529358412358834,
    "usermixin": 4.927253685157205,
    "__tablename__": 3.1354942159291497,
    "column": 2.2192034840549946,
    "integer": 2.529358412358834,
    "primary_key": 3.1354942159291497,
    "true": 1.791759469228055,
    "string": 2.362304327695668,
    "unique": 2.847812143477369,
    "nullable": 2.529358412358834,
    "false": 2.2881963555419462,
    "index": 2.9813435361018916,
    "password_hash": 3.828641396489095,
    "first_name": 2.847812143477369,
    "last_name": 2.847812143477369,
    "enum": 3.5409593240373143,
    "is_active": 2.9813435361018916,
    "boolean": 4.23410650459726,
    "created_at": 2.362304327695668,
    "datetime": 2.4423470353692043,
    "utcnow": 2.4423470353692043,
    "addresses": 3.828641396489095,
    "relationship": 2.847812143477369,
    "address": 2.847812143477369,
    "backref": 3.1354942159291497,
    "cascade": 3.1354942159291497,
    "delete": 2.7300291078209855,
    "orphan": 3.3178157727231046,
    "orders": 3.1354942159291497,
    "cart_items": 2.7300291078209855,
    "cartitem": 2.847812143477369,
    "vendor_profile": 4.927253685157205,
    "uselist": 4.927253685157205,
    "def": 1.3437347467010947,
    "set_password": 4.927253685157205,
    "self": 2.0940403411009885,
    "password": 4.23410650459726,
    "check_password": 4.927253685157205,
    "return": 1.289667525430819,
    "check_password_hash": 4.927253685157205,
    "generate_token": 4.23410650459726,
    "expires_in": 4.927253685157205,
    "encode": 4.23410650459726,
    "user_id": 2.362304327695668,
    "exp": 4.23410650459726,
    "timedelta": 4.23410650459726,
    "seconds": 4.927253685157205,
    "current_app": 2.529358412358834,
    "config": 3.3178157727231046,
    "secret_key": 4.23410650459726,
    "algorithm": 4.23410650459726,
    "hs256": 4.23410650459726,
    "categories": 3.828641396489095,
    "variants": 3.3178157727231046,
    "vendor_id": 3.5409593240373143,
    "foreignkey": 3.3178157727231046,
    "category_id": 3.828641396489095,
    "name": 2.847812143477369,
    "slug": 4.23410650459726,
    "description": 2.9813435361018916,
    "text": 2.624668592163159,
    "short_description": 4.23410650459726,
    "base_price": 3.1354942159291497,
    "numeric": 3.5409593240373143,
    "stock_quantity": 2.362304327695668,
    "sku": 3.5409593240373143,
    "weight": 4.23410650459726,
    "dimensions": 4.23410650459726,
    "json": 2.529358412358834,
    "is_featured": 3.828641396489095,
    "updated_at": 3.1354942159291497,
    "onupdate": 4.23410650459726,
    "images": 3.828641396489095,
    "productimage": 4.927253685157205,
    "productvariant": 3.1354942159291497,
    "reviews": 3.5409593240373143,
    "review": 3.5409593240373143,
    "search": 2.4423470353692043,
    "vector": 4.23410650459726,
    "search_vector": 3.5409593240373143,
    "tsvectortype": 4.927253685157205,
    "to_dict": 2.847812143477369,
    "include_variants": 3.828641396489095,
    "float": 3.3178157727231046,
    "else": 2.7300291078209855,
    "none": 2.9813435361018916,
    "average_rating": 4.927253685157205,
    "get_average_rating": 4.23410650459726,
    "review_count": 4.927253685157205,
    "len": 2.847812143477369,
    "img": 4.927253685157205,
    "isoformat": 4.23410650459726,
    "sum": 3.828641396489095,
    "rating": 4.23410650459726,
    "tracking": 3.828641396489095,
    "order_number": 3.828641396489095,
    "customer_id": 3.1354942159291497,
    "status": 2.847812143477369,
    "pending": 3.3178157727231046,
    "confirmed": 4.23410650459726,
    "delivered": 4.23410650459726,
    "cancelled": 3.828641396489095,
    "pricing": 4.23410650459726,
    "subtotal": 3.3178157727231046,
    "tax_amount": 3.5409593240373143,
    "shipping_amount": 4.23410650459726,
    "discount_amount": 4.927253685157205,
    "total_amount": 3.3178157727231046,
    "shipping_address": 3.5409593240373143,
    "billing_address": 3.5409593240373143,
    "info": 4.23410650459726,
    "payment_method": 3.5409593240373143,
    "payment_status": 3.828641396489095,
    "paid": 4.23410650459726,
    "failed": 3.5409593240373143,
    "refunded": 4.927253685157205,
    "payment_intent_id": 3.5409593240373143,
    "timestamps": 4.927253685157205,
    "confirmed_at": 4.23410650459726,
    "shipped_at": 4.927253685157205,
    "delivered_at": 4.927253685157205,
    "items": 2.362304327695668,
    "orderitem": 3.828641396489095,
    "generate": 4.23410650459726,
    "number": 3.828641396489095,
    "timestamp": 3.3178157727231046,
    "strftime": 4.927253685157205,
    "random_suffix": 4.927253685157205,
    "join": 3.5409593240373143,
    "random": 4.927253685157205,
    "choices": 4.927253685157205,
    "digits": 4.927253685157205,
    "ord": 4.927253685157205,
    "session": 1.8362112317988888,
    "null": 3.5409593240373143,
    "guest": 3.828641396489095,
    "carts": 4.23410650459726,
    "session_id": 3.3178157727231046,
    "product_id": 2.1546649629174235,
    "variant_id": 2.529358412358834,
    "product_variants": 4.927253685157205,
    "quantity": 2.1546649629174235,
    "price_at_time": 3.5409593240373143,
    "store": 3.828641396489095,
    "price": 3.5409593240373143,
    "when": 3.828641396489095,
    "added": 4.927253685157205,
    "constraints": 3.3178157727231046,
    "__table_args__": 4.927253685157205,
    "checkconstraint": 4.927253685157205,
    "uniqueconstraint": 4.927253685157205,
    "business": 3.5409593240373143,
    "logic": 3.828641396489095,
    "cartservice": 4.23410650459726,
    "staticmethod": 2.7300291078209855,
    "add_to_cart": 4.927253685157205,
    "item": 2.4423470353692043,
    "query": 1.5950491749820008,
    "raise": 2.362304327695668,
    "valueerror": 3.1354942159291497,
    "found": 4.23410650459726,
    "inactive": 4.927253685157205,
    "check": 2.9813435361018916,
    "available_stock": 3.3178157727231046,
    "variant": 3.1354942159291497,
    "existing": 4.927253685157205,
    "filter_by": 2.529358412358834,
    "existing_item": 3.828641396489095,
    "new_quantity": 4.23410650459726,
    "only": 3.3178157727231046,
    "current": 4.927253685157205,
    "current_price": 4.23410650459726,
    "cart_item": 3.1354942159291497,
    "get_cart_total": 4.23410650459726,
    "calculate": 4.23410650459726,
    "totals": 4.23410650459726,
    "tax_rate": 4.927253685157205,
    "tax": 4.927253685157205,
    "total": 3.1354942159291497,
    "item_count": 3.828641396489095,
    "http": 4.23410650459726,
    "post": 2.529358412358834,
    "register": 4.23410650459726,
    "registration": 4.23410650459726,
    "login": 4.23410650459726,
    "refresh": 3.828641396489095,
    "token": 2.7300291078209855,
    "profile": 4.927253685157205,
    "update": 3.1354942159291497,
    "list": 4.23410650459726,
    "filtering": 4.23410650459726,
    "create": 2.1546649629174235,
    "details": 4.23410650459726,
    "contents": 4.23410650459726,
    "remove": 4.23410650459726,
    "from": 2.847812143477369,
    "cancel": 4.23410650459726,
    "track": 4.23410650459726,
    "intent": 3.3178157727231046,
    "confirm": 4.927253685157205,
    "webhook": 3.5409593240373143,
    "webhooks": 4.927253685157205,
    "paymentservice": 4.23410650459726,
    "__init__": 4.927253685157205,
    "api_key": 4.927253685157205,
    "stripe_secret_key": 4.927253685157205,
    "order_id": 3.3178157727231046,
    "amount": 3.828641396489095,
    "currency": 3.828641396489095,
    "usd": 4.927253685157205,
    "try": 2.529358412358834,
    "paymentintent": 4.927253685157205,
    "int": 3.3178157727231046,
    "convert": 4.927253685157205,
    "cents": 4.927253685157205,
    "metadata": 4.927253685157205,
    "customer_email": 4.927253685157205,
    "enabled": 4.927253685157205,
    "commit": 2.847812143477369,
    "client_secret": 4.927253685157205,
    "except": 2.529358412358834,
    "stripeerror": 4.927253685157205,
    "logger": 2.9813435361018916,
    "str": 2.7300291078209855,
    "handle_webhook": 4.927253685157205,
    "payload": 3.1354942159291497,
    "sig_header": 4.927253685157205,
    "webhook_secret": 4.927253685157205,
    "construct_event": 4.927253685157205,
    "invalid": 3.828641396489095,
    "signature": 4.927253685157205,
    "payment_intent": 3.3178157727231046,
    "succeeded": 4.927253685157205,
    "object": 4.23410650459726,
    "elif": 3.5409593240373143,
    "payment_failed": 4.927253685157205,
    "successful": 4.23410650459726,
    "quantities": 4.927253685157205,
    "send": 3.5409593240373143,
    "confirmation": 3.5409593240373143,
    "async": 2.847812143477369,
    "task": 2.847812143477369,
    "delay": 4.927253685157205,
    "products_bp": 4.927253685157205,
    "route": 3.828641396489095,
    "methods": 3.828641396489095,
    "search_products": 4.927253685157205,
    "request": 2.847812143477369,
    "args": 3.1354942159291497,
    "strip": 3.828641396489095,
    "category": 3.5409593240373143,
    "min_price": 3.828641396489095,
    "max_price": 3.3178157727231046,
    "sort_by": 3.5409593240373143,
    "sort": 4.927253685157205,
    "relevance": 3.5409593240373143,
    "page": 3.1354942159291497,
    "per_page": 3.828641396489095,
    "min": 4.927253685157205,
    "base": 4.927253685157205,
    "active": 4.927253685157205,
    "products_query": 3.3178157727231046,
    "search_query": 4.23410650459726,
    "split": 4.23410650459726,
    "filter": 3.828641396489095,
    "match": 4.23410650459726,
    "range": 4.23410650459726,
    "sorting": 4.23410650459726,
    "price_asc": 4.927253685157205,
    "order_by": 3.828641396489095,
    "asc": 4.927253685157205,
    "price_desc": 4.927253685157205,
    "desc": 3.5409593240373143,
    "newest": 4.927253685157205,
    "requires": 4.23410650459726,
    "subquery": 4.927253685157205,
    "avg_rating_subquery": 4.23410650459726,
    "func": 3.828641396489095,
    "avg": 4.927253685157205,
    "label": 4.927253685157205,
    "avg_rating": 4.23410650459726,
    "group_by": 4.927253685157205,
    "outerjoin": 4.927253685157205,
    "nullslast": 4.927253685157205,
    "ts_rank": 4.927253685157205,
    "plainto_tsquery": 4.927253685157205,
    "paginate": 4.927253685157205,
    "error_out": 4.927253685157205,
    "jsonify": 2.1546649629174235,
    "pages": 4.927253685157205,
    "has_next": 4.927253685157205,
    "has_prev": 4.23410650459726,
    "filters": 4.927253685157205,
    "exception": 3.3178157727231046,
    "workflow": 4.927253685157205,
    "creation": 3.5409593240373143,
    "orders_bp": 4.927253685157205,
    "jwt_required": 4.927253685157205,
    "create_order": 4.927253685157205,
    "current_user_id": 2.9813435361018916,
    "get_jwt_identity": 4.927253685157205,
    "get_json": 2.847812143477369,
    "validate": 3.828641396489095,
    "required": 3.828641396489095,
    "fields": 3.828641396489095,
    "required_fields": 4.23410650459726,
    "field": 3.828641396489095,
    "empty": 3.828641396489095,
    "start": 3.828641396489095,
    "transaction": 3.5409593240373143,
    "begin": 4.23410650459726,
    "cart_totals": 4.23410650459726,
    "flush": 4.927253685157205,
    "verify": 3.5409593240373143,
    "still": 4.927253685157205,
    "rollback": 3.1354942159291497,
    "unknown": 4.927253685157205,
    "longer": 4.927253685157205,
    "order_item": 4.23410650459726,
    "payment_service": 4.927253685157205,
    "results": 3.1354942159291497,
    "response": 2.2881963555419462,
    "times": 4.23410650459726,
    "150ms": 4.927253685157205,
    "listings": 4.927253685157205,
    "300ms": 4.927253685157205,
    "throughput": 4.23410650459726,
    "during": 4.23410650459726,
    "peak": 4.23410650459726,
    "traffic": 3.828641396489095,
    "efficiency": 4.23410650459726,
    "queries": 4.23410650459726,
    "proper": 2.9813435361018916,
    "indexing": 3.3178157727231046,
    "security": 3.1354942159291497,
    "control": 3.5409593240373143,
    "pci": 4.23410650459726,
    "compliant": 4.927253685157205,
    "input": 3.3178157727231046,
    "sanitization": 4.23410650459726,
    "abuse": 3.5409593240373143,
    "prevention": 4.927253685157205,
    "accuracy": 4.23410650459726,
    "level": 3.828641396489095,
    "support": 3.828641396489095,
    "onboarded": 4.927253685157205,
    "100k": 4.927253685157205,
    "processed": 4.23410650459726,
    "securely": 4.927253685157205,
    "improvement": 4.927253685157205,
    "scalability": 4.927253685157205,
    "background": 3.5409593240373143,
    "tasks": 3.828641396489095,
    "celery": 3.828641396489095,
    "notifications": 3.828641396489095,
    "versioning": 4.23410650459726,
    "backward": 4.927253685157205,
    "compatibility": 4.23410650459726,
    "concurrency": 4.927253685157205,
    "inventoryservice": 4.927253685157205,
    "reserve_inventory": 4.927253685157205,
    "order_items": 4.927253685157205,
    "reserve": 4.23410650459726,
    "row": 3.828641396489095,
    "lock": 4.23410650459726,
    "with_for_update": 4.23410650459726,
    "insufficient": 4.23410650459726,
    "reserved_quantity": 4.23410650459726,
    "reservation": 4.927253685157205,
    "inventoryerror": 4.927253685157205,
    "release_reservation": 4.927253685157205,
    "release": 4.927253685157205,
    "reserved": 4.927253685157205,
    "strategy": 3.3178157727231046,
    "flask_caching": 4.927253685157205,
    "import": 3.5409593240373143,
    "cache": 3.828641396489095,
    "productservice": 4.23410650459726,
    "memoize": 4.927253685157205,
    "timeout": 4.927253685157205,
    "minutes": 4.927253685157205,
    "limit": 3.5409593240373143,
    "cached": 4.927253685157205,
    "options": 4.23410650459726,
    "joinedload": 4.23410650459726,
    "invalidate": 4.927253685157205,
    "related": 4.927253685157205,
    "delete_memoized": 4.927253685157205,
    "__name__": 4.927253685157205,
    "app_context": 3.5409593240373143,
    "email_service": 4.927253685157205,
    "emailservice": 4.927253685157205,
    "update_search_index": 4.927253685157205,
    "search_content": 4.927253685157205,
    "to_tsvector": 4.927253685157205,
    "english": 4.927253685157205,
    "start_date": 4.927253685157205,
    "end_date": 4.927253685157205,
    "report": 4.23410650459726,
    "between": 3.5409593240373143,
    "report_data": 4.23410650459726,
    "total_orders": 4.927253685157205,
    "total_revenue": 4.927253685157205,
    "top_products": 4.927253685157205,
    "get_top_products": 4.927253685157205,
    "save": 4.927253685157205,
    "save_sales_report": 4.927253685157205,
    "suite": 4.23410650459726,
    "workflows": 4.927253685157205,
    "client": 2.624668592163159,
    "auth_headers": 3.3178157727231046,
    "sample_products": 3.5409593240373143,
    "complete": 4.23410650459726,
    "purchase": 4.23410650459726,
    "headers": 2.847812143477369,
    "assert": 2.7300291078209855,
    "status_code": 3.1354942159291497,
    "cart_data": 3.828641396489095,
    "order_data": 4.23410650459726,
    "john": 4.23410650459726,
    "doe": 4.23410650459726,
    "main": 4.23410650459726,
    "city": 4.927253685157205,
    "anytown": 4.23410650459726,
    "state": 4.927253685157205,
    "zip_code": 4.927253685157205,
    "country": 4.927253685157205,
    "card": 4.927253685157205,
    "order_response": 4.927253685157205,
    "under": 4.927253685157205,
    "threading": 4.23410650459726,
    "initial_stock": 4.23410650459726,
    "add_to_cart_worker": 4.23410650459726,
    "append": 4.927253685157205,
    "threads": 4.23410650459726,
    "trying": 4.927253685157205,
    "same": 4.927253685157205,
    "thread": 4.23410650459726,
    "target": 4.927253685157205,
    "should": 4.23410650459726,
    "succeed": 4.927253685157205,
    "success_count": 4.927253685157205,
    "count": 4.927253685157205,
    "lessons": 3.828641396489095,
    "crucial": 4.23410650459726,
    "retry": 4.927253685157205,
    "persistence": 4.927253685157205,
    "authenticated": 4.927253685157205,
    "best": 4.23410650459726,
    "practices": 4.23410650459726,
    "never": 4.23410650459726,
    "sensitive": 4.927253685157205,
    "information": 4.927253685157205,
    "layer": 4.927253685157205,
    "prevent": 3.828641396489095,
    "critical": 4.927253685157205,
    "benefit": 4.927253685157205,
    "heavily": 4.927253685157205,
    "abandonment": 4.927253685157205,
    "persistent": 4.927253685157205,
    "dramatically": 4.23410650459726,
    "improves": 4.23410650459726,
    "discovery": 4.927253685157205,
    "comes": 4.927253685157205,
    "devices": 4.23410650459726,
    "future": 4.23410650459726,
    "enhancements": 4.23410650459726,
    "recommendation": 4.927253685157205,
    "engine": 4.927253685157205,
    "international": 4.927253685157205,
    "market": 4.927253685157205,
    "expansion": 4.927253685157205,
    "subscription": 4.927253685157205,
    "recurring": 4.927253685157205,
    "billing": 4.927253685157205,
    "warehouse": 4.927253685157205,
    "location": 4.927253685157205,
    "routing": 4.927253685157205,
    "compliance": 4.927253685157205,
    "gdpr": 4.927253685157205,
    "privacy": 4.927253685157205,
    "right": 4.927253685157205,
    "deletion": 4.927253685157205,
    "dss": 4.927253685157205,
    "certification": 4.927253685157205,
    "enhanced": 4.927253685157205,
    "standards": 4.927253685157205,
    "fraud": 4.927253685157205,
    "detection": 4.927253685157205,
    "risk": 4.927253685157205,
    "assessment": 4.927253685157205,
    "factor": 4.927253685157205,
    "account": 4.927253685157205,
    "framework": 4.927253685157205,
    "optimize": 4.927253685157205,
    "mechanic": 3.5409593240373143,
    "shop": 3.5409593240373143,
    "restful": 3.5409593240373143,
    "auto": 3.828641396489095,
    "repair": 3.828641396489095,
    "automotive": 4.927253685157205,
    "records": 3.828641396489095,
    "appointments": 3.828641396489095,
    "professional": 3.828641396489095,
    "shops": 4.927253685157205,
    "manage": 4.23410650459726,
    "customers": 2.624668592163159,
    "vehicles": 2.9813435361018916,
    "entities": 4.927253685157205,
    "integrity": 3.5409593240373143,
    "providing": 4.23410650459726,
    "offering": 4.927253685157205,
    "documentation": 3.1354942159291497,
    "structure": 4.23410650459726,
    "phone": 2.624668592163159,
    "vehicle": 3.1354942159291497,
    "owner": 4.927253685157205,
    "appointment": 4.927253685157205,
    "vehicle_count": 4.927253685157205,
    "make": 3.5409593240373143,
    "year": 3.5409593240373143,
    "vin": 3.3178157727231046,
    "license_plate": 4.23410650459726,
    "color": 4.23410650459726,
    "mileage": 4.23410650459726,
    "service_records": 4.23410650459726,
    "servicerecord": 4.927253685157205,
    "validates": 4.23410650459726,
    "validate_year": 4.927253685157205,
    "current_year": 4.23410650459726,
    "must": 4.23410650459726,
    "validate_vin": 4.927253685157205,
    "exactly": 4.927253685157205,
    "characters": 4.927253685157205,
    "upper": 4.927253685157205,
    "authorization": 3.5409593240373143,
    "authservice": 4.23410650459726,
    "hours": 4.927253685157205,
    "iat": 4.927253685157205,
    "verify_token": 4.23410650459726,
    "decode": 4.927253685157205,
    "algorithms": 4.927253685157205,
    "authenticationerror": 3.828641396489095,
    "expired": 4.927253685157205,
    "invalidtokenerror": 4.927253685157205,
    "decorator": 4.927253685157205,
    "token_required": 4.23410650459726,
    "wraps": 4.23410650459726,
    "decorated": 4.23410650459726,
    "kwargs": 3.5409593240373143,
    "header": 4.927253685157205,
    "auth_header": 4.927253685157205,
    "bearer": 3.828641396489095,
    "indexerror": 4.927253685157205,
    "format": 4.23410650459726,
    "missing": 4.927253685157205,
    "current_user_role": 4.23410650459726,
    "record": 4.927253685157205,
    "200ms": 4.927253685157205,
    "requests": 4.927253685157205,
    "minute": 3.828641396489095,
    "prevents": 3.3178157727231046,
    "sql": 3.828641396489095,
    "injection": 4.927253685157205,
    "xss": 4.927253685157205,
    "attacks": 4.927253685157205,
    "permissions": 4.23410650459726,
    "levels": 4.927253685157205,
    "foreign": 3.828641396489095,
    "transactions": 4.927253685157205,
    "collection": 4.927253685157205,
    "messages": 4.23410650459726,
    "helpful": 4.927253685157205,
    "feedback": 4.23410650459726,
    "consistent": 4.927253685157205,
    "responses": 4.23410650459726,
    "standardized": 4.927253685157205,
    "benefits": 4.927253685157205,
    "endpoint": 3.828641396489095,
    "normalization": 4.927253685157205,
    "modular": 4.927253685157205,
    "blueprints": 4.927253685157205,
    "organized": 4.927253685157205,
    "environment": 4.927253685157205,
    "configs": 4.927253685157205,
    "easy": 4.23410650459726,
    "customers_bp": 4.927253685157205,
    "create_customer": 4.927253685157205,
    "duplicate": 4.927253685157205,
    "existing_customer": 4.927253685157205,
    "already": 4.927253685157205,
    "exists": 4.927253685157205,
    "lower": 4.927253685157205,
    "message": 4.927253685157205,
    "created": 4.927253685157205,
    "successfully": 4.927253685157205,
    "creating": 4.927253685157205,
    "internal": 4.927253685157205,
    "server": 4.927253685157205,
    "table": 4.23410650459726,
    "primary": 4.23410650459726,
    "auto_increment": 4.927253685157205,
    "varchar": 4.927253685157205,
    "current_timestamp": 4.23410650459726,
    "references": 4.23410650459726,
    "idx_customer_id": 4.927253685157205,
    "idx_vin": 4.927253685157205,
    "composite": 4.927253685157205,
    "vehicle_id": 4.927253685157205,
    "service_type_id": 4.927253685157205,
    "cost": 4.927253685157205,
    "decimal": 4.23410650459726,
    "service_date": 4.927253685157205,
    "date": 3.3178157727231046,
    "mileage_at_service": 4.927253685157205,
    "technician_notes": 4.927253685157205,
    "in_progress": 4.927253685157205,
    "completed": 4.927253685157205,
    "service_types": 4.927253685157205,
    "idx_vehicle_service": 4.927253685157205,
    "idx_status": 4.927253685157205,
    "fixture": 4.927253685157205,
    "sqlite": 4.927253685157205,
    "memory": 4.927253685157205,
    "test_client": 4.927253685157205,
    "create_all": 4.927253685157205,
    "yield": 4.927253685157205,
    "drop_all": 4.927253685157205,
    "auth_token": 3.5409593240373143,
    "valid": 4.927253685157205,
    "customer_data": 3.828641396489095,
    "example": 4.927253685157205,
    "com": 4.927253685157205,
    "usa": 4.927253685157205,
    "vehicle_data": 3.828641396489095,
    "toyota": 4.927253685157205,
    "camry": 4.927253685157205,
    "1hgbh41jxmn109186": 4.927253685157205,
    "decorators": 4.927253685157205,
    "validate_json": 4.927253685157205,
    "decorated_function": 4.23410650459726,
    "is_json": 4.927253685157205,
    "content": 4.23410650459726,
    "application": 4.23410650459726,
    "body": 4.23410650459726,
    "cannot": 4.927253685157205,
    "validate_email": 4.927253685157205,
    "pattern": 4.927253685157205,
    "validate_phone": 4.927253685157205,
    "digits_only": 4.23410650459726,
    "sub": 4.23410650459726,
    "flask_restx": 4.927253685157205,
    "resource": 4.927253685157205,
    "version": 4.927253685157205,
    "title": 4.927253685157205,
    "doc": 4.927253685157205,
    "docs": 4.23410650459726,
    "customer_model": 4.927253685157205,
    "readonly": 4.23410650459726,
    "last": 4.927253685157205,
    "home": 4.927253685157205,
    "matters": 4.927253685157205,
    "standard": 4.927253685157205,
    "reduce": 4.927253685157205,
    "essential": 4.927253685157205,
    "large": 4.927253685157205,
    "datasets": 4.927253685157205,
    "efficient": 4.927253685157205,
    "improve": 4.927253685157205,
    "everything": 4.927253685157205,
    "trust": 4.927253685157205,
    "throttling": 4.927253685157205,
    "audit": 4.927253685157205,
    "keys": 4.927253685157205,
    "enforce": 4.927253685157205,
    "indexes": 4.23410650459726,
    "strategic": 4.927253685157205,
    "bad": 4.23410650459726,
    "graphql": 4.927253685157205,
    "more": 4.927253685157205,
    "flexible": 4.927253685157205,
    "capabilities": 4.927253685157205,
    "websocket": 4.927253685157205,
    "elasticsearch": 4.927253685157205,
    "file": 4.927253685157205,
    "uploads": 4.927253685157205,
    "photos": 4.927253685157205,
    "documents": 4.927253685157205,
    "connect": 4.927253685157205,
    "excellent": 4.927253685157205,
    "seamless": 4.23410650459726,
    "end": 4.23410650459726,
    "catering": 4.23410650459726,
    "featuring": 4.927253685157205,
    "actual": 4.23410650459726,
    "serve": 4.23410650459726,
    "replace": 4.23410650459726,
    "coordination": 4.23410650459726,
    "high": 4.23410650459726,
    "checking": 3.828641396489095,
    "const": 3.5409593240373143,
    "checkavailability": 4.927253685157205,
    "duration": 3.828641396489095,
    "await": 3.3178157727231046,
    "fetch": 4.927253685157205,
    "method": 4.927253685157205,
    "stringify": 4.927253685157205,
    "bookingform": 4.927253685157205,
    "setavailability": 4.927253685157205,
    "usestate": 4.23410650459726,
    "availabilitydata": 4.927253685157205,
    "onsubmit": 4.927253685157205,
    "handlebooking": 4.927253685157205,
    "classname": 4.927253685157205,
    "space": 4.927253685157205,
    "datetimepicker": 4.927253685157205,
    "onchange": 4.927253685157205,
    "handledatechange": 4.927253685157205,
    "mindate": 4.927253685157205,
    "serviceselector": 4.927253685157205,
    "setselectedservices": 4.927253685157205,
    "paymentsection": 4.927253685157205,
    "calculatetotal": 4.927253685157205,
    "onsuccess": 4.927253685157205,
    "response_model": 4.927253685157205,
    "bookingresponse": 4.23410650459726,
    "limiter": 4.927253685157205,
    "create_booking": 4.927253685157205,
    "bookingcreate": 4.23410650459726,
    "depends": 4.23410650459726,
    "get_session": 4.23410650459726,
    "current_user": 4.23410650459726,
    "get_current_user": 4.927253685157205,
    "check_availability": 4.927253685157205,
    "httpexception": 4.927253685157205,
    "detail": 4.927253685157205,
    "slot": 4.23410650459726,
    "atomic": 4.927253685157205,
    "db_booking": 4.23410650459726,
    "dict": 4.927253685157205,
    "from_orm": 4.927253685157205,
    "requires_role": 4.927253685157205,
    "get_all_bookings": 4.927253685157205,
    "select": 4.927253685157205,
    "execute": 4.927253685157205,
    "offset": 4.927253685157205,
    "scalars": 4.927253685157205,
    "eliminated": 4.927253685157205,
    "texts": 4.927253685157205,
    "common": 4.927253685157205,
    "mistakes": 4.927253685157205,
    "15k": 4.927253685157205,
    "loads": 4.927253685157205,
    "bundle": 4.23410650459726,
    "size": 4.23410650459726,
    "perfect": 4.927253685157205,
    "zero": 4.927253685157205,
    "breaches": 4.927253685157205,
    "velocity": 4.927253685157205,
    "enables": 4.23410650459726,
    "rapid": 4.927253685157205,
    "iteration": 4.927253685157205,
    "clean": 4.927253685157205,
    "spec": 4.927253685157205,
    "issues": 4.23410650459726,
    "flow": 4.927253685157205,
    "dynamic": 4.927253685157205,
    "double": 4.927253685157205,
    "customization": 4.927253685157205,
    "happen": 4.23410650459726,
    "verification": 4.927253685157205,
    "rotation": 4.927253685157205,
    "spam": 4.927253685157205,
    "validators": 4.927253685157205,
    "view": 4.927253685157205,
    "edit": 4.927253685157205,
    "calendar": 4.927253685157205,
    "visual": 4.927253685157205,
    "scheduling": 4.927253685157205,
    "contact": 4.927253685157205,
    "popular": 4.927253685157205,
    "deep": 4.927253685157205,
    "dive": 4.927253685157205,
    "optimizations": 4.927253685157205,
    "setbookings": 4.23410650459726,
    "createbooking": 4.23410650459726,
    "bookingdata": 4.23410650459726,
    "optimistically": 4.927253685157205,
    "tempid": 3.828641396489095,
    "crypto": 4.927253685157205,
    "randomuuid": 4.927253685157205,
    "optimisticbooking": 4.927253685157205,
    "prev": 4.927253685157205,
    "result": 4.927253685157205,
    "temp": 4.927253685157205,
    "map": 4.927253685157205,
    "catch": 4.927253685157205,
    "throw": 4.927253685157205,
    "uuid": 4.927253685157205,
    "gen_random_uuid": 4.927253685157205,
    "event_date": 4.927253685157205,
    "guest_count": 4.927253685157205,
    "jsonb": 4.927253685157205,
    "booking_status": 4.927253685157205,
    "idx_bookings_date": 4.927253685157205,
    "availability_slots": 4.927253685157205,
    "is_available": 4.927253685157205,
    "mvp": 4.927253685157205,
    "basic": 4.927253685157205,
    "invaluable": 4.927253685157205,
    "most": 4.927253685157205,
    "phones": 4.927253685157205,
    "accordingly": 4.927253685157205,
    "source": 4.927253685157205,
    "plan": 4.927253685157205,
    "backwards": 4.927253685157205,
    "early": 4.927253685157205,
    "scaling": 4.927253685157205,
    "set": 4.927253685157205,
    "before": 4.927253685157205,
    "them": 4.927253685157205,
    "backup": 4.927253685157205,
    "backups": 4.927253685157205,
    "saved": 4.927253685157205,
    "once": 4.927253685157205,
    "good": 4.927253685157205,
    "accelerate": 4.927253685157205,
    "onboarding": 4.927253685157205,
    "debugging": 4.927253685157205,
    "pwa": 3.828641396489095,
    "vue": 4.927253685157205,
    "indexeddb": 4.23410650459726,
    "socket": 4.927253685157205,
    "workers": 4.23410650459726,
    "progressive": 4.23410650459726,
    "teams": 4.927253685157205,
    "projects": 4.927253685157205,
    "offline": 4.23410650459726,
    "functionality": 4.23410650459726,
    "problem": 4.927253685157205,
    "many": 4.927253685157205,
    "struggle": 4.927253685157205,
    "tools": 4.927253685157205,
    "don": 4.927253685157205,
    "have": 4.927253685157205,
    "poor": 4.927253685157205,
    "experiences": 4.927253685157205,
    "those": 4.927253685157205,
    "native": 4.927253685157205,
    "like": 4.927253685157205,
    "works": 4.23410650459726,
    "anywhere": 4.927253685157205,
    "anytime": 4.927253685157205,
    "internet": 4.927253685157205,
    "connection": 4.927253685157205,
    "sync": 4.927253685157205,
    "instant": 4.927253685157205,
    "team": 4.927253685157205,
    "members": 4.927253685157205,
    "cross": 4.927253685157205,
    "desktop": 4.927253685157205,
    "tablet": 4.927253685157205,
    "push": 4.927253685157205,
    "reminders": 4.927253685157205,
    "intuitive": 4.927253685157205,
    "kanban": 4.927253685157205,
    "style": 4.927253685157205,
    "organization": 4.927253685157205,
    "local": 4.927253685157205,
    "storage": 4.927253685157205,
    "webrtc": 4.927253685157205,
    "peer": 4.927253685157205,
    "grid": 4.927253685157205,
    "flexbox": 4.927253685157205,
    "second": 4.927253685157205,
    "load": 4.927253685157205,
    "networks": 4.927253685157205,
    "lighthouse": 4.927253685157205,
    "score": 4.927253685157205,
    "200kb": 4.927253685157205,
    "gzipped": 4.927253685157205,
    "iphone": 4.927253685157205,
    "showcased": 4.927253685157205,
    "expertise": 4.927253685157205,
    "enhancement": 4.927253685157205,
    "principles": 4.927253685157205
  },
  "metadata": {
    "createdAt": "2025-09-23T04:56:50.394Z",
    "totalChunks": 138,
    "sources": [
      "profile.json",
      "ai-booking-platform.mdx",
      "ecommerce-analytics.mdx",
      "flask-ecommerce-api.mdx",
      "mechanic-shop-api.mdx",
      "my-hibachi.mdx",
      "task-management-pwa.mdx"
    ]
  }
}