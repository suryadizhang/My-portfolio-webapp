name: Python Service CI (reusable)

# DISABLED: Using monorepo.yml instead for comprehensive CI/CD
# This workflow is kept for reference but not actively triggered
on:
  workflow_dispatch:
    inputs:
      do_deploy:
        type: boolean
        required: false
        default: false
  workflow_call:
    inputs:
      do_deploy:
        type: boolean
        required: false
        default: false
    secrets:
      SSH_PRIVATE_KEY:
        required: false
      VPS_HOST:
        required: false
      GITHUB_TOKEN:
        required: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: suryadizhang/my-portfolio-python-service

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    permissions:
      contents: read
      packages: write
    
    outputs:
      image: ${{ steps.image.outputs.image }}
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Sanity check Python service files
      run: |
        echo "üîç Checking critical files for Python service..."
        test -f "apps/service-python/requirements.txt" || (echo "‚ùå requirements.txt missing" && exit 1)
        test -f "apps/service-python/Dockerfile" || (echo "‚ùå Dockerfile missing" && exit 1)
        test -d "apps/service-python/app" || (echo "‚ùå app directory missing" && exit 1)
        echo "‚úÖ All critical Python service files present"

    # Install dependencies and run tests
    - name: Install Python dependencies
      working-directory: apps/service-python
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov  # Add testing dependencies if not in requirements

    - name: Run Python tests
      working-directory: apps/service-python
      run: |
        # Run tests if they exist
        if [ -d "tests" ] && [ -n "$(find tests -name "*.py" -type f)" ]; then
          echo "üß™ Running Python tests..."
          python -m pytest tests/ -v
        else
          echo "‚ÑπÔ∏è  No tests found in tests/ directory, skipping test execution"
        fi

    - name: Python linting (if tools are available)
      working-directory: apps/service-python
      run: |
        # Basic Python syntax check
        python -m py_compile app/*.py || echo "‚ö†Ô∏è  Some Python files have syntax issues"
        
        # Try flake8 if available (non-blocking)
        pip list | grep flake8 && python -m flake8 app/ --count --show-source --statistics || echo "‚ÑπÔ∏è  flake8 not available, skipping linting"
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=sha,prefix=python-service-
          
    - name: Build and push Python service Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./apps/service-python
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Output image
      id: image
      run: |
        echo "Generated tags: ${{ steps.meta.outputs.tags }}"
        echo "image=${{ fromJSON(steps.meta.outputs.json).tags[0] }}" >> $GITHUB_OUTPUT

    - name: Verify Python service image
      run: |
        echo "üîç Verifying Python service image..."
        IMG="${{ fromJSON(steps.meta.outputs.json).tags[0] }}"
        docker pull "$IMG"
        
        # Basic smoke test - check if the container can start
        echo "üöÄ Running smoke test..."
        docker run --rm -d --name test-python-service "$IMG" || {
          echo "‚ùå Python service container failed to start"
          exit 1
        }
        
        # Give it a moment to start
        sleep 3
        
        # Check if container is still running
        if docker ps | grep test-python-service > /dev/null; then
          echo "‚úÖ Python service container is running"
          docker stop test-python-service
        else
          echo "‚ùå Python service container exited unexpectedly"
          docker logs test-python-service || true
          exit 1
        fi

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ inputs.do_deploy }}
    timeout-minutes: 20
    
    steps:
    - name: Check required secrets
      run: |
        M=0
        [ -n "${{ secrets.SSH_PRIVATE_KEY }}" ] || { echo "Missing SSH_PRIVATE_KEY"; M=1; }
        [ -n "${{ secrets.VPS_HOST }}" ]       || { echo "Missing VPS_HOST"; M=1; }
        exit $M
        
    - name: Setup SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy Python service to VPS
      run: |
        echo "Deploying Python service to ${{ secrets.VPS_HOST }}‚Ä¶"
        
        # Deploy Python service on VPS
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no apiportfolio@${{ secrets.VPS_HOST }} "
          set -euo pipefail
          
          echo 'üöÄ Starting Python service deployment...'
          
          # Create service directory
          mkdir -p /var/www/services/python-api
          cd /var/www/services/python-api
          
          # Stop existing Python service (if running)
          echo 'üîÑ Stopping existing Python service...'
          docker stop portfolio-python-service 2>/dev/null || true
          docker rm portfolio-python-service 2>/dev/null || true
          
          # Pull the new image
          echo 'üì• Pulling new Python service image...'
          echo '${{ secrets.GITHUB_TOKEN }}' | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker pull ${{ needs.build.outputs.image }}
          
          # Start the new Python service
          echo 'üéØ Starting Python service container...'
          docker run -d \
            --name portfolio-python-service \
            --restart unless-stopped \
            -p 8000:8000 \
            ${{ needs.build.outputs.image }}
          
          # Wait for startup
          sleep 5
          
          # Check if container is running
          if docker ps | grep portfolio-python-service > /dev/null; then
            echo '‚úÖ Python service started successfully'
            echo 'üìã Container status:'
            docker ps | grep portfolio-python-service
          else
            echo '‚ùå Python service failed to start, showing logs:'
            docker logs portfolio-python-service
            exit 1
          fi
          
          echo 'üéâ Python service deployment completed successfully!'
        "
        
    - name: Verify Python service deployment
      run: |
        echo "Waiting for Python service to start..."
        sleep 10
        
        # Try to reach the Python service (adjust port/endpoint as needed)
        curl -f -s -o /dev/null http://${{ secrets.VPS_HOST }}:8000/health && echo "‚úÖ Python service is accessible!" || echo "‚ùå Python service health check failed (this may be expected if no health endpoint exists)"