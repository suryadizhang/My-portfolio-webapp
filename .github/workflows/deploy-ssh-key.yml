name: Deploy with SSH Key

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: üèó Checkout code
      uses: actions/checkout@v4

    - name: üèó Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: üì¶ Install dependencies
      run: npm ci

    - name: üèó Build application
      run: |
        npm run build
        echo "Build completed, checking output..."
        ls -la apps/web/.next || echo "‚ö†Ô∏è .next directory not found"
        ls -la apps/web/public || echo "‚ö†Ô∏è public directory not found"
      env:
        NODE_ENV: production
        NEXT_PUBLIC_SITE_URL: ${{ secrets.SITE_URL }}

    - name: üìÇ Create deployment package
      run: |
        echo "Creating production package.json..."
        cat > production-package.json << 'EOF'
        {
          "name": "portfolio-production",
          "version": "0.1.0",
          "private": true,
          "scripts": {
            "start": "node app.js"
          },
          "dependencies": {
            "next": "^15.0.0",
            "react": "^18.3.1",
            "react-dom": "^18.3.1",
            "@mdx-js/loader": "^3.0.0",
            "@mdx-js/react": "^3.0.0",
            "@next/mdx": "^15.0.0",
            "@tailwindcss/typography": "^0.5.10",
            "gray-matter": "^4.0.3",
            "lucide-react": "^0.447.0",
            "next-mdx-remote": "^5.0.0",
            "next-themes": "^0.2.1",
            "pdfjs-dist": "^5.3.93"
          },
          "engines": {
            "node": ">=18.0.0"
          }
        }
        EOF
        
        # Create deployment directory
        mkdir -p deploy-temp
        
        # Copy Next.js build files
        cp -r apps/web/.next deploy-temp/ || echo "‚ö†Ô∏è No .next directory"
        cp -r apps/web/public deploy-temp/ || echo "‚ö†Ô∏è No public directory"
        cp apps/web/package.json deploy-temp/web-package.json || echo "‚ö†Ô∏è No web package.json"
        cp apps/web/next.config.js deploy-temp/ 2>/dev/null || echo "‚ö†Ô∏è No next.config.js"
        
        # Copy application files
        cp app.js deploy-temp/
        cp production-package.json deploy-temp/package.json
        
        # Create archive
        cd deploy-temp
        tar -czf ../deployment.tar.gz *
        cd ..
        
        echo "üì¶ Deployment package created:"
        tar -tzf deployment.tar.gz | head -15

    - name: üîë Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: üöÄ Deploy to VPS
      run: |
        # Add server to known hosts
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
        
        # Test SSH connection
        ssh -o ConnectTimeout=10 ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "echo 'SSH connection successful'"
        
        # Upload deployment package
        scp -o ConnectTimeout=30 deployment.tar.gz ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:~/
        
        # Deploy on server
        ssh -o ConnectTimeout=30 ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} << 'ENDSSH'
        set -e
        echo "=== Starting deployment on VPS ==="
        
        # Basic environment info
        echo "User: $(whoami)"
        echo "Home: $HOME"
        echo "PWD: $(pwd)"
        
        # Determine deployment directory
        DEPLOY_DIR="/var/www/vhosts/${{ secrets.DOMAIN_NAME }}/httpdocs"
        if [ ! -d "$DEPLOY_DIR" ]; then
          echo "Plesk directory not found, creating in home directory..."
          DEPLOY_DIR="$HOME/portfolio-app"
          mkdir -p "$DEPLOY_DIR"
        fi
        
        echo "Deploying to: $DEPLOY_DIR"
        cd "$DEPLOY_DIR"
        
        # Backup existing files
        if [ -d ".next" ] || [ -f "app.js" ]; then
          echo "Creating backup..."
          tar -czf "backup-$(date +%Y%m%d-%H%M%S).tar.gz" .next app.js package.json 2>/dev/null || echo "Backup skipped"
        fi
        
        # Extract new deployment
        echo "Extracting deployment..."
        tar -xzf "$HOME/deployment.tar.gz"
        rm "$HOME/deployment.tar.gz"
        
        # Install dependencies
        echo "Installing Node.js dependencies..."
        if command -v npm > /dev/null 2>&1; then
          npm install --production --silent || echo "‚ö†Ô∏è npm install had issues"
        else
          echo "‚ùå npm not found - Node.js not installed"
        fi
        
        # Set permissions
        chmod +x app.js 2>/dev/null || true
        
        # Show deployment status
        echo "=== Deployment completed ==="
        echo "Files in deployment directory:"
        ls -la | head -10
        
        # Test app.js
        if [ -f "app.js" ] && command -v node > /dev/null 2>&1; then
          echo "Testing app.js syntax..."
          node -c app.js && echo "‚úÖ app.js syntax valid" || echo "‚ùå app.js has syntax errors"
        fi
        
        echo "üéâ Deployment completed successfully!"
        ENDSSH

    - name: ‚úÖ Verify deployment
      run: |
        echo "=== Deployment Summary ==="
        echo "üåê Domain: ${{ secrets.DOMAIN_NAME }}"
        echo "üñ•Ô∏è  Server: ${{ secrets.VPS_HOST }}"
        echo "üìù Next steps:"
        echo "  1. Configure Node.js in Plesk to use app.js"
        echo "  2. Set application startup file to 'app.js'"
        echo "  3. Test the application at https://${{ secrets.DOMAIN_NAME }}"