name: "Portfolio CI/CD Pipeline"

on:
  push:
    branches: [main, develop]
    paths:
      - 'apps/web/**'
      - 'apps/service-python/**'
      - 'packages/ui/**'
      - 'packages/utils/**'
      - 'packages/config/**'
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'apps/web/**'
      - 'apps/service-python/**'
      - 'packages/ui/**'
      - 'packages/utils/**'
      - 'packages/config/**'
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean

concurrency:
  group: portfolio-ci-cd-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  deployments: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --include-workspace-root --workspaces
      
    - name: Type check
      run: npm run typecheck

    - name: Run tests
      run: npm run test

    - name: Build application
      run: |
        echo "Building application..."
        npm run build
        echo "Build completed successfully"

  deploy-frontend:
    needs: [build-and-test]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || inputs.force_deploy)
    
    environment:
      name: production-frontend
      url: https://myportfolio.mysticdatanode.net
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Validate required secrets
      run: |
        echo "Validating Vercel secrets..."
        if [ -z "${{ secrets.VERCEL_TOKEN }}" ] || [ -z "${{ secrets.VERCEL_ORG_ID }}" ] || [ -z "${{ secrets.VERCEL_PROJECT_ID }}" ]; then
          echo "Missing required Vercel secrets"
          exit 1
        fi
        echo "All Vercel secrets present"

    - name: Install dependencies
      run: npm ci --include-workspace-root --workspaces

    - name: Build for Vercel
      run: |
        echo "Building for Vercel..."
        export NEXT_PUBLIC_API_BASE_URL=https://apiportfolio.mysticdatanode.net/api
        export NEXT_PUBLIC_SITE_URL=https://myportfolio.mysticdatanode.net
        npm run build

    - name: Deploy to Vercel
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      working-directory: ./apps/web
      run: |
        echo "Deploying to Vercel..."
        
        npm install -g vercel@latest
        
        echo "Linking project..."
        vercel link --token "$VERCEL_TOKEN" --scope "$VERCEL_ORG_ID" --yes
        
        echo "Deploying..."
        vercel --prod \
          --token "$VERCEL_TOKEN" \
          --scope "$VERCEL_ORG_ID" \
          --build-env NEXT_PUBLIC_API_BASE_URL=https://apiportfolio.mysticdatanode.net/api \
          --build-env NEXT_PUBLIC_SITE_URL=https://myportfolio.mysticdatanode.net \
          --confirm \
          --force
        
        echo "Vercel deployment completed!"

  deploy-python:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || inputs.force_deploy)
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js for PM2
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install PM2
      run: npm install -g pm2
      
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy Python service
      run: |
        echo "Deploying Python service..."
        
        tar -czf python-service.tar.gz -C apps/service-python .
        
        scp -i ~/.ssh/id_rsa python-service.tar.gz apiportfolio@${{ secrets.VPS_HOST }}:/tmp/
          
        ssh -i ~/.ssh/id_rsa apiportfolio@${{ secrets.VPS_HOST }} '
          set -e
          
          echo "Starting Python deployment..."
          
          sudo mkdir -p /var/www/vhosts/apiportfolio.mysticdatanode.net/python-service
          sudo chown -R apiportfolio:apiportfolio /var/www/vhosts/apiportfolio.mysticdatanode.net/
          
          cd /var/www/vhosts/apiportfolio.mysticdatanode.net/python-service
          
          tar -xzf /tmp/python-service.tar.gz
          rm /tmp/python-service.tar.gz
          
          echo "ALLOWED_ORIGINS=https://myportfolio.mysticdatanode.net,https://www.myportfolio.mysticdatanode.net" > .env
          echo "NODE_ENV=production" >> .env
          echo "LOG_LEVEL=info" >> .env
          
          if [ ! -d "venv" ]; then
            python3 -m venv venv
          fi
          
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          
          # Check if PM2 is available, install if needed
          if ! command -v pm2 &> /dev/null; then
            curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
            sudo apt-get install -y nodejs
            sudo npm install -g pm2
          fi
          
          pm2 restart portfolio-python || pm2 start app/main.py --name portfolio-python --interpreter python3
          
          echo "Python service deployed!"
        '

  final-validation:
    needs: [deploy-frontend, deploy-python]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Validate Frontend Deployment
      run: |
        echo "Checking frontend deployment..."
        curl -f --max-time 30 https://myportfolio.mysticdatanode.net/ || echo "Frontend check failed"
        
    - name: Validate Python API Deployment
      run: |
        echo "Checking Python API deployment..."
        sleep 10  # Give the service time to start
        curl -f --max-time 30 https://apiportfolio.mysticdatanode.net/ || echo "API check failed"
        
    - name: Deployment Summary
      run: |
        echo "Deployment Summary:"
        echo "Frontend: https://myportfolio.mysticdatanode.net"
        echo "API: https://apiportfolio.mysticdatanode.net"
        echo "Pipeline completed successfully!"
