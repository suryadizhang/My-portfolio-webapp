name: "Portfolio CI/CD Pipeline"

on:
  push:
    branches: [main, develop]
    paths:
      - 'apps/web/**'
      - 'apps/service-python/**'
      - 'packages/ui/**'
      - 'packages/utils/**'
      - 'packages/config/**'
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'apps/web/**'
      - 'apps/service-python/**'
      - 'packages/ui/**'
      - 'packages/utils/**'
      - 'packages/config/**'
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean

concurrency:
  group: portfolio-ci-cd-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  deployments: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --include-workspace-root --workspaces
      
    - name: Type check
      run: npm run typecheck

    - name: Run tests
      run: npm run test

    - name: Build application
      run: |
        echo "Building application..."
        npm run build
        echo "Build completed successfully"

  deploy-frontend:
    needs: [build-and-test]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || inputs.force_deploy)
    
    environment:
      name: production-frontend
      url: https://myportfolio.mysticdatanode.net
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Validate required secrets
      run: |
        echo "Validating Vercel secrets..."
        echo "VERCEL_TOKEN length: ${#VERCEL_TOKEN}"
        echo "VERCEL_ORG_ID: $VERCEL_ORG_ID"
        echo "VERCEL_PROJECT_ID: $VERCEL_PROJECT_ID"
        if [ -z "$VERCEL_TOKEN" ] || [ -z "$VERCEL_ORG_ID" ] || [ -z "$VERCEL_PROJECT_ID" ]; then
          echo "❌ Missing required Vercel secrets. Please check repository settings."
          echo "Required secrets: VERCEL_TOKEN, VERCEL_ORG_ID, VERCEL_PROJECT_ID"
          exit 1
        fi
        echo "✅ All Vercel secrets present"
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

    - name: Install dependencies
      run: npm ci --include-workspace-root --workspaces

    - name: Install Vercel CLI
      run: npm install -g vercel@latest
      
    - name: Build for Vercel
      run: |
        echo "Building for Vercel..."
        
        # Ensure tsconfig.base.json exists in root
        if [ ! -f "tsconfig.base.json" ]; then
          echo "⚠️ tsconfig.base.json not found in root, creating it..."
          cat > tsconfig.base.json << 'TSCONFIG_EOF'
        {
          "compilerOptions": {
            "target": "ES2022",
            "module": "ESNext",
            "moduleResolution": "Node",
            "strict": true,
            "esModuleInterop": true,
            "skipLibCheck": true,
            "baseUrl": ".",
            "paths": {
              "@/*": ["apps/web/src/*"]
            }
          }
        }
        TSCONFIG_EOF
        fi
        
        export NEXT_PUBLIC_API_BASE_URL=https://apiportfolio.mysticdatanode.net/api
        export NEXT_PUBLIC_SITE_URL=https://myportfolio.mysticdatanode.net
        npm run build

    - name: Deploy to Vercel
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      working-directory: ./apps/web
      timeout-minutes: 10
      run: |
        echo "Deploying to Vercel..."
        
        # Debug: Check if secrets are actually available
        if [ -z "$VERCEL_TOKEN" ] || [ -z "$VERCEL_ORG_ID" ] || [ -z "$VERCEL_PROJECT_ID" ]; then
          echo "❌ Vercel secrets not available in this step"
          echo "VERCEL_TOKEN exists: ${{ secrets.VERCEL_TOKEN != '' }}"
          echo "VERCEL_ORG_ID exists: ${{ secrets.VERCEL_ORG_ID != '' }}"
          echo "VERCEL_PROJECT_ID exists: ${{ secrets.VERCEL_PROJECT_ID != '' }}"
          exit 1
        fi
        
        echo "Setting up Vercel project..."
        # Create .vercel directory with project settings
        mkdir -p .vercel
        echo "{\"projectId\":\"$VERCEL_PROJECT_ID\",\"orgId\":\"$VERCEL_ORG_ID\"}" > .vercel/project.json
        cat .vercel/project.json
        
        echo "Deploying to Vercel..."
        
        # Method 1: Try with project linking
        timeout 600 vercel deploy --prod \
          --token "$VERCEL_TOKEN" \
          --build-env NEXT_PUBLIC_API_BASE_URL=https://apiportfolio.mysticdatanode.net/api \
          --build-env NEXT_PUBLIC_SITE_URL=https://myportfolio.mysticdatanode.net \
          --yes || {
          
          echo "⚠️ Method 1 failed. Trying Method 2: Fresh deployment..."
          
          # Method 2: Remove .vercel and deploy fresh
          rm -rf .vercel
          timeout 600 vercel deploy --prod \
            --token "$VERCEL_TOKEN" \
            --build-env NEXT_PUBLIC_API_BASE_URL=https://apiportfolio.mysticdatanode.net/api \
            --build-env NEXT_PUBLIC_SITE_URL=https://myportfolio.mysticdatanode.net \
            --name "portfolio-webapp" \
            --yes || {
            
            echo "⚠️ Method 2 failed. Trying Method 3: Force deployment..."
            
            # Method 3: Force deployment with explicit name
            timeout 600 vercel deploy --prod \
              --token "$VERCEL_TOKEN" \
              --force \
              --name "my-portfolio-$(date +%s)" \
              --yes || exit 1
          }
        }
        
        echo "Vercel deployment completed!"
        
    - name: Fallback - Manual Vercel Deploy
      if: failure()
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      working-directory: ./apps/web
      run: |
        echo "Primary deployment failed, trying manual approach..."
        
        # Simple deployment without project linking
        echo "Creating basic vercel.json config..."
        cat > vercel.json << EOF
        {
          "buildCommand": "npm run build",
          "outputDirectory": ".next",
          "framework": "nextjs",
          "installCommand": "npm install"
        }
        EOF
        
        # Deploy with minimal configuration
        timeout 600 vercel deploy --prod --token "$VERCEL_TOKEN" --yes || echo "Manual deployment also failed"

  deploy-python:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || inputs.force_deploy)
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js for PM2
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install PM2
      run: npm install -g pm2
      
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
        
        # Configure SSH to prevent hanging
        cat >> ~/.ssh/config << EOF
        Host ${{ secrets.VPS_HOST }}
          ServerAliveInterval 30
          ServerAliveCountMax 3
          ConnectTimeout 10
        EOF
        
    - name: Deploy Python service
      run: |
        echo "Deploying Python service..."
        
        tar -czf python-service.tar.gz -C apps/service-python .
        
        timeout 60 scp -i ~/.ssh/id_rsa -o ConnectTimeout=10 python-service.tar.gz apiportfolio@${{ secrets.VPS_HOST }}:/tmp/
          
        timeout 300 ssh -i ~/.ssh/id_rsa -o ConnectTimeout=10 apiportfolio@${{ secrets.VPS_HOST }} '
          set -e
          
          echo "Starting Python deployment..."
          
          # Create directory in user home if /var/www not accessible
          mkdir -p ~/python-service
          cd ~/python-service
          
          tar -xzf /tmp/python-service.tar.gz
          rm /tmp/python-service.tar.gz
          
          echo "ALLOWED_ORIGINS=https://myportfolio.mysticdatanode.net,https://www.myportfolio.mysticdatanode.net" > .env
          echo "NODE_ENV=production" >> .env
          echo "LOG_LEVEL=info" >> .env
          
          if [ ! -d "venv" ]; then
            python3 -m venv venv
          fi
          
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          
          # Stop any existing PM2 processes first
          pm2 delete portfolio-python 2>/dev/null || true
          pm2 kill 2>/dev/null || true
          
          # Start service with timeout protection
          timeout 30 python3 -c "import app.main; print(\"App can be imported successfully\")"
          
          # Use nohup instead of PM2 for simpler process management
          nohup python3 -m uvicorn app.main:app --host 0.0.0.0 --port 8000 > ~/python-service.log 2>&1 &
          
          # Wait a moment and check if process started
          sleep 3
          if pgrep -f "uvicorn app.main:app" > /dev/null; then
            echo "Python service started successfully!"
          else
            echo "Failed to start Python service"
            cat ~/python-service.log
            exit 1
          fi
        '

  final-validation:
    needs: [deploy-frontend, deploy-python]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Validate Frontend Deployment
      run: |
        echo "Checking frontend deployment..."
        curl -f --max-time 30 https://myportfolio.mysticdatanode.net/ || echo "Frontend check failed"
        
    - name: Validate Python API Deployment
      run: |
        echo "Checking Python API deployment..."
        sleep 10  # Give the service time to start
        curl -f --max-time 30 https://apiportfolio.mysticdatanode.net/ || echo "API check failed"
        
    - name: Deployment Summary
      run: |
        echo "Deployment Summary:"
        echo "Frontend: https://myportfolio.mysticdatanode.net"
        echo "API: https://apiportfolio.mysticdatanode.net"
        echo "Pipeline completed successfully!"
