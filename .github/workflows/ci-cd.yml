name: "Portfolio CI/CD Pipeline"

on:
  push:
    branches: [main, develop]
    paths:
      - 'apps/web/**'
      - 'apps/service-python/**'
      - 'packages/ui/**'
      - 'packages/utils/**'
      - 'packages/config/**'
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'apps/web/**'
      - 'apps/service-python/**'
      - 'packages/ui/**'
      - 'packages/utils/**'
      - 'packages/config/**'
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean

concurrency:
  group: portfolio-ci-cd-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  deployments: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --include-workspace-root --workspaces
      
    - name: Type check
      run: npm run typecheck

    - name: Run tests
      run: npm run test

    - name: Build application
      run: |
        echo "Building application..."
        npm run build
        echo "Build completed successfully"

  deploy-frontend:
    needs: [build-and-test]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || inputs.force_deploy)
    
    environment:
      name: production-frontend
      url: https://myportfolio.mysticdatanode.net
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Validate required secrets
      run: |
        echo "Validating Vercel secrets..."
        echo "VERCEL_TOKEN length: ${#VERCEL_TOKEN}"
        echo "VERCEL_ORG_ID: $VERCEL_ORG_ID"
        echo "VERCEL_PROJECT_ID: $VERCEL_PROJECT_ID"
        if [ -z "$VERCEL_TOKEN" ] || [ -z "$VERCEL_ORG_ID" ] || [ -z "$VERCEL_PROJECT_ID" ]; then
          echo "❌ Missing required Vercel secrets. Please check repository settings."
          echo "Required secrets: VERCEL_TOKEN, VERCEL_ORG_ID, VERCEL_PROJECT_ID"
          exit 1
        fi
        echo "✅ All Vercel secrets present"
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

    - name: Install dependencies
      run: npm ci --include-workspace-root --workspaces

    - name: Install Vercel CLI
      run: npm install -g vercel@latest
      
    - name: Build for Vercel
      run: |
        echo "Building for Vercel..."
        
        # Ensure tsconfig.base.json exists in root
        if [ ! -f "tsconfig.base.json" ]; then
          echo "⚠️ tsconfig.base.json not found in root, creating it..."
          cat > tsconfig.base.json << 'TSCONFIG_EOF'
        {
          "compilerOptions": {
            "target": "ES2022",
            "module": "ESNext",
            "moduleResolution": "Node",
            "strict": true,
            "esModuleInterop": true,
            "skipLibCheck": true,
            "baseUrl": ".",
            "paths": {
              "@/*": ["apps/web/src/*"]
            }
          }
        }
        TSCONFIG_EOF
        fi
        
        export NEXT_PUBLIC_API_BASE_URL=https://apiportfolio.mysticdatanode.net/api
        export NEXT_PUBLIC_SITE_URL=https://myportfolio.mysticdatanode.net
        npm run build

    - name: Deploy to Vercel
      working-directory: ./apps/web
      timeout-minutes: 10
      run: |
        echo "Deploying to Vercel..."
        
        # Check if VERCEL_TOKEN is available
        if [ -z "${{ secrets.VERCEL_TOKEN }}" ]; then
          echo "❌ VERCEL_TOKEN not available"
          exit 1
        fi
        
        echo "Preparing for fresh Vercel deployment..."
        
        # Remove any existing .vercel directory to start fresh
        rm -rf .vercel
        
        # Create standalone tsconfig.json for Vercel build (no external dependencies)
        echo "Creating standalone tsconfig.json for Vercel build..."
        
        cat > ./tsconfig.json << 'TSCONFIG_EOF'
        {
          "compilerOptions": {
            "target": "ES2022",
            "module": "ESNext",
            "moduleResolution": "Node",
            "strict": true,
            "esModuleInterop": true,
            "skipLibCheck": true,
            "baseUrl": ".",
            "jsx": "preserve",
            "types": ["node"],
            "lib": ["dom", "dom.iterable", "esnext"],
            "allowJs": true,
            "noEmit": true,
            "resolveJsonModule": true,
            "isolatedModules": true,
            "incremental": true,
            "paths": {
              "@/*": ["src/*"]
            },
            "plugins": [
              {
                "name": "next"
              }
            ]
          },
          "include": [
            "next-env.d.ts",
            "src/**/*.ts",
            "src/**/*.tsx",
            ".next/types/**/*.ts"
          ],
          "exclude": [
            "node_modules"
          ]
        }
        TSCONFIG_EOF
        
        # Create a simplified deployment package without monorepo dependencies
        echo "Setting up simplified deployment for Vercel..."
        
        # Copy UI components directly into src
        echo "Inlining UI components..."
        mkdir -p src/ui
        cp -r ../../packages/ui/src/* src/ui/ || true
        
        # Copy utils directly into src  
        echo "Inlining utils..."
        mkdir -p src/utils-lib
        cp -r ../../packages/utils/src/* src/utils-lib/ || true
        
        # Update imports to use correct relative paths
        echo "Updating import paths..."
        cat > update-imports.js << 'SCRIPT_EOF'
        const fs = require('fs');
        const path = require('path');
        
        function getRelativePath(fromFile, toDir) {
          const fromDir = path.dirname(fromFile);
          const relativePath = path.relative(fromDir, toDir);
          return relativePath.replace(/\\/g, '/') || '.';
        }
        
        function updateImportsInFile(filePath) {
          try {
            let content = fs.readFileSync(filePath, 'utf8');
            let updated = false;
            
            // Calculate relative paths from this file to src/ui and src/utils-lib
            const uiPath = getRelativePath(filePath, './src/ui');
            const utilsPath = getRelativePath(filePath, './src/utils-lib');
            
            // Replace @portfolio/ui imports
            if (content.includes('@portfolio/ui')) {
              content = content.replace(/@portfolio\/ui/g, uiPath);
              updated = true;
            }
            
            // Replace @portfolio/utils imports  
            if (content.includes('@portfolio/utils')) {
              content = content.replace(/@portfolio\/utils/g, utilsPath);
              updated = true;
            }
            
            if (updated) {
              fs.writeFileSync(filePath, content);
              console.log(`Updated imports in: ${filePath} (ui: ${uiPath}, utils: ${utilsPath})`);
            }
          } catch (error) {
            console.log(`Error processing ${filePath}:`, error.message);
          }
        }
        
        function walkDir(dir) {
          const files = fs.readdirSync(dir);
          files.forEach(file => {
            const filePath = path.join(dir, file);
            const stat = fs.statSync(filePath);
            
            if (stat.isDirectory() && !file.includes('node_modules') && !file.includes('.git')) {
              walkDir(filePath);
            } else if ((file.endsWith('.tsx') || file.endsWith('.ts')) && !file.includes('node_modules')) {
              updateImportsInFile(filePath);
            }
          });
        }
        
        walkDir('.');
        SCRIPT_EOF
        
        node update-imports.js
        
        # Install only the direct dependencies we need
        npm install lucide-react class-variance-authority clsx tailwind-merge
        
        # Create vercel.json for deployment
        cat > vercel.json << 'VERCEL_EOF'
        {
          "buildCommand": "npm run build",
          "outputDirectory": ".next",
          "framework": "nextjs",
          "installCommand": "npm install",
          "build": {
            "env": {
              "NEXT_PUBLIC_API_BASE_URL": "https://apiportfolio.mysticdatanode.net/api",
              "NEXT_PUBLIC_SITE_URL": "https://myportfolio.mysticdatanode.net"
            }
          }
        }
        VERCEL_EOF
        
        # Deploy with VERCEL_TOKEN
        export VERCEL_TOKEN="${{ secrets.VERCEL_TOKEN }}"
        
        echo "Deploying to Vercel with fresh project..."
        timeout 600 vercel deploy --prod --yes --token "$VERCEL_TOKEN" || {
          echo "❌ Vercel deployment failed"
          exit 1
        }
        
        echo "✅ Vercel deployment completed!"
        
    - name: Fallback - Manual Vercel Deploy
      if: failure()
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      working-directory: ./apps/web
      run: |
        echo "Primary deployment failed, trying manual approach..."
        
        # Simple deployment without project linking
        echo "Creating basic vercel.json config..."
        cat > vercel.json << EOF
        {
          "buildCommand": "npm run build",
          "outputDirectory": ".next",
          "framework": "nextjs",
          "installCommand": "npm install"
        }
        EOF
        
        # Deploy with minimal configuration
        timeout 600 vercel deploy --prod --token "$VERCEL_TOKEN" --yes || echo "Manual deployment also failed"

  deploy-python:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || inputs.force_deploy)
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js for PM2
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install PM2
      run: npm install -g pm2
      
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
        
        # Configure SSH to prevent hanging
        cat >> ~/.ssh/config << EOF
        Host ${{ secrets.VPS_HOST }}
          ServerAliveInterval 30
          ServerAliveCountMax 3
          ConnectTimeout 10
        EOF
        
    - name: Deploy Python service
      run: |
        echo "Deploying Python service..."
        
        tar -czf python-service.tar.gz -C apps/service-python .
        
        timeout 60 scp -i ~/.ssh/id_rsa -o ConnectTimeout=10 python-service.tar.gz apiportfolio@${{ secrets.VPS_HOST }}:/tmp/
          
        timeout 300 ssh -i ~/.ssh/id_rsa -o ConnectTimeout=10 apiportfolio@${{ secrets.VPS_HOST }} '
          set -e
          
          echo "Starting Python deployment..."
          
          # Create directory in user home if /var/www not accessible
          mkdir -p ~/python-service
          cd ~/python-service
          
          tar -xzf /tmp/python-service.tar.gz
          rm /tmp/python-service.tar.gz
          
          echo "ALLOWED_ORIGINS=https://myportfolio.mysticdatanode.net,https://www.myportfolio.mysticdatanode.net" > .env
          echo "NODE_ENV=production" >> .env
          echo "LOG_LEVEL=info" >> .env
          
          if [ ! -d "venv" ]; then
            python3 -m venv venv
          fi
          
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          
          # Stop any existing PM2 processes first
          pm2 delete portfolio-python 2>/dev/null || true
          pm2 kill 2>/dev/null || true
          
          # Start service with timeout protection
          timeout 30 python3 -c "import app.main; print(\"App can be imported successfully\")"
          
          # Use nohup instead of PM2 for simpler process management
          nohup python3 -m uvicorn app.main:app --host 0.0.0.0 --port 8000 > ~/python-service.log 2>&1 &
          
          # Wait a moment and check if process started
          sleep 3
          if pgrep -f "uvicorn app.main:app" > /dev/null; then
            echo "Python service started successfully!"
          else
            echo "Failed to start Python service"
            cat ~/python-service.log
            exit 1
          fi
        '

  final-validation:
    needs: [deploy-frontend, deploy-python]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Validate Frontend Deployment
      run: |
        echo "Checking frontend deployment..."
        curl -f --max-time 30 https://myportfolio.mysticdatanode.net/ || echo "Frontend check failed"
        
    - name: Validate Python API Deployment
      run: |
        echo "Checking Python API deployment..."
        sleep 10  # Give the service time to start
        curl -f --max-time 30 https://apiportfolio.mysticdatanode.net/ || echo "API check failed"
        
    - name: Deployment Summary
      run: |
        echo "Deployment Summary:"
        echo "Frontend: https://myportfolio.mysticdatanode.net"
        echo "API: https://apiportfolio.mysticdatanode.net"
        echo "Pipeline completed successfully!"
