name: "Simplified CI/CD Pipeline"

on:
  push:
    branches: [main, develop]
    paths:
      - 'apps/web/**'
      - 'packages/ui/**'
      - 'packages/utils/**'
      - 'packages/config/**'
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'apps/web/**'
      - 'packages/ui/**'
      - 'packages/utils/**'
      - 'packages/config/**'
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean

concurrency:
  group: simplified-ci-cd-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  deployments: write

jobs:
  # ---------- BUILD & TEST ----------
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --include-workspace-root --workspaces

    - name: Type check
      run: npm run typecheck

    - name: Run tests
      run: npm run test

    - name: Build web application
      run: |
        echo "üèóÔ∏è Building web application with Turbo..."
        npm run build --filter=@portfolio/web --include-dependencies
        echo "üìÇ Checking build output structure..."
        ls -la apps/web/.next/ || echo "No .next directory found"
        ls -la apps/web/.next/standalone/ || echo "No standalone directory found"
      
    - name: Verify build output
      run: |
        echo "üîç Verifying build output..."
        test -f "apps/web/.next/standalone/apps/web/server.js" || (echo "‚ùå server.js missing in standalone build" && exit 1)
        test -d "apps/web/.next/static" || (echo "‚ùå static files missing" && exit 1)
        test -d "apps/web/public" || (echo "‚ùå public files missing" && exit 1)
        echo "‚úÖ Build verification passed"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: web-build-${{ github.sha }}
        path: |
          apps/web/.next/standalone/
          apps/web/.next/static/
          apps/web/public/
        retention-days: 1

  # ---------- PYTHON SERVICE TESTS ----------
  python-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    # Run Python tests on main branch pushes or when Python files change
    if: github.ref == 'refs/heads/main' || contains(github.event.head_commit.message, 'python') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install Python dependencies
      working-directory: apps/service-python
      run: |
        python -m pip install --upgrade pip
        # Install production dependencies
        echo "üì¶ Installing production dependencies..."
        pip install -r requirements.txt
        
        # Install development dependencies - try pyproject.toml first, fallback to requirements-dev.txt
        echo "üîß Installing development dependencies..."
        if pip install -e ".[dev]" 2>/dev/null; then
          echo "‚úÖ Installed dev dependencies from pyproject.toml"
        elif [ -f requirements-dev.txt ]; then
          echo "üìã Fallback: Installing dev dependencies from requirements-dev.txt"
          pip install -r requirements-dev.txt
        else
          echo "‚ö†Ô∏è No dev dependencies configuration found"
          exit 1
        fi
        
        # Verify critical testing tools are available
        echo "üîç Verifying testing tools..."
        python -c "import pytest; import fastapi; from fastapi.testclient import TestClient; print('‚úÖ Testing tools ready')" || {
          echo "‚ùå Critical testing tools missing"
          exit 1
        }

    - name: Run Python tests
      working-directory: apps/service-python
      run: |
        echo "üß™ Running Python tests..."
        python -m pytest tests/ -v --tb=short
        echo "‚úÖ Python tests completed"

  # ---------- DEPLOY TO VPS ----------
  deploy:
    needs: [build-and-test]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || inputs.force_deploy)
    
    environment:
      name: production
      url: https://apiportfolio.mysticdatanode.net
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: web-build-${{ github.sha }}
        path: ./build-artifacts/
        
    - name: Verify build artifacts
      run: |
        echo "üîç Verifying downloaded artifacts..."
        ls -la ./build-artifacts/
        test -f "./build-artifacts/apps/web/server.js" || (echo "‚ùå server.js missing from artifacts" && exit 1)
        echo "‚úÖ Build artifacts verified"

    - name: Setup SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to VPS
      run: |
        echo "üöÄ Deploying to VPS..."
        
        # Create deployment package
        tar -czf deployment-${{ github.sha }}.tar.gz -C ./build-artifacts .
        
        # Upload deployment package
        scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
          deployment-${{ github.sha }}.tar.gz \
          ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/
          
        # Deploy on VPS using existing deploy script
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
          set -euo pipefail
          
          echo 'üöÄ Starting VPS deployment...'
          
          # Navigate to app directory
          cd /var/www/vhosts/apiportfolio.mysticdatanode.net/portfolio-app
          
          # Create backup
          if [ -d '.next' ]; then
            echo 'üíæ Creating backup...'
            tar -czf /var/backups/portfolio/backup-\$(date +%Y%m%d-%H%M%S).tar.gz .next public 2>/dev/null || true
          fi
          
          # Extract new build
          echo 'üìÇ Extracting new build...'
          tar -xzf /tmp/deployment-${{ github.sha }}.tar.gz
          rm /tmp/deployment-${{ github.sha }}.tar.gz
          
          # Navigate to the correct directory for Next.js standalone app
          cd apps/web
          
          # Verify extraction
          test -f 'server.js' || { echo '‚ùå server.js missing after extraction'; exit 1; }
          
          # Set environment variables
          export NODE_ENV=production
          export NEXT_PUBLIC_API_BASE_URL=https://apiportfolio.mysticdatanode.net/api
          export NEXT_PUBLIC_SITE_URL=https://apiportfolio.mysticdatanode.net
          export PORT=3000
          export HOSTNAME=localhost
          
          # Restart the application using PM2
          echo 'üîÑ Restarting application...'
          pm2 restart portfolio-web || pm2 start server.js --name portfolio-web
          
          # Wait for startup
          sleep 5
          
          # Health check
          if pm2 describe portfolio-web | grep -q 'online'; then
            echo '‚úÖ Application is running successfully!'
          else
            echo '‚ùå Application failed to start!'
            pm2 logs portfolio-web --lines 20
            exit 1
          fi
          
          echo 'üéâ Deployment completed successfully!'
        "

    - name: Verify deployment
      run: |
        echo "‚è±Ô∏è Waiting for application to start..."
        sleep 10
        
        echo "üß™ Testing deployment..."
        curl -f -s -o /dev/null https://apiportfolio.mysticdatanode.net && echo "‚úÖ Website is accessible!" || echo "‚ùå Website check failed"
        
        echo "üéâ Deployment verification completed!"

  # ---------- CLEANUP ----------
  cleanup:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Cleanup artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.runId,
          });
          
          for (const artifact of artifacts.data.artifacts) {
            if (artifact.name.startsWith('web-build-')) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
              console.log(`Deleted artifact: ${artifact.name}`);
            }
          }