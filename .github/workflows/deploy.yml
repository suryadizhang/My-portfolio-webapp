name: Deploy to IONOS VPS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [closed]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: 🏗 Checkout code
      uses: actions/checkout@v4

    - name: 🏗 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🏗 Build application
      run: |
        npm run build
        ls -la apps/web/.next || echo "Build directory not found"
        ls -la apps/web/public || echo "Public directory not found"
      env:
        NODE_ENV: production
        NEXT_PUBLIC_SITE_URL: ${{ secrets.SITE_URL }}

    - name: 🧪 Run tests (optional)
      run: npm run test --if-present

    - name: 📂 Create deployment package
      run: |
        # Create a combined package.json for production
        echo "Creating production package.json..."
        cat > production-package.json << 'EOF'
        {
          "name": "portfolio-production",
          "version": "0.1.0",
          "private": true,
          "scripts": {
            "start": "node app.js",
            "build": "echo 'Build already completed'"
          },
          "dependencies": {
            "next": "^15.0.0",
            "react": "^18.3.1",
            "react-dom": "^18.3.1",
            "@mdx-js/loader": "^3.0.0",
            "@mdx-js/react": "^3.0.0",
            "@next/mdx": "^15.0.0",
            "@tailwindcss/typography": "^0.5.10",
            "gray-matter": "^4.0.3",
            "lucide-react": "^0.447.0",
            "next-mdx-remote": "^5.0.0",
            "next-themes": "^0.2.1",
            "pdfjs-dist": "^5.3.93"
          },
          "engines": {
            "node": ">=18.0.0",
            "npm": ">=8.0.0"
          }
        }
        EOF
        
        # Create temporary directory for deployment files
        mkdir -p temp-deploy
        
        # Copy files with proper structure
        cp -r apps/web/.next temp-deploy/ 2>/dev/null || echo "Warning: .next not found"
        cp -r apps/web/public temp-deploy/ 2>/dev/null || echo "Warning: public not found"
        cp apps/web/package.json temp-deploy/web-package.json 2>/dev/null || echo "Warning: web package.json not found"
        cp apps/web/next.config.js temp-deploy/ 2>/dev/null || echo "Warning: next.config.js not found"
        cp app.js temp-deploy/
        cp ecosystem.config.js temp-deploy/ 2>/dev/null || echo "Warning: ecosystem.config.js not found"
        cp production-package.json temp-deploy/package.json
        
        # Create archive from temp directory
        cd temp-deploy
        tar --exclude='node_modules' --exclude='.git' --exclude='.env.local' -czf ../deployment.tar.gz *
        cd ..
        
        # Clean up
        rm -rf temp-deploy production-package.json
        
        # Verify archive contents
        echo "Deployment package contents:"
        tar -tzf deployment.tar.gz | head -20

    - name: 🚀 Deploy to VPS
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        password: ${{ secrets.VPS_PASSWORD }}
        port: ${{ secrets.VPS_PORT || '22' }}
        script: |
          set -e
          echo "Starting deployment..."
          
          # Basic environment check
          echo "Current user: $(whoami)"
          echo "Current directory: $(pwd)"
          
          # Create app directory
          if [ ! -d "/var/www/vhosts/${{ secrets.DOMAIN_NAME }}/httpdocs" ]; then
            echo "Creating httpdocs directory..."
            mkdir -p "/var/www/vhosts/${{ secrets.DOMAIN_NAME }}/httpdocs" || {
              echo "Failed to create directory. Trying with current path..."
              mkdir -p "httpdocs" || echo "Directory creation failed"
            }
          fi
          
          # Navigate to target directory
          cd "/var/www/vhosts/${{ secrets.DOMAIN_NAME }}/httpdocs" || {
            echo "Failed to navigate to httpdocs, trying current directory..."
            pwd
            ls -la
          }
          
          echo "✅ Pre-deployment setup completed"

    - name: 📤 Upload files to VPS
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        password: ${{ secrets.VPS_PASSWORD }}
        port: ${{ secrets.VPS_PORT || '22' }}
        source: "deployment.tar.gz"
        target: "/var/www/vhosts/${{ secrets.DOMAIN_NAME }}/httpdocs/"
        strip_components: 0
      continue-on-error: false

    - name: 🔧 Configure and start application
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        password: ${{ secrets.VPS_PASSWORD }}
        port: ${{ secrets.VPS_PORT || '22' }}
        script: |
          cd /var/www/vhosts/${{ secrets.DOMAIN_NAME }}/httpdocs

          # Extract deployment
          tar -xzf deployment.tar.gz
          rm deployment.tar.gz

          # Create directory structure
          mkdir -p logs apps/web

          # Move files to correct locations for monorepo structure
          if [ -d ".next" ]; then
            mv .next apps/web/
          fi
          if [ -d "public" ]; then
            mv public apps/web/
          fi
          if [ -f "web-package.json" ]; then
            mv web-package.json apps/web/package.json
          fi
          if [ -f "next.config.js" ]; then
            mv next.config.js apps/web/
          fi

          # Install Node.js if not present
          if ! command -v node &> /dev/null; then
            echo "❌ Node.js not found. Please enable Node.js in Plesk control panel first."
            exit 0
          fi

          # Verify Node.js version
          node --version
          npm --version

          # Install production dependencies
          echo "Installing dependencies..."
          npm install --production --no-audit --no-fund 2>/dev/null || {
            echo "⚠️ npm install had issues, trying npm ci..."
            npm ci --production --no-audit 2>/dev/null || {
              echo "⚠️ Dependencies installation failed, continuing anyway..."
            }
          }

          # Stop any existing Node.js processes on port 3000 (ignore errors)
          pkill -f "node.*3000" 2>/dev/null || echo "No processes to stop"
          sleep 1

          # Test the application
          echo "Testing Node.js application..."
          node -e "console.log('✅ Node.js is working'); process.exit(0);" || {
            echo "❌ Node.js test failed"
            exit 1
          }

          # Check if app.js exists and test syntax
          if [ -f "app.js" ]; then
            echo "✅ app.js found"
            node -c app.js && echo "✅ app.js syntax valid" || {
              echo "❌ app.js syntax error"
              cat app.js
              exit 1
            }
          else
            echo "❌ app.js not found"
            ls -la
            exit 1
          fi

          # Set proper file permissions
          chmod +x app.js
          chmod -R 755 apps/web/
          
          echo "🚀 Application configured successfully"
          echo "� Files deployed:"
          ls -la | head -10
          echo "📁 Web app files:"
          ls -la apps/web/ | head -5 2>/dev/null || echo "No apps/web directory"

    - name: ✅ Verify deployment
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        password: ${{ secrets.VPS_PASSWORD }}
        port: ${{ secrets.VPS_PORT || '22' }}
        script: |
          # Wait for app to start
          sleep 10

          # Test local endpoint
          curl -f -s http://localhost:3000 > /dev/null && echo "✅ Local endpoint test passed" || echo "⚠️ Local endpoint test failed"

          # Test PDF API
          curl -f -s http://localhost:3000/api/resume/view > /dev/null && echo "✅ PDF API test passed" || echo "⚠️ PDF API test failed"

          # Show recent logs
          pm2 logs portfolio-web --lines 10 || echo "No PM2 logs available"

    - name: 📊 Deployment Summary
      run: |
        echo "🎉 Deployment completed!"
        echo "🌐 Site: https://${{ secrets.DOMAIN_NAME }}"
        echo "📋 Check logs with: pm2 logs portfolio-web"
        echo "📈 Monitor with: pm2 monit"