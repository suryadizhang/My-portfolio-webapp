name: Deploy to IONOS VPS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [closed]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: 🏗 Checkout code
      uses: actions/checkout@v4

    - name: 🏗 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🏗 Build application
      run: |
        npm run build
        ls -la apps/web/.next || echo "Build directory not found"
        ls -la apps/web/public || echo "Public directory not found"
      env:
        NODE_ENV: production
        NEXT_PUBLIC_SITE_URL: ${{ secrets.SITE_URL }}

    - name: 🧪 Run tests (optional)
      run: npm run test --if-present

    - name: 📂 Create deployment package
      run: |
        # Create a combined package.json for production
        echo "Creating production package.json..."
        cat > production-package.json << 'EOF'
        {
          "name": "portfolio-production",
          "version": "0.1.0",
          "private": true,
          "scripts": {
            "start": "node app.js",
            "build": "echo 'Build already completed'"
          },
          "dependencies": {
            "next": "^15.0.0",
            "react": "^18.3.1",
            "react-dom": "^18.3.1",
            "@mdx-js/loader": "^3.0.0",
            "@mdx-js/react": "^3.0.0",
            "@next/mdx": "^15.0.0",
            "@tailwindcss/typography": "^0.5.10",
            "gray-matter": "^4.0.3",
            "lucide-react": "^0.447.0",
            "next-mdx-remote": "^5.0.0",
            "next-themes": "^0.2.1",
            "pdfjs-dist": "^5.3.93"
          },
          "engines": {
            "node": ">=18.0.0",
            "npm": ">=8.0.0"
          }
        }
        EOF
        
        # Create deployment archive
        tar -czf deployment.tar.gz \
          apps/web/.next \
          apps/web/public \
          apps/web/package.json \
          apps/web/next.config.js \
          app.js \
          ecosystem.config.js \
          deploy.sh \
          --exclude=node_modules \
          --exclude=.git \
          --exclude=.env.local
        
        # Add production package.json as package.json
        tar -rf deployment.tar.gz --transform 's/production-package.json/package.json/' production-package.json
        
        # Compress the final archive
        gzip deployment.tar
        mv deployment.tar.gz deployment.tar.gz
        
        # Verify archive contents
        echo "Deployment package contents:"
        tar -tzf deployment.tar.gz | head -20

    - name: 🚀 Deploy to VPS
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        password: ${{ secrets.VPS_PASSWORD }}
        port: ${{ secrets.VPS_PORT || '22' }}
        script: |
          # Create app directory if it doesn't exist
          mkdir -p /var/www/vhosts/${{ secrets.DOMAIN_NAME }}/httpdocs
          cd /var/www/vhosts/${{ secrets.DOMAIN_NAME }}/httpdocs

          # Backup existing deployment
          if [ -d ".next" ]; then
            tar -czf backup-$(date +%Y%m%d-%H%M%S).tar.gz .next public || true
          fi

          # Stop existing PM2 process if running
          pm2 stop portfolio-web || echo "No existing PM2 process to stop"

    - name: 📤 Upload files to VPS
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        password: ${{ secrets.VPS_PASSWORD }}
        port: ${{ secrets.VPS_PORT || '22' }}
        source: "deployment.tar.gz"
        target: "/var/www/vhosts/${{ secrets.DOMAIN_NAME }}/httpdocs/"

    - name: 🔧 Configure and start application
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        password: ${{ secrets.VPS_PASSWORD }}
        port: ${{ secrets.VPS_PORT || '22' }}
        script: |
          cd /var/www/vhosts/${{ secrets.DOMAIN_NAME }}/httpdocs

          # Extract deployment
          tar -xzf deployment.tar.gz
          rm deployment.tar.gz

          # Create directory structure
          mkdir -p logs

          # Install Node.js if not present
          if ! command -v node &> /dev/null; then
            curl -fsSL https://rpm.nodesource.com/setup_20.x | sudo bash -
            sudo dnf install nodejs -y
          fi

          # Install production dependencies
          npm ci --production --silent

          # Stop any existing Node.js processes on port 3000
          sudo pkill -f "node.*3000" || true
          sleep 2

          # Test the application
          echo "Testing Node.js application..."
          node -e "console.log('✅ Node.js is working'); process.exit(0);" || {
            echo "❌ Node.js test failed"
            exit 1
          }

          # Check if app.js exists
          if [ -f "app.js" ]; then
            echo "✅ app.js found"
            
            # Test app.js syntax
            node -c app.js && echo "✅ app.js syntax valid" || {
              echo "❌ app.js syntax error"
              exit 1
            }
          else
            echo "❌ app.js not found"
            ls -la
            exit 1
          fi

          echo "🚀 Application configured successfully"
          echo "📋 Plesk should now be able to start the Node.js application"

    - name: ✅ Verify deployment
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        password: ${{ secrets.VPS_PASSWORD }}
        port: ${{ secrets.VPS_PORT || '22' }}
        script: |
          # Wait for app to start
          sleep 10

          # Test local endpoint
          curl -f -s http://localhost:3000 > /dev/null && echo "✅ Local endpoint test passed" || echo "⚠️ Local endpoint test failed"

          # Test PDF API
          curl -f -s http://localhost:3000/api/resume/view > /dev/null && echo "✅ PDF API test passed" || echo "⚠️ PDF API test failed"

          # Show recent logs
          pm2 logs portfolio-web --lines 10 || echo "No PM2 logs available"

    - name: 📊 Deployment Summary
      run: |
        echo "🎉 Deployment completed!"
        echo "🌐 Site: https://${{ secrets.DOMAIN_NAME }}"
        echo "📋 Check logs with: pm2 logs portfolio-web"
        echo "📈 Monitor with: pm2 monit"