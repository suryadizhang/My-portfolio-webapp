name: "Production Deployment"

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy even if no changes detected'
        required: false
        default: false
        type: boolean

concurrency:
  group: production-deploy
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: suryadizhang/my-portfolio-webapp

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      web: ${{ steps.changes.outputs.web }}
      api: ${{ steps.changes.outputs.api }}
      ai: ${{ steps.changes.outputs.ai }}
      shared: ${{ steps.changes.outputs.shared }}
      any: ${{ steps.changes.outputs.any }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Detect changes
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            web:
              - 'apps/web/**'
              - 'packages/ui/**'
              - 'packages/utils/**'
              - 'packages/config/**'
              - 'Dockerfile'
              - 'vercel.json'
            api:
              - 'apps/api/**'
            ai:
              - 'apps/ai-api/**'
            shared:
              - 'package.json'
              - 'package-lock.json'
              - 'turbo.json'
              - 'tsconfig.base.json'
              - '.github/workflows/**'
            any:
              - '**'

  # Build and prepare application
  build-application:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.any == 'true' || github.event.inputs.force_deploy == 'true' }}
    timeout-minutes: 30
    
    permissions:
      contents: read
      packages: write
    
    outputs:
      image: ${{ steps.docker-build.outputs.image }}
      build-id: ${{ steps.build-info.outputs.build-id }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Generate build information
      id: build-info
      run: |
        BUILD_ID="${{ github.sha }}-$(date +%s)"
        echo "build-id=$BUILD_ID" >> $GITHUB_OUTPUT
        echo "Build ID: $BUILD_ID"
        echo "Frontend changes: ${{ needs.detect-changes.outputs.frontend }}"
        echo "Backend changes: ${{ needs.detect-changes.outputs.backend }}"
        echo "Shared changes: ${{ needs.detect-changes.outputs.shared }}"
        echo "Documentation changes: ${{ needs.detect-changes.outputs.docs }}"
      
    - name: Validate repository structure
      run: |
        echo "üîç Validating critical files..."
        
        # Core configuration files
        test -f "tsconfig.base.json" || (echo "‚ùå tsconfig.base.json missing" && exit 1)
        test -f "apps/web/tsconfig.json" || (echo "‚ùå apps/web/tsconfig.json missing" && exit 1)
        test -f "apps/web/next.config.js" || (echo "‚ùå apps/web/next.config.js missing" && exit 1)
        test -f "apps/web/package.json" || (echo "‚ùå apps/web/package.json missing" && exit 1)
        
        # Workspace packages
        test -d "packages/ui/src" || (echo "‚ùå packages/ui/src missing" && exit 1)
        test -d "packages/utils/src" || (echo "‚ùå packages/utils/src missing" && exit 1)
        test -d "packages/config" || (echo "‚ùå packages/config missing" && exit 1)
        
        # API documentation files (if docs changed)
        if [[ "${{ needs.detect-changes.outputs.docs }}" == "true" ]]; then
          test -f "apps/web/src/app/api-docs/page.tsx" || (echo "‚ùå API docs page missing" && exit 1)
          test -f "apps/web/src/components/swagger/SwaggerUI.tsx" || (echo "‚ùå SwaggerUI component missing" && exit 1)
          test -f "apps/web/src/lib/swagger/openapi.ts" || (echo "‚ùå OpenAPI spec missing" && exit 1)
          test -f "TESTING_REPORT.md" || (echo "‚ùå Testing report missing" && exit 1)
          echo "‚úÖ API documentation files validated"
        fi
        
        # Utils package exports
        test -f "packages/utils/src/schemas/index.ts" || (echo "‚ùå utils schemas index missing" && exit 1)
        test -f "packages/utils/src/kv/index.ts" || (echo "‚ùå utils kv index missing" && exit 1)
        test -f "packages/utils/src/auth/index.ts" || (echo "‚ùå utils auth index missing" && exit 1)
        
        echo "‚úÖ All critical files validated successfully"

    - name: Setup Node.js environment
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: |
        echo "üì¶ Installing workspace dependencies..."
        npm ci --include-workspace-root --workspaces
        
        echo "üîç Verifying workspace package resolution..."
        node -e "
          try {
            require.resolve('@portfolio/ui');
            require.resolve('@portfolio/utils');
            require.resolve('@portfolio/config');
            console.log('‚úÖ All workspace packages resolved successfully');
          } catch (e) {
            console.error('‚ùå Package resolution failed:', e.message);
            process.exit(1);
          }
        "

    - name: Run quality checks
      run: |
        echo "üîé Running TypeScript type checking..."
        npm run typecheck
        
        echo "üß™ Running tests..."
        npm run test
        
        echo "‚úÖ All quality checks passed"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=sha,prefix=prod-
          type=raw,value=latest
          
    - name: Build and push Docker image
      id: docker-build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NODE_ENV=production
          NEXT_PUBLIC_API_BASE_URL=https://myportfolio.mysticdatanode.net/api
          NEXT_PUBLIC_SITE_URL=https://myportfolio.mysticdatanode.net
        
    - name: Output build information
      run: |
        echo "üê≥ Docker image built successfully:"
        echo "Tags: ${{ steps.meta.outputs.tags }}"
        echo "Image: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}"
        echo "Build ID: ${{ steps.build-info.outputs.build-id }}"
        echo "image=${{ fromJSON(steps.meta.outputs.json).tags[0] }}" >> $GITHUB_OUTPUT

  # Deploy to Vercel (Frontend)
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-application]
    if: ${{ (needs.detect-changes.outputs.frontend == 'true' || needs.detect-changes.outputs.shared == 'true' || needs.detect-changes.outputs.docs == 'true' || github.event.inputs.force_deploy == 'true') && success() }}
    timeout-minutes: 20
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js for Vercel
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install Vercel CLI
      run: npm install -g vercel@latest
      
    - name: Pull Vercel environment information
      run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      
    - name: Install dependencies for Vercel build
      run: npm ci --include-workspace-root --workspaces
      
    - name: Build project artifacts for Vercel
      run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      
    - name: Deploy to Vercel
      id: vercel-deploy
      run: |
        URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
        echo "deployment-url=$URL" >> $GITHUB_OUTPUT
        echo "‚úÖ Frontend deployed to: $URL"
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        
    - name: Verify frontend deployment
      run: |
        echo "üîç Verifying frontend deployment..."
        FRONTEND_URL="${{ steps.vercel-deploy.outputs.deployment-url }}"
        
        # Wait for deployment to be ready
        sleep 30
        
        # Basic health check
        if curl -f -s -o /dev/null "$FRONTEND_URL"; then
          echo "‚úÖ Frontend is accessible at: $FRONTEND_URL"
        else
          echo "‚ùå Frontend health check failed"
          exit 1
        fi
        
        # Check API documentation endpoint (if docs changed)
        if [[ "${{ needs.detect-changes.outputs.docs }}" == "true" ]]; then
          if curl -f -s -o /dev/null "$FRONTEND_URL/api-docs"; then
            echo "‚úÖ API documentation is accessible"
          else
            echo "‚ùå API documentation health check failed"
            exit 1
          fi
        fi

  # Deploy to VPS (Backend API)
  deploy-backend:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-application]
    if: ${{ (needs.detect-changes.outputs.web == 'true' || needs.detect-changes.outputs.shared == 'true' || github.event.inputs.force_deploy == 'true') && success() }}
    timeout-minutes: 30
    
    environment:
      name: production-vps
      url: http://108.175.12.154
    
    steps:
    - name: Validate required secrets
      run: |
        MISSING=0
        [ -n "${{ secrets.VPS_SSH_PRIVATE_KEY }}" ] || { echo "‚ùå Missing VPS_SSH_PRIVATE_KEY"; MISSING=1; }
        [ -n "${{ secrets.VPS_HOST }}" ] || { echo "‚ùå Missing VPS_HOST"; MISSING=1; }
        [ -n "${{ secrets.VPS_USER }}" ] || { echo "‚ùå Missing VPS_USER"; MISSING=1; }
        
        if [ $MISSING -eq 1 ]; then
          echo "‚ùå Required secrets are missing. Please configure:"
          echo "  - VPS_SSH_PRIVATE_KEY: SSH private key for VPS access"
          echo "  - VPS_HOST: VPS hostname or IP address"
          echo "  - VPS_USER: SSH username for VPS"
          exit 1
        fi
        
        echo "‚úÖ All required secrets are configured"
      
    - name: Setup SSH configuration
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.VPS_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts || true
        
    - name: Deploy backend on VPS (Docker)
      run: |
        VPS_USER="${{ secrets.VPS_USER }}"
        VPS_HOST="${{ secrets.VPS_HOST }}"
        IMAGE="${{ needs.build-application.outputs.image }}"
        
        echo "üöÄ Starting backend deployment to $VPS_USER@$VPS_HOST..."
        
        # Deploy using Docker directly (no file extraction)
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST "
        set -euo pipefail
        
        echo 'üê≥ Pulling and deploying Docker container...'
        
        # Login to GitHub Container Registry
        echo '${{ secrets.GITHUB_TOKEN }}' | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        
        # Pull the latest image
        docker pull ${{ needs.build-application.outputs.image }}
        
        # Stop and remove existing container
        docker rm -f portfolio-backend || true
        
        # Run new container
        docker run -d \
          --name portfolio-backend \
          --restart=always \
          -p 3001:3000 \
          -e NODE_ENV=production \
          -e NEXT_PUBLIC_SITE_URL=https://myportfolio.mysticdatanode.net \
          -e NEXT_PUBLIC_API_BASE_URL=http://108.175.12.154:3001/api \
          ${{ needs.build-application.outputs.image }}
        
        # Wait for container to start
        sleep 10
        
        # Verify container is running
        if docker ps | grep -q portfolio-backend; then
          echo '‚úÖ Backend container started successfully'
          docker logs --tail 10 portfolio-backend
        else
          echo '‚ùå Backend container failed to start'
          docker logs portfolio-backend
          exit 1
        fi
        
        echo 'üéâ Backend deployment completed successfully!'
        "
        
    - name: Verify backend deployment
      run: |
        echo "üîç Verifying backend deployment..."
        VPS_HOST="${{ secrets.VPS_HOST }}"
        
        # Wait for backend to be fully ready
        sleep 15
        
        # Health check for backend API
        if curl -f -s -o /dev/null "http://$VPS_HOST:3001/api/health" 2>/dev/null; then
          echo "‚úÖ Backend API is accessible and healthy"
        else
          echo "‚ö†Ô∏è Backend API health check returned non-200 status (may be expected if /api/health doesn't exist)"
          
          # Try a basic connection test
          if nc -z $VPS_HOST 3001 2>/dev/null; then
            echo "‚úÖ Backend service is listening on port 3001"
          else
            echo "‚ùå Backend service is not accessible on port 3001"
            exit 1
          fi
        fi

  # Deployment summary
  deployment-summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-application, deploy-frontend, deploy-backend]
    if: always()
    
    steps:
    - name: Generate deployment summary
      run: |
        echo "# üöÄ Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Build ID:** ${{ needs.build-application.outputs.build-id }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## üìä Changes Detected" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend:** ${{ needs.detect-changes.outputs.frontend }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend:** ${{ needs.detect-changes.outputs.backend }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Shared:** ${{ needs.detect-changes.outputs.shared }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Documentation:** ${{ needs.detect-changes.outputs.docs }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## üéØ Deployment Results" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
        
        # Build status
        if [ "${{ needs.build-application.result }}" = "success" ]; then
          echo "| üèóÔ∏è Build | ‚úÖ Success | Docker image built and verified |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| üèóÔ∏è Build | ‚ùå Failed | Build process encountered errors |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Frontend deployment status
        if [ "${{ needs.deploy-frontend.result }}" = "success" ]; then
          echo "| üåê Frontend (Vercel) | ‚úÖ Success | Deployed to production |" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.deploy-frontend.result }}" = "skipped" ]; then
          echo "| üåê Frontend (Vercel) | ‚è≠Ô∏è Skipped | No frontend changes detected |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| üåê Frontend (Vercel) | ‚ùå Failed | Deployment encountered errors |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Backend deployment status
        if [ "${{ needs.deploy-backend.result }}" = "success" ]; then
          echo "| üñ•Ô∏è Backend (VPS) | ‚úÖ Success | Deployed to VPS successfully |" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.deploy-backend.result }}" = "skipped" ]; then
          echo "| üñ•Ô∏è Backend (VPS) | ‚è≠Ô∏è Skipped | No backend changes detected |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| üñ•Ô∏è Backend (VPS) | ‚ùå Failed | VPS deployment encountered errors |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üîó Access Points" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend:** https://myportfolio.mysticdatanode.net" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend API:** http://108.175.12.154:3001/api" >> $GITHUB_STEP_SUMMARY
        echo "- **API Documentation:** https://myportfolio.mysticdatanode.net/api-docs" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Overall status
        if [ "${{ needs.build-application.result }}" = "success" ] && 
           ([ "${{ needs.deploy-frontend.result }}" = "success" ] || [ "${{ needs.deploy-frontend.result }}" = "skipped" ]) && 
           ([ "${{ needs.deploy-backend.result }}" = "success" ] || [ "${{ needs.deploy-backend.result }}" = "skipped" ]); then
          echo "## ‚úÖ Deployment Completed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "All components have been deployed successfully to production." >> $GITHUB_STEP_SUMMARY
        else
          echo "## ‚ùå Deployment Issues Detected" >> $GITHUB_STEP_SUMMARY
          echo "Some components encountered issues during deployment. Please check the job logs for details." >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: Check overall deployment status
      run: |
        if [ "${{ needs.build-application.result }}" = "failure" ]; then
          echo "‚ùå Build failed"
          exit 1
        fi
        
        if [ "${{ needs.deploy-frontend.result }}" = "failure" ]; then
          echo "‚ùå Frontend deployment failed"
          exit 1
        fi
        
        if [ "${{ needs.deploy-backend.result }}" = "failure" ]; then
          echo "‚ùå Backend deployment failed"
          exit 1
        fi
        
        echo "‚úÖ All deployments completed successfully (or were skipped appropriately)"