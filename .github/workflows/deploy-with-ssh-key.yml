name: Build & Deploy to IONOS VPS (Docker)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: deploy-main
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: suryadizhang/my-portfolio-webapp

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    permissions:
      contents: read
      packages: write
    
    outputs:
      image: ${{ steps.image.outputs.image }}
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=sha,prefix=main-
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Output image
      id: image
      run: |
        echo "Generated tags: ${{ steps.meta.outputs.tags }}"
        echo "image=${{ fromJSON(steps.meta.outputs.json).tags[0] }}" >> $GITHUB_OUTPUT

  extract:
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 20
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Extract application from Docker image
      run: |
        # Debug: Show what image we're trying to pull
        echo "🔍 Attempting to pull image: ${{ needs.build.outputs.image }}"
        
        # Pull the built image
        docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
        
        # Check if image exists before pulling
        if ! docker pull ${{ needs.build.outputs.image }}; then
          echo "❌ Image not found: ${{ needs.build.outputs.image }}"
          exit 1
        fi
        
        echo "✅ Successfully pulled image: ${{ needs.build.outputs.image }}"
        
        # Create a temporary container and extract the complete standalone runtime
        echo "🔍 Extracting complete standalone application..."
        CID=$(docker create ${{ needs.build.outputs.image }})
        mkdir -p extracted
        
        # Copy the complete standalone folder from the Docker image
        docker cp "$CID:/app/standalone" extracted/ 2>/dev/null || {
          echo "❌ Failed to copy standalone folder from Docker image"
          echo "🔍 Inspecting Docker image structure:"
          docker run --rm ${{ needs.build.outputs.image }} find /app -type d -name "*standalone*" || true
          docker run --rm ${{ needs.build.outputs.image }} find /app -name "server.js" -type f || true
          docker rm -f "$CID"
          exit 1
        }
        
        # Clean up temporary container
        docker rm -f "$CID"
        
        # Verify we have the complete standalone runtime
        echo "🔍 Verifying extracted standalone application:"
        find extracted -maxdepth 3 -type f | sort
        
        # Verify server.js exists
        if [ ! -f "extracted/standalone/server.js" ]; then
          echo "❌ server.js not found in extracted standalone folder"
          ls -la extracted/standalone/ || true
          exit 1
        fi
        
        echo "✅ Successfully extracted complete standalone application"
        
        # Create deployment bundle
        cd extracted
        tar -czf ../deployment.tar.gz .
        
    - name: Upload deployment bundle
      uses: actions/upload-artifact@v4
      with:
        name: deployment-bundle
        path: deployment.tar.gz
        retention-days: 1

  deploy:
    runs-on: ubuntu-latest
    needs: [build, extract]
    timeout-minutes: 30
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Download deployment bundle
      uses: actions/download-artifact@v4
      with:
        name: deployment-bundle
        
    - name: Setup SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy to VPS
      run: |
        # Upload bundle
        scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
          deployment.tar.gz \
          apiportfolio@${{ secrets.VPS_HOST }}:/tmp/deployment-${{ github.sha }}.tar.gz
          
        # Deploy on VPS
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no apiportfolio@${{ secrets.VPS_HOST }} "
          set -euo pipefail
          
          echo '🚀 Starting deployment...'
          
          # Create deployment directory
          mkdir -p /var/www/vhosts/apiportfolio.mysticdatanode.net/httpdocs
          cd /var/www/vhosts/apiportfolio.mysticdatanode.net/httpdocs
          
          # Stop existing Node.js processes
          echo '🔄 Stopping existing processes...'
          pkill -f 'node.*server.js' || true
          pkill -f 'node.*standalone' || true
          sleep 2
          
          # Extract new deployment
          echo '📂 Extracting new deployment...'
          tar -xzf /tmp/deployment-${{ github.sha }}.tar.gz
          rm /tmp/deployment-${{ github.sha }}.tar.gz
          
          # Verify the standalone application
          echo '🔍 Listing extracted contents:'
          ls -la || true
          
          if [ ! -f 'standalone/server.js' ]; then
            echo '❌ Standalone server.js not found'
            echo 'Available files:'
            find . -name 'server.js' -type f || true
            echo 'Standalone directory contents:'
            ls -la standalone/ || true
            exit 1
          fi
          
          echo '✅ Standalone server found at standalone/server.js'
          
          # Set production environment
          export NODE_ENV=production
          export NEXT_PUBLIC_API_BASE_URL=https://apiportfolio.mysticdatanode.net/api
          export NEXT_PUBLIC_SITE_URL=https://apiportfolio.mysticdatanode.net
          export PORT=3000
          export HOSTNAME=localhost
          
          # Verify Node.js version (Next.js 15 requires >= 18.17)
          echo '🔍 Node.js version:'
          node -v
          
          # Start the standalone application directly
          echo '🎯 Starting standalone Next.js application...'
          nohup /usr/bin/node standalone/server.js > /tmp/portfolio.log 2>&1 & echo \$! > /tmp/portfolio.pid
          
          # Wait for startup
          sleep 5
          
          # Check if process is running
          if kill -0 \$(cat /tmp/portfolio.pid) 2>/dev/null; then
            echo '✅ Application started successfully with PID:' \$(cat /tmp/portfolio.pid)
            echo '📋 Last few log lines:'
            tail -10 /tmp/portfolio.log
          else
            echo '❌ Application failed to start, showing full logs:'
            cat /tmp/portfolio.log
            exit 1
          fi
          
          echo '🎉 Deployment completed successfully!'
        "
        
    - name: Verify Deployment
      run: |
        echo "Waiting for application to start..."
        sleep 10
        curl -f -s -o /dev/null ${{ secrets.SITE_URL }} && echo "✅ Site is accessible!" || echo "❌ Site check failed"