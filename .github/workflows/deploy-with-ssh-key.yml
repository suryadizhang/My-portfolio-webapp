name: Build & Deploy to IONOS VPS (Docker)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: deploy-main
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: suryadizhang/my-portfolio-webapp

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    permissions:
      contents: read
      packages: write
    
    outputs:
      image: ${{ steps.image.outputs.image }}
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Sanity check repository files
      run: |
        echo "🔍 Checking critical files for Docker build..."
        test -f "tsconfig.base.json" || (echo "❌ tsconfig.base.json missing" && exit 1)
        test -f "apps/web/tsconfig.json" || (echo "❌ apps/web/tsconfig.json missing" && exit 1)
        test -f "apps/web/next.config.js" || (echo "❌ apps/web/next.config.js missing" && exit 1)
        
        echo "📦 Checking workspace packages:"
        ls -la packages/*/src/ || true
        test -d "packages/ui/src" || (echo "❌ packages/ui/src missing" && exit 1)
        test -d "packages/utils/src" || (echo "❌ packages/utils/src missing" && exit 1)
        test -d "packages/config" || (echo "❌ packages/config missing" && exit 1)
        
        echo "🔧 Checking utils exports:"
        test -f "packages/utils/src/schemas/index.ts" || (echo "❌ utils schemas index missing" && exit 1)
        test -f "packages/utils/src/kv/index.ts" || (echo "❌ utils kv index missing" && exit 1)
        test -f "packages/utils/src/auth/index.ts" || (echo "❌ utils auth index missing" && exit 1)
        
        echo "✅ All critical files present"
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=sha,prefix=main-
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Output image
      id: image
      run: |
        echo "Generated tags: ${{ steps.meta.outputs.tags }}"
        echo "image=${{ fromJSON(steps.meta.outputs.json).tags[0] }}" >> $GITHUB_OUTPUT
        
    - name: Verify workspace packages in image
      run: |
        echo "🔍 Verifying workspace packages are bundled..."
        docker run --rm ${{ fromJSON(steps.meta.outputs.json).tags[0] }} \
          node -e "
            try {
              console.log('✅ @portfolio/ui found at:', require.resolve('@portfolio/ui/package.json'));
            } catch(e) {
              console.log('❌ @portfolio/ui not found:', e.message);
            }
            try {
              console.log('✅ @portfolio/utils found at:', require.resolve('@portfolio/utils/package.json'));
            } catch(e) {
              console.log('❌ @portfolio/utils not found:', e.message);
            }
          " || echo "⚠️ Package verification failed (may be bundled)"

  extract:
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 20
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Extract application from Docker image
      run: |
        echo "🔍 Pulling image: ${{ needs.build.outputs.image }}"
        docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
        docker pull ${{ needs.build.outputs.image }}

        CID=$(docker create ${{ needs.build.outputs.image }})
        mkdir -p extracted

        echo "🔎 Probing for standalone output in multiple locations..."
        # 1) Preferred location (from new Dockerfile)
        if docker cp "$CID:/app/standalone" extracted/ 2>/dev/null; then
          echo "✅ Copied /app/standalone"
        # 2) Fallback: original Next.js standalone path
        elif docker cp "$CID:/repo/apps/web/.next/standalone" extracted/standalone 2>/dev/null; then
          echo "✅ Copied /repo/apps/web/.next/standalone"
          # Also bring static & public if they exist
          docker cp "$CID:/repo/apps/web/.next/static" extracted/standalone/.next/static 2>/dev/null || true
          docker cp "$CID:/repo/apps/web/public" extracted/standalone/public 2>/dev/null || true
        # 3) Another fallback for different Docker setups
        elif docker cp "$CID:/app/apps/web/.next/standalone" extracted/standalone 2>/dev/null; then
          echo "✅ Copied /app/apps/web/.next/standalone"
          docker cp "$CID:/app/apps/web/.next/static" extracted/standalone/.next/static 2>/dev/null || true
          docker cp "$CID:/app/apps/web/public" extracted/standalone/public 2>/dev/null || true
        else
          echo "❌ Could not find standalone output in image"
          echo "� Inspecting image structure:"
          docker cp "$CID:/app" extracted/_debug_app 2>/dev/null || true
          docker cp "$CID:/repo" extracted/_debug_repo 2>/dev/null || true
          echo "Contents of /app:"
          ls -la extracted/_debug_app 2>/dev/null || echo "No /app found"
          echo "Contents of /repo:"
          ls -la extracted/_debug_repo 2>/dev/null || echo "No /repo found"
          docker rm -f "$CID" || true
          exit 1
        fi

        docker rm -f "$CID"

        echo "� Verifying extracted standalone application:"
        find extracted -maxdepth 3 -type f | sort
        
        # Hard fail if server.js is missing
        if [ ! -f "extracted/standalone/server.js" ]; then
          echo "❌ server.js not found in extracted standalone folder"
          ls -la extracted/standalone/ || true
          exit 1
        fi
        
        echo "✅ Successfully extracted complete standalone application"

        # Create deployment bundle
        cd extracted
        tar -czf ../deployment.tar.gz .
        
    - name: Upload deployment bundle
      uses: actions/upload-artifact@v4
      with:
        name: deployment-bundle
        path: deployment.tar.gz
        retention-days: 1

  deploy:
    runs-on: ubuntu-latest
    needs: [build, extract]
    timeout-minutes: 30
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Download deployment bundle
      uses: actions/download-artifact@v4
      with:
        name: deployment-bundle
        
    - name: Setup SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy to VPS
      run: |
        # Upload bundle
        scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
          deployment.tar.gz \
          apiportfolio@${{ secrets.VPS_HOST }}:/tmp/deployment-${{ github.sha }}.tar.gz
          
        # Deploy on VPS
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no apiportfolio@${{ secrets.VPS_HOST }} "
          set -euo pipefail
          
          echo '🚀 Starting deployment...'
          
          # Create deployment directory
          mkdir -p /var/www/vhosts/apiportfolio.mysticdatanode.net/httpdocs
          cd /var/www/vhosts/apiportfolio.mysticdatanode.net/httpdocs
          
          # Stop existing Node.js processes
          echo '🔄 Stopping existing processes...'
          pkill -f 'node.*server.js' || true
          pkill -f 'node.*standalone' || true
          sleep 2
          
          # Extract new deployment
          echo '📂 Extracting new deployment...'
          tar -xzf /tmp/deployment-${{ github.sha }}.tar.gz
          rm /tmp/deployment-${{ github.sha }}.tar.gz
          
          # Verify the extracted bundle
          echo '🔍 Checking extracted bundle:'
          ls -la
          
          if [ ! -f 'standalone/server.js' ]; then
            echo '❌ standalone/server.js missing from deployment bundle'
            echo 'Available files:'
            find . -name '*.js' -type f | head -10 || true
            exit 1
          fi
          
          echo '✅ Standalone server found at standalone/server.js'
          
          # Set production environment
          export NODE_ENV=production
          export NEXT_PUBLIC_API_BASE_URL=https://apiportfolio.mysticdatanode.net/api
          export NEXT_PUBLIC_SITE_URL=https://apiportfolio.mysticdatanode.net
          export PORT=3000
          export HOSTNAME=localhost
          
          # Verify Node.js version (Next.js 15 requires >= 18.17)
          echo '🔍 Node.js version:'
          node -v
          
          # Start the standalone application directly
          echo '🎯 Starting standalone Next.js application...'
          nohup /usr/bin/node standalone/server.js > /tmp/portfolio.log 2>&1 & echo \$! > /tmp/portfolio.pid
          
          # Wait for startup
          sleep 5
          
          # Check if process is running
          if kill -0 \$(cat /tmp/portfolio.pid) 2>/dev/null; then
            echo '✅ Application started successfully with PID:' \$(cat /tmp/portfolio.pid)
            echo '📋 Last few log lines:'
            tail -10 /tmp/portfolio.log
          else
            echo '❌ Application failed to start, showing full logs:'
            cat /tmp/portfolio.log
            exit 1
          fi
          
          echo '🎉 Deployment completed successfully!'
        "
        
    - name: Verify Deployment
      run: |
        echo "Waiting for application to start..."
        sleep 10
        curl -f -s -o /dev/null ${{ secrets.SITE_URL }} && echo "✅ Site is accessible!" || echo "❌ Site check failed"