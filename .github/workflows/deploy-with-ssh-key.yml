name: Build & Deploy to IONOS VPS (Docker)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: deploy-main
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    permissions:
      contents: read
      packages: write
    
    outputs:
      image: ${{ steps.image.outputs.image }}
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Output image
      id: image
      run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}" >> $GITHUB_OUTPUT

  extract:
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 20
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Extract application from Docker image
      run: |
        # Pull the built image
        docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
        docker pull ${{ needs.build.outputs.image }}
        
        # Extract the application files
        mkdir -p extracted
        docker run --rm -v $(pwd)/extracted:/output ${{ needs.build.outputs.image }} sh -c "
          cp -r /app/.next /output/ &&
          cp -r /app/public /output/ &&
          cp /app/package.json /output/ &&
          cp /app/server.js /output/
        "
        
        # Create deployment bundle
        cd extracted
        tar -czf ../deployment.tar.gz .
        
    - name: Upload deployment bundle
      uses: actions/upload-artifact@v4
      with:
        name: deployment-bundle
        path: deployment.tar.gz
        retention-days: 1

  deploy:
    runs-on: ubuntu-latest
    needs: [build, extract]
    timeout-minutes: 30
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Download deployment bundle
      uses: actions/download-artifact@v4
      with:
        name: deployment-bundle
        
    - name: Setup SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy to VPS
      run: |
        # Upload bundle
        scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
          deployment.tar.gz \
          apiportfolio@${{ secrets.VPS_HOST }}:/tmp/deployment-${{ github.sha }}.tar.gz
          
        # Deploy on VPS
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no apiportfolio@${{ secrets.VPS_HOST }} "
          set -euo pipefail
          
          # Create deployment directory
          mkdir -p /var/www/vhosts/apiportfolio.mysticdatanode.net/httpdocs
          cd /var/www/vhosts/apiportfolio.mysticdatanode.net/httpdocs
          
          # Backup current deployment
          if [ -d '.next' ]; then
            mv .next .next.backup.\$(date +%s) || true
          fi
          
          # Extract new deployment
          tar -xzf /tmp/deployment-${{ github.sha }}.tar.gz
          rm /tmp/deployment-${{ github.sha }}.tar.gz
          
          # Stop existing Node.js processes
          pkill -f 'node.*server.js' || pkill -f 'node.*app.js' || true
          sleep 2
          
          # Start the application
          export NODE_ENV=production
          export NEXT_PUBLIC_API_BASE_URL=https://apiportfolio.mysticdatanode.net/api
          export NEXT_PUBLIC_SITE_URL=https://apiportfolio.mysticdatanode.net
          export PORT=3000
          
          nohup /usr/bin/node server.js > /tmp/portfolio.log 2>&1 & echo \$! > /tmp/portfolio.pid
          
          # Wait for startup
          sleep 3
          
          # Check if process is running
          if kill -0 \$(cat /tmp/portfolio.pid) 2>/dev/null; then
            echo 'Application started successfully with PID:' \$(cat /tmp/portfolio.pid)
          else
            echo 'Application failed to start, showing logs:'
            tail -20 /tmp/portfolio.log
            exit 1
          fi
          
          echo 'Deployment completed successfully!'
        "
        
    - name: Verify Deployment
      run: |
        echo "Waiting for application to start..."
        sleep 10
        curl -f -s -o /dev/null ${{ secrets.SITE_URL }} && echo "✅ Site is accessible!" || echo "❌ Site check failed"