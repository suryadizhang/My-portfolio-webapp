name: Build & Deploy to IONOS VPS (Docker)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: deploy-main
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    permissions:
      contents: read
      packages: write
    
    outputs:
      image: ${{ steps.image.outputs.image }}
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Output image
      id: image
      run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 30
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy to VPS
      run: |
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no apiportfolio@${{ secrets.VPS_HOST }} "
          set -euo pipefail
          
          # Create deployment directory
          mkdir -p /var/www/vhosts/apiportfolio.mysticdatanode.net/app
          cd /var/www/vhosts/apiportfolio.mysticdatanode.net/app
          
          # Copy docker-compose and nginx config
          cat > docker-compose.yml << 'EOF'
        version: '3.8'
        services:
          portfolio:
            image: ${{ needs.build.outputs.image }}
            ports:
              - '3000:3000'
            environment:
              - NODE_ENV=production
              - NEXT_PUBLIC_API_BASE_URL=https://apiportfolio.mysticdatanode.net/api
              - NEXT_PUBLIC_SITE_URL=https://apiportfolio.mysticdatanode.net
            restart: unless-stopped
            healthcheck:
              test: ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost:3000']
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 40s
        EOF
          
          # Login to registry and deploy
          echo '${{ secrets.GITHUB_TOKEN }}' | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Stop existing containers
          docker-compose down || true
          
          # Pull new image and start
          docker-compose pull
          docker-compose up -d
          
          # Wait for health check
          echo 'Waiting for application to be healthy...'
          timeout 120 sh -c 'until docker-compose ps | grep -q healthy; do sleep 5; done' || {
            echo 'Health check failed, showing logs:'
            docker-compose logs --tail=50
            exit 1
          }
          
          echo 'Deployment completed successfully!'
        "
        
    - name: Verify Deployment
      run: |
        echo "Waiting for application to start..."
        sleep 10
        curl -f -s -o /dev/null ${{ secrets.SITE_URL }} && echo "✅ Site is accessible!" || echo "❌ Site check failed"